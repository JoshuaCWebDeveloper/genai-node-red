[
    {
        "id": "9e23ccbf2e0608ed",
        "type": "tab",
        "label": "Simple Chat",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec55121054ad7072",
        "type": "tab",
        "label": "Admin-Operator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3fb1b07be44ed756",
        "type": "tab",
        "label": "Sandbox",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3b5c9ca1fb9ebf48",
        "type": "tab",
        "label": "Bash Executor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "191694dad2850f37",
        "type": "tab",
        "label": "Iterative Eval 01",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8518392b3e041cfe",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4d258c7de41d3e07",
        "type": "tab",
        "label": "Simple RAG",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Portainer Flow",
        "disabled": true,
        "info": "https://flows.nodered.org/flow/648cb2a8aeb19d1f665d1c0db1e4541b"
    },
    {
        "id": "9941dd1769d8bb1b",
        "type": "subflow",
        "name": "Inject context",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "abd5674a230a71e1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 30,
                "wires": [
                    {
                        "id": "abd5674a230a71e1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Keys",
                "type": "json",
                "value": "[]",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b84666ab835bd991",
        "type": "subflow",
        "name": "Update context",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "ab9338fdefba2fb8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 30,
                "wires": [
                    {
                        "id": "ab9338fdefba2fb8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Keys",
                "type": "json",
                "value": "[]",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6d317c39edd7ba27",
        "type": "subflow",
        "name": "SSE Request",
        "info": "",
        "category": "llm request",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "1cc3136b62faf259"
                    },
                    {
                        "id": "30aeae0f9f54280e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 180,
                "wires": [
                    {
                        "id": "43f0b2ac4f71e572",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Id",
                "type": "str",
                "value": ""
            },
            {
                "name": "Url",
                "type": "str",
                "value": ""
            },
            {
                "name": "Options",
                "type": "json",
                "value": "{\"method\":\"GET\",\"headers\":{\"Content-Type\":\"application/json\"}}"
            }
        ],
        "meta": {
            "module": "mymodule"
        },
        "color": "#3FADB5",
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "6dcab040eb85e22f",
        "type": "subflow",
        "name": "Init UI Build",
        "info": "",
        "category": "llm:ui",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "f4b58a4a17cbb986"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 320,
                "wires": [
                    {
                        "id": "f4b58a4a17cbb986",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#A6BBCF",
        "icon": "node-red-contrib-uibuilder/pencilBoxMultipleWhite.svg"
    },
    {
        "id": "8bc504703109d530",
        "type": "subflow",
        "name": "Chat2",
        "info": "",
        "category": "llm:ui",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "b7177543effbb937"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 500,
                "wires": [
                    {
                        "id": "c0d9c6af807061b7",
                        "port": 0
                    },
                    {
                        "id": "05ad96f6e0c6b685",
                        "port": 0
                    },
                    {
                        "id": "99dca965fba88e8c",
                        "port": 0
                    },
                    {
                        "id": "92d3f952d628ae59",
                        "port": 0
                    },
                    {
                        "id": "90188a15c9e8124a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "HTML Id",
                "type": "str",
                "value": ""
            },
            {
                "name": "Parent",
                "type": "str",
                "value": "body"
            },
            {
                "name": "Title",
                "type": "str",
                "value": "Chat"
            }
        ],
        "meta": {},
        "color": "#A6BBCF",
        "icon": "font-awesome/fa-comment-o"
    },
    {
        "id": "30524eb290047e07",
        "type": "subflow",
        "name": "Chat2 - Provide Form Elements",
        "info": "",
        "category": "llm:ui",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "dc8928d34ef931cc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 30,
                "wires": [
                    {
                        "id": "dc8928d34ef931cc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFFFFF",
        "icon": "font-awesome/fa-comment-o"
    },
    {
        "id": "296147c1455bbb26",
        "type": "subflow",
        "name": "Chat2 - Provide Chat Elements",
        "info": "",
        "category": "llm:ui",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "6ca6b11a4f65ca27"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 380,
                "wires": [
                    {
                        "id": "c6161498694d0ff4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFFFFF",
        "icon": "font-awesome/fa-comment-o"
    },
    {
        "id": "a59054999730c251",
        "type": "subflow",
        "name": "Model - OpenAIChatCompletionsStream",
        "info": "",
        "category": "llm models",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "c5f09a313c4f789d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1460,
                "y": 660,
                "wires": [
                    {
                        "id": "5b77260b6c087625",
                        "port": 0
                    },
                    {
                        "id": "277a7bcc08d2cc66",
                        "port": 0
                    },
                    {
                        "id": "b02f3649626d6560",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Id",
                "type": "str",
                "value": ""
            },
            {
                "name": "BaseUrl",
                "type": "str",
                "value": ""
            },
            {
                "name": "Temperature",
                "type": "num",
                "value": "0.7"
            },
            {
                "name": "Stop",
                "type": "str",
                "value": ""
            },
            {
                "name": "Batch",
                "type": "num",
                "value": "1"
            },
            {
                "name": "Model",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-address-card-o"
    },
    {
        "id": "2b3efcc977e88d91",
        "type": "subflow",
        "name": "Chat UI App",
        "info": "",
        "category": "llm:ui",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "f9339a39075c7450"
                    },
                    {
                        "id": "b153a1db69fe018c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1420,
                "y": 540,
                "wires": [
                    {
                        "id": "d0bc8cbbd38f96d0",
                        "port": 0
                    },
                    {
                        "id": "8898a853cc54512d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Url",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-comments-o"
    },
    {
        "id": "ce6026c0ffde68ba",
        "type": "subflow",
        "name": "Inject history",
        "info": "",
        "category": "llm storage",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "88750c0a7f0ea58c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 200,
                "y": 360,
                "wires": [
                    {
                        "id": "e43978271213406b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Id",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#E2D96E",
        "icon": "node-red/leveldb.svg"
    },
    {
        "id": "680a38a9fc7ffbbc",
        "type": "subflow",
        "name": "Update history",
        "info": "",
        "category": "llm storage",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "f906b3e6319be105"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 380,
                "wires": [
                    {
                        "id": "f2fd598a0898c772",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Id",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#E2D96E",
        "icon": "node-red/leveldb.svg"
    },
    {
        "id": "6efc1af5415157df",
        "type": "subflow",
        "name": "Inject historyDbFilename",
        "info": "",
        "category": "llm storage",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "c6e2b0ab7145e11a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 100,
                "wires": [
                    {
                        "id": "c6e2b0ab7145e11a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#E2D96E",
        "icon": "font-awesome/fa-file-o"
    },
    {
        "id": "ae4739904e91e32d",
        "type": "subflow",
        "name": "provide - parseMarkdown",
        "info": "",
        "category": "llm parsers",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "7b7768b80e1acc34"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 260,
                "wires": [
                    {
                        "id": "7b7768b80e1acc34",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C"
    },
    {
        "id": "74bd10ee8e354d0a",
        "type": "subflow",
        "name": "History",
        "info": "",
        "category": "llm storage",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "7bb6dcdcff9df0bc"
                    },
                    {
                        "id": "eefd90d4e48a163f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1540,
                "y": 420,
                "wires": [
                    {
                        "id": "1cfad4d12606eb35",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "New",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "SourceFilename",
                "type": "str",
                "value": ""
            },
            {
                "name": "Id",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#E2D96E"
    },
    {
        "id": "54dfdee937147952",
        "type": "subflow",
        "name": "Wait for Step",
        "info": "",
        "category": "llm agents",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "059dcd4099b7cba7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 320,
                "wires": [
                    {
                        "id": "059dcd4099b7cba7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Step",
                "type": "num",
                "value": "0"
            }
        ],
        "meta": {},
        "color": "#FFAAAA"
    },
    {
        "id": "fe8f70709279ea90",
        "type": "subflow",
        "name": "Step",
        "info": "",
        "category": "llm agents",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "c58191477f52b55b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1380,
                "y": 240,
                "wires": [
                    {
                        "id": "41840610e4e89d4a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Step",
                "type": "num",
                "value": ""
            },
            {
                "name": "InitHistoryId",
                "type": "str",
                "value": ""
            },
            {
                "name": "Wait",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#FFAAAA"
    },
    {
        "id": "3bb38f582155f29d",
        "type": "subflow",
        "name": "Go to",
        "info": "",
        "category": "llm agents",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "040a413f7a91f093"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 30,
                "wires": [
                    {
                        "id": "040a413f7a91f093",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFAAAA"
    },
    {
        "id": "95c38d96d861b4c4",
        "type": "subflow",
        "name": "Parent subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "4c4840b662683b53"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 420,
                "wires": [
                    {
                        "id": "c991d0349f4aea89",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bb86be1bb99d0fec",
        "type": "subflow",
        "name": "Child Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "a04ad5963a5dbea7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 200,
                "wires": [
                    {
                        "id": "a99b59b008d644da",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9eb27f011bcf9a83",
        "type": "subflow",
        "name": "Model - LlamaCppEmbeddings",
        "info": "",
        "category": "llm models",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "5d5bf97f50b20698"
                    },
                    {
                        "id": "80de775010d1a8fb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1440,
                "y": 500,
                "wires": [
                    {
                        "id": "e3c445c220c71f92",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Id",
                "type": "str",
                "value": ""
            },
            {
                "name": "BaseUrl",
                "type": "str",
                "value": ""
            },
            {
                "name": "Model",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#87A980",
        "icon": "font-awesome/fa-address-card"
    },
    {
        "id": "2ec5ed7947d505dd",
        "type": "subflow",
        "name": "VectorStore - Qdrant",
        "info": "",
        "category": "llm storage",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "9cb813cf5332b414"
                    },
                    {
                        "id": "8bf49fc765949fdc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1760,
                "y": 440,
                "wires": [
                    {
                        "id": "b4f42425cadc44ae",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Id",
                "type": "str",
                "value": ""
            },
            {
                "name": "BaseUrl",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#C0DEED",
        "icon": "node-red/db.svg"
    },
    {
        "id": "f0aa5f2ed7dab3b8",
        "type": "subflow",
        "name": "HTTP Request",
        "info": "",
        "category": "llm request",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "1c4e6c80d9868fa0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 300,
                "wires": [
                    {
                        "id": "3d6d82698400006b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/white-globe.svg"
    },
    {
        "id": "a4137713471da6c4",
        "type": "subflow",
        "name": "RAG History",
        "info": "",
        "category": "llm storage",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "446ec29fe6cf3270"
                    },
                    {
                        "id": "dfd0dddab653fba0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 140,
                "wires": [
                    {
                        "id": "5511b481a5af2321",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "New",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "SourceFilename",
                "type": "str",
                "value": ""
            },
            {
                "name": "Id",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#E2D96E"
    },
    {
        "id": "9d188e904c4abf9e",
        "type": "subflow",
        "name": "Prompt",
        "info": "",
        "category": "llm:ui",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "f7baf9a2b6aa04e9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 540,
                "wires": [
                    {
                        "id": "db2c82fdd3e4fd59",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "HTML Id",
                "type": "str",
                "value": ""
            },
            {
                "name": "Parent",
                "type": "str",
                "value": "body"
            },
            {
                "name": "Title",
                "type": "str",
                "value": "Prompt"
            }
        ],
        "meta": {},
        "color": "#A6BBCF",
        "icon": "node-red/parser-html.svg"
    },
    {
        "id": "f19bc65164444615",
        "type": "subflow",
        "name": "Programmatic History",
        "info": "",
        "category": "llm storage",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "249204d92550e10f"
                    },
                    {
                        "id": "88303d90d7e5e417"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1540,
                "y": 340,
                "wires": [
                    {
                        "id": "56d72b63240b58d6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Factory Id",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#E2D96E"
    },
    {
        "id": "21de8117bd1967f9",
        "type": "subflow",
        "name": "provide - exractHtmlTags",
        "info": "",
        "category": "llm parsers",
        "in": [
            {
                "x": 50,
                "y": 30.90909093618393,
                "wires": [
                    {
                        "id": "3d458d6f47d14634"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 260,
                "wires": [
                    {
                        "id": "0a432a478665f6a9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C"
    },
    {
        "id": "240cc03734c17fa7",
        "type": "subflow",
        "name": "Parse Agent Response",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "c75d4b3b73c4fe40"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 80,
                "wires": [
                    {
                        "id": "af73ebafaf5dc5f2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b9a9b43a3594c357",
        "type": "subflow",
        "name": "Docker Run",
        "info": "",
        "category": "Docker",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "1540fd3640a5c2da"
                    },
                    {
                        "id": "9ead6c09c1634875"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 960,
                "wires": [
                    {
                        "id": "b136a36f1f060bab",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Container Name",
                "type": "str",
                "value": ""
            },
            {
                "name": "Image",
                "type": "str",
                "value": "ubuntu"
            },
            {
                "name": "Command",
                "type": "json",
                "value": "[\"sleep\", \"Infinity\"]"
            },
            {
                "name": "Docker Run Args",
                "type": "json",
                "value": "[\"--rm\"]"
            },
            {
                "name": "Output Mode",
                "type": "str",
                "value": "stream"
            },
            {
                "name": "Commit",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#D8BFD8",
        "icon": "font-awesome/fa-inbox"
    },
    {
        "id": "5982620408722375",
        "type": "subflow",
        "name": "Docker Logs",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 200,
                "wires": []
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d5c30c295cb6b7bc",
        "type": "subflow",
        "name": "Run Command",
        "info": "",
        "category": "llm:util",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "1c249f69debb918b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 280,
                "wires": [
                    {
                        "id": "5be0298a22eb5f2a",
                        "port": 0
                    },
                    {
                        "id": "bee02be8135363fa",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#A6BBCF",
        "icon": "font-awesome/fa-terminal"
    },
    {
        "id": "72ced27310c541f6",
        "type": "subflow",
        "name": "cURL Request",
        "info": "",
        "category": "llm request",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "03f57deed86e37c5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 120,
                "wires": [
                    {
                        "id": "c7494ed5f552a21e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/bridge-dash.svg"
    },
    {
        "id": "30eb5320bb41dc49",
        "type": "subflow",
        "name": "Build HTTP Request",
        "info": "",
        "category": "llm request",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "3762dbf4e0957cfa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "3762dbf4e0957cfa",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFFFFF"
    },
    {
        "id": "3f4aa860a3b350bc",
        "type": "subflow",
        "name": "Docker Commit",
        "info": "",
        "category": "Docker",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "f3d99166630391d1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 260,
                "wires": [
                    {
                        "id": "9fe7448838c509e5",
                        "port": 0
                    },
                    {
                        "id": "cea8afeae263e378",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Container",
                "type": "str",
                "value": ""
            },
            {
                "name": "Repository",
                "type": "str",
                "value": ""
            },
            {
                "name": "Tag",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#D8BFD8",
        "icon": "font-awesome/fa-inbox"
    },
    {
        "id": "126e4a373d8bcb36",
        "type": "subflow",
        "name": "Extract HTML Tags",
        "info": "",
        "category": "llm parsers",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "af3d5caec2de488c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 260,
                "wires": [
                    {
                        "id": "6d6f8c6f67a318de",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "node-red/parser-html.svg"
    },
    {
        "id": "828f5a08b0bcf89d",
        "type": "subflow",
        "name": "Parse Markdown",
        "info": "",
        "category": "llm parsers",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "e82cac62a6dcc5e2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 200,
                "wires": [
                    {
                        "id": "e935f75b3e48ad5e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "node-red/hash.svg"
    },
    {
        "id": "87f7528a5c81b545",
        "type": "subflow",
        "name": "Import JS Modules",
        "info": "<p>Imports given modules for use in subsequent nodes.</p>\r\n\r\n<h3>Properties</h3>\r\n\r\n<dl class=\"message-properties\" style=\"\">\r\n    <dt class=\"optional\">Modules<span class=\"property-type\">array&lt;object | string&gt;</span></dt>\r\n    <dd>Overrides <code>msg.modules</code>.</dd>\r\n</dl>\r\n\r\n<h3>Inputs</h3>\r\n\r\n<dl class=\"message-properties\" style=\"\">\r\n    <dt class=\"optional\">modules<span class=\"property-type\">array&lt;object | string&gt;</span></dt>\r\n    <dd>A list of modules to import. Modules may be either a string specifying the module name or an\r\n    object with the following properties (see:\r\n    <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">\r\n        import - JavaScript | MDN\r\n    </a>\r\n    ):\r\n    <ul>\r\n        <li><code>moduleName</code> - The module to import </li>\r\n        <li><code>key? (<b>moduleName</b>)</code> - The key to store the module imports under in <code>importedModules</code>.\r\n        <li><code>defaultExport? (<b>true</b>)</code> - Whether to import the default export. If true, will be\r\n        imported as <code>default</code> in the imported module.</li>\r\n        <li><code>namedExports? (<b>*</b>)</code> - An array of named exports to import. A named export may be\r\n        either a string specifying an export name, or an object with the following properties:\r\n        <ul>\r\n            <li><code>name</code> - The name of the export.\r\n            <li><code>alias? (<b>name</b>)</code> - The alias to import as.\r\n        </ul>\r\n        </li>\r\n    </ul>\r\n    </dd>\r\n</dl>\r\n\r\n<h3>Outputs</h3>\r\n\r\n<dl class=\"message-properties\" style=\"\">\r\n    <dt class=\"optional\">importedModules<span class=\"property-type\">object</span></dt>\r\n    <dd>A filtered module namespace object (see:\r\n    <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import#module_namespace_object\">\r\n        import() - JavaScript | MDN #Module namespace object\r\n    </a>) containing only the <code>namedExports</code> and <code>default</code> export (if specified).\r\n    </dd>\r\n</dl>\r\n\r\n<h3>Examples</h3>\r\n\r\nWhen given the following `msg` as input:\r\n\r\n```js\r\n{\r\n    ...msg,\r\n    modules: [\r\n        \"colors/safe\",\r\n        {\r\n            moduleName: \"change-case\",\r\n            key: \"changeCase\",\r\n            defaultExport: false,\r\n            namedExports: [\r\n                \"camelCase\",\r\n                {\r\n                    name: \"split\",\r\n                    alias: \"splitWords\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```\r\nThe following <code>msg</code> will be output:\r\n```js\r\n{\r\n    ...msg,\r\n    importedModules: {\r\n        \"colors/safe\": {\r\n            \"default\": {\r\n                themes,\r\n                styles,\r\n                ...\r\n            },\r\n            green,\r\n            gray,\r\n            white,\r\n            ...\r\n        },\r\n        changeCase: {\r\n            camelCase,\r\n            splitWords\r\n        }\r\n    }\r\n}\r\n```\r\n",
        "category": "llm:util",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "e98dae970d7540c6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1060,
                "y": 400,
                "wires": [
                    {
                        "id": "457ddbfd4780ea1d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Modules",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#A6BBCF",
        "icon": "font-awesome/fa-sign-in"
    },
    {
        "id": "d5c98b48f9d2d77f",
        "type": "subflow",
        "name": "Decode HTML Entities",
        "info": "",
        "category": "llm parsers",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "4432567301785438"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 140,
                "wires": [
                    {
                        "id": "e5c508b6228990f4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEBD5C",
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "573a66c74ad47252",
        "type": "group",
        "z": "2b3efcc977e88d91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "24d6b22fbb3331ef",
            "fa93074c3844e72a",
            "e64c01c3ce72e42c",
            "fd30589c82c22c62",
            "f99c0d4e42875ff9"
        ],
        "x": 314,
        "y": 459,
        "w": 452,
        "h": 222
    },
    {
        "id": "ffdcd8798ee03933",
        "type": "group",
        "z": "2b3efcc977e88d91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d0bc8cbbd38f96d0",
            "ed0c2d4f1d21f64c",
            "b7a0d2554c54f30c"
        ],
        "x": 854,
        "y": 779,
        "w": 452,
        "h": 142
    },
    {
        "id": "0e803c0423a03bad",
        "type": "group",
        "z": "2b3efcc977e88d91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ec546330d29baba3",
            "96d1b37cfc101abc"
        ],
        "x": 854,
        "y": 959,
        "w": 272,
        "h": 142
    },
    {
        "id": "1309c3c5cd6f1b74",
        "type": "group",
        "z": "2b3efcc977e88d91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2f187dab7a1ae2ad",
            "2c75870eb28bb7c5",
            "07a96f21f7eb4899",
            "e9e910c0b95eb6fc"
        ],
        "x": 514,
        "y": 759,
        "w": 252,
        "h": 242
    },
    {
        "id": "3cdc7422abfbe82e",
        "type": "group",
        "z": "2b3efcc977e88d91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3b2ca8934fb0ccd7",
            "05af6ff6db82adba"
        ],
        "x": 854,
        "y": 239,
        "w": 372,
        "h": 142
    },
    {
        "id": "2ec09f072ab0b146",
        "type": "group",
        "z": "2b3efcc977e88d91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b07e294259fdd664",
            "c5dcd2bf8b994fb8"
        ],
        "x": 854,
        "y": 39,
        "w": 352,
        "h": 122
    },
    {
        "id": "0e1cb402b61eb646",
        "type": "group",
        "z": "9e23ccbf2e0608ed",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c0c36621780669a4",
            "977f9402195729c4",
            "8ec4c35df45a28c5",
            "aaf9af66d3e39da8",
            "378e8541feaf87ec",
            "45671622e142be7e",
            "33ca3631b9af0d55"
        ],
        "x": 248,
        "y": 379,
        "w": 438,
        "h": 408
    },
    {
        "id": "8a3c592536de3111",
        "type": "group",
        "z": "2b3efcc977e88d91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e71f5a20f7b7837e",
            "c8c9a2cca8781c5f"
        ],
        "x": 854,
        "y": 419,
        "w": 332,
        "h": 142
    },
    {
        "id": "83fd8826b0ec3bf4",
        "type": "group",
        "z": "191694dad2850f37",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c85c2df7d79465a0",
            "73516493eccdfd9d",
            "f762ec936046e78f",
            "ce1b28a464e3b3b3",
            "81b98c3380c57334",
            "d48b052e253b43c3",
            "93859b35073996c8"
        ],
        "x": 74,
        "y": 579,
        "w": 592,
        "h": 368
    },
    {
        "id": "0e31504694a6eb0c",
        "type": "group",
        "z": "191694dad2850f37",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9d0d59cbd0342094",
            "b67aacc8e54e5106",
            "c533acab9a1bba89",
            "8565c4a9a8c13312"
        ],
        "x": 74,
        "y": 39,
        "w": 512,
        "h": 162
    },
    {
        "id": "17a2a4d88505d1b2",
        "type": "group",
        "z": "191694dad2850f37",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8516a2d5188e142d",
            "1322aa4137d1056e",
            "1f999e727d7bdcbd",
            "36217d16d71a4c30",
            "b38cd518b824c20d",
            "9240a0389d51445c"
        ],
        "x": 814,
        "y": 299,
        "w": 552,
        "h": 202
    },
    {
        "id": "3334e9dd5bf3557d",
        "type": "group",
        "z": "191694dad2850f37",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5dd26b4eb51f86a8",
            "833eaf27d6837495",
            "fe0f3fe28e08e2f0",
            "36f73b6e3236c721"
        ],
        "x": 854,
        "y": 779,
        "w": 512,
        "h": 162
    },
    {
        "id": "0df36a8be0d76989",
        "type": "group",
        "z": "191694dad2850f37",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0800060d86e1ca55",
            "32fd036f241606a1",
            "a33731f7d26ff1d8",
            "7b60dc37c59dc80f",
            "85c126ddb6ae9692"
        ],
        "x": 854,
        "y": 39,
        "w": 512,
        "h": 222
    },
    {
        "id": "5dbdaf47523ce33a",
        "type": "group",
        "z": "191694dad2850f37",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "4135e1850bf3099c",
            "42cede20c9456a92"
        ],
        "x": 1174,
        "y": 559,
        "w": 192,
        "h": 122
    },
    {
        "id": "b1dd9777ee396bd7",
        "type": "group",
        "z": "191694dad2850f37",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0ad9554c20eb8dd0",
            "34fa053e9707e425"
        ],
        "x": 374,
        "y": 299,
        "w": 212,
        "h": 122
    },
    {
        "id": "1ae11ef02f19ba42",
        "type": "group",
        "z": "74bd10ee8e354d0a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f5e7eec49fcf570e",
            "3039cd8559535cc4",
            "37cf58b736452c29",
            "e34397c8aec9b431",
            "3cd23f12c0321b72",
            "cc0f068e3b8d9dd6",
            "41f92e3d198f4694"
        ],
        "x": 734,
        "y": 79,
        "w": 472,
        "h": 222
    },
    {
        "id": "a6665159eabf55ba",
        "type": "group",
        "z": "4d258c7de41d3e07",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1525d739279d5422",
            "5b1ba49c624f1633",
            "4289f12402c6ede9",
            "57d76b98327ee84c",
            "0bdfb9335b655b7b",
            "1a8be604e1fb0f60"
        ],
        "x": 148,
        "y": 439,
        "w": 428,
        "h": 368
    },
    {
        "id": "132bac76be391419",
        "type": "group",
        "z": "4d258c7de41d3e07",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ac073e3ad1964190",
            "f6ee8199578688d0",
            "87918d4b1691fe73",
            "4d5a8d1e8ff6d660",
            "a4c668896ae9d468",
            "f68cbbc22164d634",
            "a9572ffa926d1edc",
            "1648a58fa167dcbd"
        ],
        "x": 1314,
        "y": 319,
        "w": 498,
        "h": 408
    },
    {
        "id": "41a1b6b6b5db2dc0",
        "type": "group",
        "z": "4d258c7de41d3e07",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e3090e8b70f84526",
            "62ff4025db27f69b",
            "083cd95ebe479e4c",
            "2989cf7eca1cfaaa"
        ],
        "x": 864,
        "y": 179,
        "w": 402,
        "h": 222
    },
    {
        "id": "d89f22418de07fba",
        "type": "group",
        "z": "4d258c7de41d3e07",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c714a08872d8c5e7",
            "9602172f379d6949",
            "8e8a149c1cc8ba68"
        ],
        "x": 1314,
        "y": 59,
        "w": 232,
        "h": 202
    },
    {
        "id": "31f8fa8c2bd1eaa9",
        "type": "group",
        "z": "2b3efcc977e88d91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8898a853cc54512d",
            "d4c07ba40b49d1c4"
        ],
        "x": 854,
        "y": 599,
        "w": 292,
        "h": 142
    },
    {
        "id": "bf3cb919a9b18a74",
        "type": "group",
        "z": "9e23ccbf2e0608ed",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c865bad2cdc088e0",
            "34dd380b3322dc77"
        ],
        "x": 474,
        "y": 239,
        "w": 212,
        "h": 122
    },
    {
        "id": "0bd29a38bd7fd7ee",
        "type": "group",
        "z": "ec55121054ad7072",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "75d06bae12a047f9",
            "a61cd1dd9aeb1256",
            "12901237f1ea6884",
            "7aad90c5be36eb0a",
            "21debbaed5b57fd5",
            "a98ec39f0f7f2c84",
            "9d4dbbbd2defb7fb"
        ],
        "x": 248,
        "y": 359,
        "w": 438,
        "h": 408
    },
    {
        "id": "f1bf7ba3b4088527",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0dd8b704b63c96a1",
            "3b853d53f8b1fb4d",
            "bd7eb8ec2a8e0da9",
            "d3e4f8597b868498"
        ],
        "x": 54,
        "y": 79,
        "w": 812,
        "h": 122
    },
    {
        "id": "856e8d2dc2416b46",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "46b306f2e48bb850",
            "733507b741691f58",
            "7887225ee569137c",
            "9f7f53505a88dbb1",
            "fdb9b09540cd5ba6",
            "374c4ab5a3ae97c7",
            "75a002efe0c1f011",
            "84cb3dac9b9f5d39",
            "909a59dbc05a2fad",
            "6fc0878730035324",
            "b56089ef7ebdddf2",
            "60e45a11ede888cb",
            "df970663c1614b1d",
            "0c165bf98f40b598",
            "a86d84649831b0fc",
            "49c1d79c39f3c0a4",
            "0b6e18ac2c03166b",
            "e6f08d657cfa77a9",
            "72d2e05a0acd3fa8",
            "35aa7e2f151f726c",
            "f1c8fbcb6c326e46",
            "bfb495bb4ca9ae6f",
            "6026847cd96ce18c",
            "12ca61074a76e5dd",
            "d8c78c08e407231e",
            "d75002a1564c11aa",
            "4534e2dfa3d348df"
        ],
        "x": 54,
        "y": 239,
        "w": 1372,
        "h": 502
    },
    {
        "id": "d3ea6600f7f1c7d6",
        "type": "group",
        "z": "f6f2187d.f17ca8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "14dab9180b245706",
            "1ed0f9b52a08f533"
        ],
        "x": 914,
        "y": 79,
        "w": 252,
        "h": 82
    },
    {
        "id": "f7696f05d57ef7a1",
        "type": "group",
        "z": "3b5c9ca1fb9ebf48",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d3eca839cbbe8f34",
            "d4ebbd593cf64e04",
            "c2b3e2bf431804bd",
            "a7de977d7732152e",
            "8ef6bd83dbaa3d85",
            "4c7815cb04fa305a",
            "3e0ce960e9b660a1"
        ],
        "x": 88,
        "y": 599,
        "w": 438,
        "h": 408
    },
    {
        "id": "e18c67f0ba18707b",
        "type": "group",
        "z": "3fb1b07be44ed756",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b75f0d8130661559",
            "26a114fc27cd90b0",
            "ea2d35fce99de4ae",
            "8f75c3504c3dbc5f",
            "e22d75a202b3a7d9",
            "233b190c4bba2abc",
            "18e60cf6d75b5c02",
            "366fdac4502597e4",
            "f58a612cea662f7f",
            "3163545a452b8023",
            "f4e0940a4675e15a",
            "d5dd065101ef890a",
            "4a5b440f0562c4c5",
            "437a9435e7f7839a",
            "234a56ef02849517",
            "bd0ab9ac636bddf7",
            "4b1052f331f48638",
            "f119a534c23868e3",
            "7e92245bb06f8113",
            "a11718080bf06447",
            "11de70778f4fcccb"
        ],
        "x": 794,
        "y": 299,
        "w": 842,
        "h": 502
    },
    {
        "id": "d20e17ae1f88e910",
        "type": "group",
        "z": "3b5c9ca1fb9ebf48",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "dd6437290fd336e7",
            "7ab56a5e25543ac8",
            "583705d65356bc91",
            "5ae745cf98b55950",
            "35a1e0a9c30682f6"
        ],
        "x": 534,
        "y": 1394,
        "w": 412,
        "h": 147
    },
    {
        "id": "aaf9af66d3e39da8",
        "type": "group",
        "z": "9e23ccbf2e0608ed",
        "g": "0e1cb402b61eb646",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "948e1265a14409b8",
            "a63ac3946c2843eb",
            "b1093b3dfa80dbe3"
        ],
        "x": 274,
        "y": 639,
        "w": 372,
        "h": 122
    },
    {
        "id": "ce1b28a464e3b3b3",
        "type": "group",
        "z": "191694dad2850f37",
        "g": "83fd8826b0ec3bf4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e451712bc8b52b18",
            "e2dd14f8d37e7a72",
            "bb6dc487db2ce156"
        ],
        "x": 214,
        "y": 799,
        "w": 372,
        "h": 122
    },
    {
        "id": "57d76b98327ee84c",
        "type": "group",
        "z": "4d258c7de41d3e07",
        "g": "a6665159eabf55ba",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9abd1089c5b967cc",
            "41c6b6041924578c",
            "388b8948292a6e42"
        ],
        "x": 174,
        "y": 659,
        "w": 372,
        "h": 122
    },
    {
        "id": "a4c668896ae9d468",
        "type": "group",
        "z": "4d258c7de41d3e07",
        "g": "132bac76be391419",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "92142139591ba63d",
            "419f2ab4efdbabd3",
            "b3466cd08378ae07"
        ],
        "x": 1374,
        "y": 579,
        "w": 412,
        "h": 122
    },
    {
        "id": "7aad90c5be36eb0a",
        "type": "group",
        "z": "ec55121054ad7072",
        "g": "0bd29a38bd7fd7ee",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d9e0c9a3cf18f405",
            "4b7f0d34fcfa313d",
            "bbeaa9f159afdfaf"
        ],
        "x": 274,
        "y": 619,
        "w": 372,
        "h": 122
    },
    {
        "id": "a7de977d7732152e",
        "type": "group",
        "z": "3b5c9ca1fb9ebf48",
        "g": "f7696f05d57ef7a1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1c9144b2ef0b4dd5",
            "399f0d05531fcfd6",
            "504106b997f60dbe"
        ],
        "x": 114,
        "y": 859,
        "w": 372,
        "h": 122
    },
    {
        "id": "b6cc1b3167117b16",
        "type": "junction",
        "z": "ec55121054ad7072",
        "x": 720,
        "y": 100,
        "wires": [
            [
                "4de07154c6644063"
            ]
        ]
    },
    {
        "id": "b3c027b1a78e62ca",
        "type": "junction",
        "z": "d5c30c295cb6b7bc",
        "x": 480,
        "y": 340,
        "wires": [
            [
                "5be0298a22eb5f2a"
            ]
        ]
    },
    {
        "id": "cf1db7761982b2fc",
        "type": "junction",
        "z": "b9a9b43a3594c357",
        "x": 540,
        "y": 720,
        "wires": [
            [
                "5a94f86438968b9b"
            ]
        ]
    },
    {
        "id": "583705d65356bc91",
        "type": "junction",
        "z": "3b5c9ca1fb9ebf48",
        "g": "d20e17ae1f88e910",
        "x": 920,
        "y": 1460,
        "wires": [
            [
                "5ae745cf98b55950"
            ]
        ]
    },
    {
        "id": "b136a36f1f060bab",
        "type": "junction",
        "z": "b9a9b43a3594c357",
        "x": 1140,
        "y": 960,
        "wires": [
            [
                "0a96edc6fd08333b"
            ]
        ]
    },
    {
        "id": "7ab56a5e25543ac8",
        "type": "junction",
        "z": "3b5c9ca1fb9ebf48",
        "g": "d20e17ae1f88e910",
        "x": 600,
        "y": 1420,
        "wires": [
            [
                "8249b529648a77f1"
            ]
        ]
    },
    {
        "id": "35a1e0a9c30682f6",
        "type": "junction",
        "z": "3b5c9ca1fb9ebf48",
        "g": "d20e17ae1f88e910",
        "x": 560,
        "y": 1500,
        "wires": [
            [
                "940cc0ae14188d1c"
            ]
        ]
    },
    {
        "id": "824ad7c29ee4fd68",
        "type": "junction",
        "z": "3b5c9ca1fb9ebf48",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "3856fb6b7a093891"
            ]
        ]
    },
    {
        "id": "63a5c80a9677a5e8",
        "type": "junction",
        "z": "3b5c9ca1fb9ebf48",
        "x": 940,
        "y": 1260,
        "wires": [
            [
                "a08be90792caa2ef"
            ]
        ]
    },
    {
        "id": "a02641d0cd9d6dbe",
        "type": "junction",
        "z": "3b5c9ca1fb9ebf48",
        "x": 940,
        "y": 1100,
        "wires": [
            [
                "f2d99994f035a684"
            ]
        ]
    },
    {
        "id": "41aad7d8f71cd6e6",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "localhost.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "abd5674a230a71e1",
        "type": "function",
        "z": "9941dd1769d8bb1b",
        "name": "Inject context",
        "func": "const toInject = Object.fromEntries(\n    env.get(\"Keys\").map(k => [k, flow.get(`$parent.${k}`)])\n);\n\nmsg = {\n    ...msg,\n    ...toInject\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ab9338fdefba2fb8",
        "type": "function",
        "z": "b84666ab835bd991",
        "name": "Update context",
        "func": "env.get(\"Keys\").forEach( k => flow.set(`$parent.${k}`, msg[k]))\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "219c0b285ee459dd",
        "type": "function",
        "z": "6d317c39edd7ba27",
        "name": "Provide SSE",
        "func": "// Setup\n// const http = require('http');\n// const https = require('https');\n\nconst { Event } = msg.global;\n\nclass CustomEvent extends Event { \n  constructor(message, data) {\n    super(message, data)\n    this.detail = data?.detail\n  }\n}\n\nconst SSE = function (url, options) {\n  if (!(this instanceof SSE)) {\n    return new SSE(url, options);\n  }\n\n  if (!url) {\n    throw new Error('SSE - URL is required');\n  }\n\n  this.INITIALIZING = -1;\n  this.CONNECTING = 0;\n  this.OPEN = 1;\n  this.CLOSED = 2;\n\n  this.url = url;\n\n  options = options || {};\n  this.headers = options.headers || {};\n  this.payload = options.payload !== undefined ? options.payload : '';\n  this.method = options.method || (this.payload && 'POST' || 'GET');\n  this.withCredentials = !!options.withCredentials;\n  this.debug = !!options.debug;\n\n  this.body = this.headers['Content-Type'] === \"application/json\" ? JSON.stringify(this.payload) : this.payload.toString();\n\n  this.FIELD_SEPARATOR = ':';\n\n  this.listeners = {};\n\n  this.addEventListener = function(type, listener) {\n    if (this.listeners[type] === undefined) {\n      this.listeners[type] = [];\n    }\n\n    if (this.listeners[type].indexOf(listener) === -1) {\n      this.listeners[type].push(listener);\n    }\n  };\n\n  this.removeEventListener = function(type, listener) {\n    if (this.listeners[type] === undefined) {\n      return;\n    }\n\n    var filtered = [];\n    this.listeners[type].forEach(function(element) {\n      if (element !== listener) {\n        filtered.push(element);\n      }\n    });\n    if (filtered.length === 0) {\n      delete this.listeners[type];\n    } else {\n      this.listeners[type] = filtered;\n    }\n  };\n\n  this.dispatchEvent = function(e) {\n    if (!e) {\n      return true;\n    }\n\n    if (this.debug) {\n      console.debug(e);\n    }\n\n    e.source = this;\n\n    var onHandler = 'on' + e.type;\n    if (this.hasOwnProperty(onHandler)) {\n      this[onHandler].call(this, e);\n      if (e.defaultPrevented) {\n        return false;\n      }\n    }\n\n    if (this.listeners[e.type]) {\n      return this.listeners[e.type].every(function(callback) {\n        callback(e);\n        return !e.defaultPrevented;\n      });\n    }\n\n    return true;\n  };\n\n  this._setReadyState = function(state) {\n    var event = new CustomEvent('readystatechange');\n    event.readyState = state;\n    this.readyState = state;\n    this.dispatchEvent(event);\n  };\n\n  this._onStreamFailure = function(e) {\n    var event = new CustomEvent('error');\n    event.data = e.message;\n    this.dispatchEvent(event);\n    this.close();\n  }\n\n  this._onStreamAbort = function(e) {\n    this.dispatchEvent(new CustomEvent('abort'));\n    this.close();\n  }\n  \n  this._onStreamProgress = function(response) {\n    if (this.readyState == this.CONNECTING) {\n      this.dispatchEvent(new CustomEvent('open'));\n      this._setReadyState(this.OPEN);\n    }\n\n    var data = response.toString();\n    this.dispatchEvent(this._parseEventChunk(data));\n  };\n\n  this._onStreamLoaded = function(response) {\n    this._onStreamProgress(response);\n  };\n\n  this._parseEventChunk = function(chunk) {\n    if (!chunk || chunk.length === 0) {\n      return null;\n    }\n\n    if (this.debug) {\n      console.debug(chunk);\n    }\n\n    var e = {'id': null, 'retry': null, 'data': null, 'event': null};\n    chunk.split(/\\n|\\r\\n|\\r/).forEach(function(line) {\n      var index = line.indexOf(this.FIELD_SEPARATOR);\n      var field, value;\n      if (index > 0) {\n        var skip = (line[index+1] === ' ') ? 2 : 1;\n        field = line.substring(0, index);\n        value = line.substring(index + skip);\n      } else if (index < 0) {\n        field = line;\n        value = '';\n      } else {\n        return;\n      }\n\n      if (!(field in e)) {\n        return;\n      }\n\n      if (field === 'data' && e[field] !== null) {\n          e['data'] += \"\\n\" + value;\n      } else {\n        e[field] = value;\n      }\n    }.bind(this));\n\n    var event = new CustomEvent(e.event || 'message');\n    event.data = e.data || '';\n    event.id = e.id;\n    return event;\n  };\n\n  this._checkStreamClosed = function() {\n    if (this.readyState === this.CLOSED) {\n      return;\n    }\n  };\n\n  this.stream = function() {\n    if (this.readyState === this.CONNECTING) {\n      node.error(\"Already connecting.\");\n      return;\n    }\n\n    node.log(\"Request start\");\n      \n    this._setReadyState(this.CONNECTING);\n\n    var protocol = this.url.startsWith('https') ? https : http;\n    var req = protocol.request(this.url, {\n      method: this.method,\n      headers: this.headers\n    }, (res) => {\n      const onError = (e) => {\n        node.log(`Response error: ${e}`)\n        this._onStreamFailure(e);\n      };\n      if (res.statusCode >= 400) {\n        onError(new Error(`Received status: ${res.statusCode}`));\n      }\n      res.on('error', onError);\n      res.on('data', (chunk) => {\n        try {\n          //node.log(\"Receiving data\");\n          this._onStreamProgress(chunk);\n        }\n        catch (e) {\n          node.error(e);\n          node.error(e.stack);\n        }\n      });\n      res.on('end', () => {\n        try {\n          node.log(\"Request end\");\n          this.close();\n        }\n        catch (e) {\n          node.error(e);\n          node.error(e.stack);\n        }\n      });\n    });\n\n    req.on('timeout', e => node.log(`Request timeout: ${e}`));\n\n    req.on('error', (e) => {\n      try {\n        node.error(`Reqeust error: ${e}`);\n        this._onStreamFailure(e);\n      }\n      catch (e) {\n        node.error(e);\n        node.error(e.stack);\n      }\n    });\n\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(this.method)) {\n        node.log(`Writing body: ${this.body}`);\n        // Write data to request body\n        req.write(this.body);\n    }\n\n    req.end();\n  };\n\n  this.close = function() {\n    if (this.readyState === this.CLOSED) {\n      return;\n    }\n\n    this._setReadyState(this.CLOSED);\n  };\n\n  if (options.start === undefined || options.start) {\n    this.stream();\n  }\n};\n\nreturn {\n  ...msg,\n  SSE\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "http",
                "module": "http"
            },
            {
                "var": "https",
                "module": "https"
            }
        ],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "cb3d5d88fb5e1a7c"
            ]
        ]
    },
    {
        "id": "1cc3136b62faf259",
        "type": "provide-global",
        "z": "6d317c39edd7ba27",
        "name": "",
        "x": 340,
        "y": 160,
        "wires": [
            [
                "219c0b285ee459dd"
            ]
        ]
    },
    {
        "id": "cb3d5d88fb5e1a7c",
        "type": "function",
        "z": "6d317c39edd7ba27",
        "name": "Send request",
        "func": "const id = env.get(\"Id\");\nconst url = env.get(\"Url\")\nconst defaultOptions = env.get(\"Options\")\n\nconst msgOptions = msg[id] ?? {};\n\n// check msg for more options\nconst options = {\n  ...defaultOptions,\n  ...msgOptions,\n  headers: {\n    ...defaultOptions.headers,\n    ...msgOptions.headers\n  }\n}\n\nnode.log(`Sending request: ${id} - ${url}`);\nnode.log(`Options: ${JSON.stringify(options, undefined, 2)}`);\n\nnode.send([undefined, {\n  id,\n  url,\n  options,\n  msg\n}]);\n\nconst source = msg.SSE(url, options);\nmsg.source = source;\n\nsource.addEventListener('message', function(e) {\n  // Assuming we receive JSON-encoded data payloads:\n  const payload = e.data;\n  node.send({\n    type: 'sse-message',\n    payload\n  });\n});\n\nlet error = null;\nsource.addEventListener('error', e => {\n  error = e;\n  node.send({\n    type: 'sse-error',\n    error\n  });\n})\n\nconst states = Object.fromEntries(\n  [\"INITIALIZING\", \"CONNECTING\", \"OPEN\", \"CLOSED\"].map(it => [source[it], it])\n);\n\nconst wait = t => new Promise(r => setTimeout(r, t));\n\nsource.addEventListener('readystatechange', async e => {\n  if (e.readyState === source.CLOSED) {\n    // wait 1 second to allow Node-RED to finish\n    // processing any streamed content that just came in\n    //await wait(1000);\n    node.send({\n      type: 'sse-closed'\n    })\n  }\n});\n\nmsg.type = 'sse-connecting';\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 260,
        "wires": [
            [
                "43f0b2ac4f71e572"
            ],
            [
                "6931cc06352d9988"
            ]
        ]
    },
    {
        "id": "6931cc06352d9988",
        "type": "debug",
        "z": "6d317c39edd7ba27",
        "name": "SSE Requests",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 340,
        "wires": []
    },
    {
        "id": "43f0b2ac4f71e572",
        "type": "function",
        "z": "6d317c39edd7ba27",
        "name": "Handle responses",
        "func": "// if this is a forward messge\nif (msg.action == \"forward-msg\") {\n    // save our msg for later\n    msg.action = msg.msgAction;\n    delete msg.msgAction;\n    context.set(\"forwardedMsg\", msg);\n    // don't send anything for now\n    return;\n}\n\n// get any forwarded input we might have\nconst forwardedMsg = context.get(\"forwardedMsg\");\n\nreturn {\n    ...msg,\n    msgIn: forwardedMsg\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "30aeae0f9f54280e",
        "type": "function",
        "z": "6d317c39edd7ba27",
        "name": "Forward msg",
        "func": "return {\n    ...msg,\n    action: \"forward-msg\",\n    msgAction: msg.action\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "43f0b2ac4f71e572"
            ]
        ]
    },
    {
        "id": "f4b58a4a17cbb986",
        "type": "function",
        "z": "6dcab040eb85e22f",
        "name": "Init",
        "func": "// Allow combination of msg._ui and this node allowing chaining of the nodes\nif (!Array.isArray(msg._ui)) {\n    msg._ui = [];\n}\n\n// If no mode specified, we assume the desire is to update (since a removal attempt with nothing to remove is safe)\nif ( !msg.mode ) msg.mode = 'update'\n\n// If mode is remove, then simply do that and return\nif ( msg.mode === 'delete' || msg.mode === 'remove' ) {\n    if (!msg.elementId) {\n        node.warn('[uib-element:buildUi] Cannot remove element as no HTML ID provided')\n        return\n    }\n\n    msg._ui.push({\n        'method': 'removeAll',\n        'components': [\n            `#${msg.elementId}`,\n        ]\n    })\n\n    return msg;\n}\n\n// If no HMTL ID is specified & not deleting, then always ADD\nif (!msg.elementId) {\n    msg.mode = 'add'\n}\n\n// Otherwise ...\n\n// Add the outer component which is always a div\nmsg._ui.push({\n    'method': msg.mode === 'add' ? 'add' : 'replace',\n    'components': [],\n} )\nmsg.parent = msg._ui[msg._ui.length - 1]\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d0cfb4221dcbb3c0",
        "type": "subflow:6dcab040eb85e22f",
        "z": "8bc504703109d530",
        "name": "",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "20670401d0bab762"
            ]
        ]
    },
    {
        "id": "217365185f9c2bc4",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Render App - Props",
        "func": "msg.elementId = env.get(\"HTML Id\");\nmsg.parentElement = env.get(\"Parent\");\nmsg.heading = env.get(\"Title\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 200,
        "wires": [
            [
                "d0cfb4221dcbb3c0"
            ]
        ]
    },
    {
        "id": "c0d9c6af807061b7",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Render App",
        "func": "const parent = msg.parent;\n\n// Add the form tag\nparent.components.push({\n    'type': 'form',\n    'parent': msg.parentElement,\n    'id': msg.elementId,\n    'components': [],\n    'attributes': {\n        'class': 'chat-ui'\n    },\n})\n\n// Convenient references\nconst frmBody = parent.components[parent.components.length - 1]\n\n// Add the header\nfrmBody.components.push({\n    'type': 'h1',\n    'slot': msg.heading,\n})\n\n// Add the chat history div to the form body components\nfrmBody.components.push(...msg.provideUi.chatElements(msg.elementId, msg.history))\n\n// Add a div to wrap the textarea and send button\nconst formDiv = {\n    'type': 'div',\n    'attributes': {\n        'class': 'message-form'\n    },\n    'components': msg.provideUi.formElements(msg.elementId),\n}\n\n// Add the message div to the form body components\nfrmBody.components.push(formDiv)\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "20670401d0bab762",
        "type": "style-ui",
        "z": "8bc504703109d530",
        "name": "chat-styles",
        "elementId": "chat-style-01",
        "parent": "head",
        "slotContent": "@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.loading {\r\n  border: 4px solid #f3f3f3;\r\n  border-top: 4px solid #3498db;\r\n  border-radius: 50%;\r\n  display: block;\r\n  width: 50px;\r\n  height: 50px;\r\n  animation: spin 2s linear infinite;\r\n}\r\n\r\n.chat-ui {\r\n    display: flex;\r\n}\r\n\r\n.chat-history {\r\n    display: block;\r\n    flex: 1;\r\n    overflow: auto;\r\n}\r\n\r\n.chat-history .role {\r\n    font-weight: bold;\r\n    text-transform: capitalize;\r\n}\r\n\r\n.chat-history .role:after {\r\n    content: \": \";\r\n}\r\n\r\n.message-form {\r\n    display: flex;\r\n    flex: 0;\r\n    min-height: 100px;\r\n    padding: 10px;\r\n}\r\n\r\n.message-form *:disabled {\r\n    opacity: .5;\r\n}\r\n\r\n.message-form textarea {\r\n    flex: 1;\r\n    padding: 10px;\r\n    height: 100%;\r\n}\r\n\r\n.message-form button {\r\n    width: 80px;\r\n    height: 100%;\r\n}\r\n",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "6bb0fb2e45d392f4"
            ]
        ]
    },
    {
        "id": "b7177543effbb937",
        "type": "switch",
        "z": "8bc504703109d530",
        "name": "message handler switch",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "render-app",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "rerender-form",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "rerender-chat",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "rerender-current-message",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set-streaming-status",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 450,
        "y": 40,
        "wires": [
            [
                "217365185f9c2bc4"
            ],
            [
                "ac8535250d127390"
            ],
            [
                "deb6d0a5aba7c49a"
            ],
            [
                "d5bac2942fb8dc6b"
            ],
            [
                "9a0ff2c59fbf61eb"
            ],
            [
                "217365185f9c2bc4"
            ]
        ]
    },
    {
        "id": "ac8535250d127390",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Rerender form - Props",
        "func": "msg.elementId = env.get(\"HTML Id\");\nmsg.mode = \"replace\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 200,
        "wires": [
            [
                "e1ea016d73655065"
            ]
        ]
    },
    {
        "id": "e1ea016d73655065",
        "type": "subflow:6dcab040eb85e22f",
        "z": "8bc504703109d530",
        "name": "",
        "x": 430,
        "y": 260,
        "wires": [
            [
                "8bdd3bbb579b90c3"
            ]
        ]
    },
    {
        "id": "05ad96f6e0c6b685",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Render form elements",
        "func": "const parent = msg.parent;\n\n// only if this event came from our form\nif (!(`${msg.elementId}-next-message` in (msg.payload ?? {}))) {\n    return;\n}\n\n// Add a div to wrap the textarea and send button\nparent.components.push(...msg.provideUi.formElements(msg.elementId));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "9f2ff2da3dc12c89",
        "type": "subflow:30524eb290047e07",
        "z": "8bc504703109d530",
        "name": "Provide Form Elements",
        "x": 200,
        "y": 380,
        "wires": [
            [
                "c0d9c6af807061b7"
            ]
        ]
    },
    {
        "id": "8bdd3bbb579b90c3",
        "type": "subflow:30524eb290047e07",
        "z": "8bc504703109d530",
        "name": "Provide Form Elements",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "05ad96f6e0c6b685"
            ]
        ]
    },
    {
        "id": "deb6d0a5aba7c49a",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Rerender chat - Props",
        "func": "msg.elementId = env.get(\"HTML Id\");\nmsg.mode = \"replace\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 200,
        "wires": [
            [
                "c90f2e75f0f5f0dc"
            ]
        ]
    },
    {
        "id": "c90f2e75f0f5f0dc",
        "type": "subflow:6dcab040eb85e22f",
        "z": "8bc504703109d530",
        "name": "",
        "x": 710,
        "y": 260,
        "wires": [
            [
                "620d172d3ed909ae"
            ]
        ]
    },
    {
        "id": "99dca965fba88e8c",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Render chat",
        "func": "const parent = msg.parent;\n\n// Add the chat history div to the form body components\nparent.components.push(...msg.provideUi.chatElements(msg.elementId, msg.history))\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "6bb0fb2e45d392f4",
        "type": "subflow:296147c1455bbb26",
        "z": "8bc504703109d530",
        "name": "Provide Chat Elements",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "9f2ff2da3dc12c89"
            ]
        ]
    },
    {
        "id": "620d172d3ed909ae",
        "type": "subflow:296147c1455bbb26",
        "z": "8bc504703109d530",
        "name": "Provide Chat Elements",
        "x": 740,
        "y": 300,
        "wires": [
            [
                "99dca965fba88e8c"
            ]
        ]
    },
    {
        "id": "9a0ff2c59fbf61eb",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Set streaming status - Props",
        "func": "msg.elementId = env.get(\"HTML Id\");\nmsg.mode = \"replace\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 200,
        "wires": [
            [
                "28770cc48cb98ae1"
            ]
        ]
    },
    {
        "id": "28770cc48cb98ae1",
        "type": "subflow:6dcab040eb85e22f",
        "z": "8bc504703109d530",
        "name": "",
        "x": 1350,
        "y": 260,
        "wires": [
            [
                "aaa8dc0f96c695f4"
            ]
        ]
    },
    {
        "id": "92d3f952d628ae59",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Render form elements",
        "func": "const parent = msg.parent;\n\nconst elements = msg.provideUi.formElements(msg.elementId)\n\nif (msg.history.streaming) {\n    elements.forEach(it => {\n        it.attributes = {\n            ...it.attributes,\n            disabled: \"disabled\"\n        }\n    });\n\n    const button = elements.find(it => it.id === `${msg.elementId}-send-button`);\n\n    button.slot = `\n        <span class=\"loading\"></span>\n    `\n}\n\n// Add a div to wrap the textarea and send button\nparent.components.push(...elements);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "aaa8dc0f96c695f4",
        "type": "subflow:30524eb290047e07",
        "z": "8bc504703109d530",
        "name": "Provide Form Elements",
        "x": 1380,
        "y": 300,
        "wires": [
            [
                "92d3f952d628ae59"
            ]
        ]
    },
    {
        "id": "d5bac2942fb8dc6b",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Rerender current message - Props",
        "func": "msg.elementId = env.get(\"HTML Id\");\nmsg.mode = \"replace\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 200,
        "wires": [
            [
                "987c5653dd8453ec"
            ]
        ]
    },
    {
        "id": "987c5653dd8453ec",
        "type": "subflow:6dcab040eb85e22f",
        "z": "8bc504703109d530",
        "name": "",
        "x": 990,
        "y": 260,
        "wires": [
            [
                "6c37c3c89c996068"
            ]
        ]
    },
    {
        "id": "90188a15c9e8124a",
        "type": "function",
        "z": "8bc504703109d530",
        "name": "Render chat",
        "func": "const parent = msg.parent;\n\n// we are already steaming, find our chat\nconst current = msg.history.entries.find(it => it.id === msg.history.streaming);\n\nparent.components.push({\n    'type': 'span',\n    'id': `message-${current.id}`,\n    'slot': msg.parseMarkdown(current.content),\n    'attributes': {\n        'class': 'message'\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "6c37c3c89c996068",
        "type": "subflow:ae4739904e91e32d",
        "z": "8bc504703109d530",
        "name": "",
        "x": 1030,
        "y": 300,
        "wires": [
            [
                "90188a15c9e8124a"
            ]
        ]
    },
    {
        "id": "dc8928d34ef931cc",
        "type": "function",
        "z": "30524eb290047e07",
        "name": "Form elements",
        "func": "if (!msg.provideUi) {\n    msg.provideUi = {};\n}\nmsg.provideUi.formElements = (elementId) => [\n    {\n        'type': 'textarea',\n        'id': `${elementId}-next-message`,\n        'attributes': {\n            'placeholder': 'Type your message here...',\n        },\n    },\n    {\n        'type': 'button',\n        'id': `${elementId}-send-button`,\n        'attributes': {\n            type: 'button',\n            title: 'Send the form data back to Node-RED'\n        },\n        'events': {\n            click: 'uibuilder.eventSend'\n        },\n        'slot': `<svg xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 512 512\">\n        <!--!Font Awesome Free 6.5.1 by @fontawesome -\n            https://fontawesome.com License -\n            https://fontawesome.com/license/free Copyright 2024\n            Fonticons, Inc.-->\n        <path fill=\"#74C0FC\" d=\"M498.1 5.6c10.1 7 15.4 19.1 13.5\n            31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284\n            427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160\n            480V396.4c0-4 1.5-7.8 4.2-10.7L331.8\n            202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7\n            316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8\n            16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z\"/>\n        </svg>`,\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c6161498694d0ff4",
        "type": "function",
        "z": "296147c1455bbb26",
        "name": "Chat elements",
        "func": "if (!msg.provideUi) {\n    msg.provideUi = {};\n}\n\nmsg.provideUi.chatElements = (elementId, history) => {\n    // Get chat history from msg.chat.history property\n    // The history is messages from an OpenAI API, which is an array of message objects\n    // Each message object has 'role' and 'content' properties\n    let chatHistory = [];\n    if (history && Array.isArray(history.entries)) {\n        chatHistory = history.entries;\n    }\n\n    // Create the chat history div\n    const chatHistoryDiv = {\n        'type': 'div',\n        'id': `${elementId}-chat-history`,\n        'attributes': {\n            'class': 'chat-history'\n        },\n        'components': [],\n    }\n\n    // Add the chat history to the chat history div with separate spans for role and message\n    chatHistory.forEach(message => {\n        // ignore context\n        if (message.role == \"context\") {\n            return;\n        }\n        \n        chatHistoryDiv.components.push({\n            'type': 'p',\n            'id': `entry-${message.id}`,\n            'attributes': {\n                'class': 'entry'\n            },\n            'components': [\n                {\n                    'type': 'span',\n                    'slot': message.role,\n                    'attributes': {\n                        'class': 'role'\n                    }\n                },\n                {\n                    'type': 'span',\n                    'id': `message-${message.id}`,\n                    'slot': msg.parseMarkdown(message.content),\n                    'attributes': {\n                        'class': 'message'\n                    }\n                }\n            ],\n        })\n    });\n\n    return [chatHistoryDiv];\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "createDOMPurify",
                "module": "dompurify"
            },
            {
                "var": "marked",
                "module": "marked"
            },
            {
                "var": "jsdom",
                "module": "jsdom"
            }
        ],
        "x": 280,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6ca6b11a4f65ca27",
        "type": "subflow:ae4739904e91e32d",
        "z": "296147c1455bbb26",
        "name": "",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "c6161498694d0ff4"
            ]
        ]
    },
    {
        "id": "ee1cd19f0dfc59c0",
        "type": "subflow:6d317c39edd7ba27",
        "z": "a59054999730c251",
        "name": "Model request",
        "env": [
            {
                "name": "Id",
                "value": "Id",
                "type": "env"
            },
            {
                "name": "Url",
                "value": "${BaseUrl}/v1/chat/completions",
                "type": "env"
            },
            {
                "name": "Options",
                "value": "{\"method\":\"POST\",\"headers\":{\"Content-Type\":\"application/json\"}}",
                "type": "json"
            },
            {
                "name": "options",
                "value": "{\"method\": \"POST\"}",
                "type": "json"
            }
        ],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "e088f9272a4006ae",
                "025abec7481ffd22"
            ]
        ]
    },
    {
        "id": "462e2fcb4d95a192",
        "type": "function",
        "z": "a59054999730c251",
        "name": "Build model request",
        "func": "// we need both a prompt and a chat\nif (!msg.systemPrompt || typeof msg.systemPrompt != \"string\") {\n    return {\n        type: \"model-error\",\n        error: \"OpenAIChatCompletionsStreaming - Prompt is required to run this model.\"\n    };\n}\n\nif (!msg.history || !Array.isArray(msg.history.entries)) {\n    return {\n        type: \"model-error\",\n        error: \"OpenAIChatCompletionsStreaming - History is required to run this model.\"\n    };\n}\n\n// if we have context, we need a context prompt\nif (\n    msg.history.entries.find(it => it.role == \"context\") &&\n    (!msg.contextPrompt || typeof msg.contextPrompt != \"function\")\n) {\n    return {\n        type: \"model-error\",\n        error: \"OpenAIChatCompletionsStreaming - Context prompt is required for histories containing context.\"\n    };\n}\n\n// we have both a prompt and history, build the request payload\nconst id = env.get(\"Id\");\n\nmsg[id] = {\n    payload: {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": msg.systemPrompt\n            },\n            ...msg.history.entries.map(\n                it => it.role == \"context\" ? ({\n                    role: \"system\",\n                    content: msg.contextPrompt(it.content)\n                }) : ({\n                    role: it.role,\n                    content: it.content\n                })\n            )\n        ],\n        \"temperature\": env.get(\"Temperature\"),\n        \"stop\": env.get(\"Stop\") || null,\n        \"stream\": true\n    }\n}\n\n// if we were given a model\nconst model = env.get(\"Model\") || msg.model;\nif (model && typeof model == \"string\") {\n    msg[id].payload.model = model;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 300,
        "wires": [
            [
                "d47e0ec6ecc54b3d"
            ]
        ]
    },
    {
        "id": "e088f9272a4006ae",
        "type": "switch",
        "z": "a59054999730c251",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sse-connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sse-message",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sse-closed",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sse-error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 730,
        "y": 660,
        "wires": [
            [
                "5b77260b6c087625"
            ],
            [
                "73663883bc2ce581"
            ],
            [
                "fc0e823bcc5447c9"
            ],
            [
                "277a7bcc08d2cc66"
            ],
            [
                "277a7bcc08d2cc66"
            ]
        ]
    },
    {
        "id": "5b77260b6c087625",
        "type": "function",
        "z": "a59054999730c251",
        "name": "Send Streaming Status CONNECTING",
        "func": "return [[\n    {\n        action: \"model-streaming-status\",\n        state: \"CONNECTING\"\n    },\n    {\n        action: \"model-connecting\",\n        type: \"chat-completions-streaming\",\n        id: env.get(\"Id\"),\n        historyId: msg.msgIn.historyId\n    }\n]];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "73663883bc2ce581",
        "type": "function",
        "z": "a59054999730c251",
        "name": "Send Streaming Content",
        "func": "// parse our message\nlet content = ''\ntry {\n    const response = JSON.parse(msg.payload);\n    content = response.choices[0].delta.content;\n}\ncatch (e) {\n    // note this, but do nothing\n    node.log(`Model - Error parsing JSON: ${e}`);\n    return;\n}\n\n// if we have no content\nif (!content) {\n    // do nothing\n    return;\n}\n\nreturn [[\n    {\n        action: \"model-streaming-content\",\n        content\n    },\n    {\n        action: \"model-content\",\n        type: \"chat-completions-streaming\",\n        id: env.get(\"Id\"),\n        historyId: msg.msgIn.historyId,\n        content\n    }\n]];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 640,
        "wires": [
            [
                "b02f3649626d6560"
            ]
        ]
    },
    {
        "id": "fc0e823bcc5447c9",
        "type": "function",
        "z": "a59054999730c251",
        "name": "Send Streaming Status DONE",
        "func": "return [[\n    {\n        action: \"model-streaming-status\",\n        state: \"DONE\"\n    },\n    {\n        action: \"model-done\",\n        type: \"chat-completions-streaming\",\n        id: env.get(\"Id\"),\n        historyId: msg.msgIn.historyId\n    }\n]];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 700,
        "wires": [
            [
                "b02f3649626d6560"
            ]
        ]
    },
    {
        "id": "277a7bcc08d2cc66",
        "type": "function",
        "z": "a59054999730c251",
        "name": "Send Model Error",
        "func": "return {\n    action: \"model-error\",\n    type: \"chat-completions-streaming\",\n    id: env.get(\"Id\"),\n    historyId: msg.msgIn.historyId,\n    error: msg.error\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "d47e0ec6ecc54b3d",
        "type": "switch",
        "z": "a59054999730c251",
        "name": "Error check",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 340,
        "wires": [
            [
                "e088f9272a4006ae"
            ],
            [
                "ee1cd19f0dfc59c0"
            ]
        ]
    },
    {
        "id": "025abec7481ffd22",
        "type": "debug",
        "z": "a59054999730c251",
        "d": true,
        "name": "Raw model output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "c5f09a313c4f789d",
        "type": "switch",
        "z": "a59054999730c251",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "history-add-entry",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "c10a14138d2a4d16"
            ]
        ]
    },
    {
        "id": "ad39a1100824f942",
        "type": "switch",
        "z": "a59054999730c251",
        "name": "history-add-entry role",
        "property": "newEntryRole",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 240,
        "wires": [
            [
                "462e2fcb4d95a192"
            ]
        ]
    },
    {
        "id": "c10a14138d2a4d16",
        "type": "function",
        "z": "a59054999730c251",
        "name": "Set new entry role",
        "func": "msg.newEntryRole = msg.newEntry.role;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "ad39a1100824f942"
            ]
        ]
    },
    {
        "id": "b02f3649626d6560",
        "type": "function",
        "z": "a59054999730c251",
        "name": "Batch",
        "func": "const batchSize = env.get(\"Batch\");\n\n// ignore legacy actions\nif ([\"model-streaming-content\", \"model-streaming-status\"].includes(msg.action)) {\n    // we'll resend the legeacy actions\n    return;\n}\n\nlet messageBuffer = context.get(\"messageBuffer\");\nif (!messageBuffer) {\n    messageBuffer = []\n}\n\nconst makeBatch = () => {\n    const batchedContent = messageBuffer.reduce((content, message) => content + message.content, \"\");\n    const batchedMessages = [\n        {\n            action: \"model-content\",\n            type: messageBuffer[0].type,\n            id: messageBuffer[0].id,\n            historyId: messageBuffer[0].historyId,\n            content: batchedContent\n        },\n        {\n            action: \"model-streaming-content\",\n            content: batchedContent\n        }\n    ];\n    context.set(\"messageBuffer\", []);\n    return batchedMessages;\n}\n\n// if we are stopping\nif (msg.action == \"model-done\") {\n    // send the rest of our current batch before sending our status\n    const messages = [msg, {\n        action: \"model-streaming-status\",\n        state: \"DONE\"\n    }];\n    if (messageBuffer.length > 0) {\n        messages.unshift(...makeBatch());\n    }\n    return [messages];\n}\n\nmessageBuffer.push(msg);\ncontext.set(\"messageBuffer\", messageBuffer);\nif (messageBuffer.length === batchSize) {\n    return [makeBatch()];\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3b2ca8934fb0ccd7",
        "type": "function",
        "z": "2b3efcc977e88d91",
        "g": "3cdc7422abfbe82e",
        "name": "Re-render chat on message",
        "func": "msg.type = \"rerender-current-message\"\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "24d6b22fbb3331ef"
            ]
        ]
    },
    {
        "id": "b07e294259fdd664",
        "type": "function",
        "z": "2b3efcc977e88d91",
        "g": "2ec09f072ab0b146",
        "name": "Render streaming status",
        "func": "return {\n    type: \"set-streaming-status\",\n    history: msg.history\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 120,
        "wires": [
            [
                "24d6b22fbb3331ef"
            ]
        ]
    },
    {
        "id": "24d6b22fbb3331ef",
        "type": "subflow:8bc504703109d530",
        "z": "2b3efcc977e88d91",
        "g": "573a66c74ad47252",
        "name": "chat-ui",
        "env": [
            {
                "name": "HTML Id",
                "value": "chat-01",
                "type": "str"
            }
        ],
        "x": 430,
        "y": 640,
        "wires": [
            [
                "fd30589c82c22c62",
                "07a96f21f7eb4899"
            ]
        ]
    },
    {
        "id": "fa93074c3844e72a",
        "type": "comment",
        "z": "2b3efcc977e88d91",
        "g": "573a66c74ad47252",
        "name": "Chat UI Renderer",
        "info": "",
        "x": 420,
        "y": 500,
        "wires": []
    },
    {
        "id": "e64c01c3ce72e42c",
        "type": "style-ui",
        "z": "2b3efcc977e88d91",
        "g": "573a66c74ad47252",
        "name": "chat styles",
        "elementId": "style-01",
        "parent": "head",
        "slotContent": "html, body {\r\n    height: 100%;\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nh1 {\r\n    font-size: 1em;\r\n    margin: 0;\r\n}\r\n\r\n.prompt-ui {\r\n    margin: 10px auto;\r\n    width: 80%;\r\n    max-width: 1000px;\r\n    gap: 0;\r\n}\r\n\r\n.chat-ui {\r\n    margin: 10px auto;\r\n    height: calc(100% - 200px);\r\n    width: 80%;\r\n    max-width: 1000px;\r\n}\r\n",
        "x": 410,
        "y": 560,
        "wires": [
            [
                "f99c0d4e42875ff9"
            ]
        ]
    },
    {
        "id": "d0bc8cbbd38f96d0",
        "type": "function",
        "z": "2b3efcc977e88d91",
        "g": "ffdcd8798ee03933",
        "name": "Add to history",
        "func": "const chatId = \"chat-01\"\n\nconst nextMessage = msg.payload[`${chatId}-next-message`]\n\nif (!nextMessage) {\n    return;\n}\n\nmsg.entry = {\n    role: \"user\",\n    content: nextMessage\n};\n\nmsg.action = \"history-add-entry\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 880,
        "wires": [
            [
                "ed0c2d4f1d21f64c"
            ]
        ]
    },
    {
        "id": "ed0c2d4f1d21f64c",
        "type": "debug",
        "z": "2b3efcc977e88d91",
        "g": "ffdcd8798ee03933",
        "name": "User submissions",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 880,
        "wires": []
    },
    {
        "id": "b7a0d2554c54f30c",
        "type": "comment",
        "z": "2b3efcc977e88d91",
        "g": "ffdcd8798ee03933",
        "name": "Event handler: submit user message",
        "info": "",
        "x": 1020,
        "y": 820,
        "wires": []
    },
    {
        "id": "ec546330d29baba3",
        "type": "function",
        "z": "2b3efcc977e88d91",
        "g": "0e803c0423a03bad",
        "name": "Re-render form on event",
        "func": "if (msg._ui?.type === \"eventSend\") {\n    msg.type = \"rerender-form\"\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1060,
        "wires": [
            [
                "24d6b22fbb3331ef"
            ]
        ]
    },
    {
        "id": "96d1b37cfc101abc",
        "type": "comment",
        "z": "2b3efcc977e88d91",
        "g": "0e803c0423a03bad",
        "name": "Event handler: submit form",
        "info": "",
        "x": 990,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2f187dab7a1ae2ad",
        "type": "comment",
        "z": "2b3efcc977e88d91",
        "g": "1309c3c5cd6f1b74",
        "name": "App Controller",
        "info": "",
        "x": 610,
        "y": 800,
        "wires": []
    },
    {
        "id": "05af6ff6db82adba",
        "type": "comment",
        "z": "2b3efcc977e88d91",
        "g": "3cdc7422abfbe82e",
        "name": "Event handler: receive assistant message",
        "info": "",
        "x": 1040,
        "y": 280,
        "wires": []
    },
    {
        "id": "c5dcd2bf8b994fb8",
        "type": "comment",
        "z": "2b3efcc977e88d91",
        "g": "2ec09f072ab0b146",
        "name": "Event handler: receive streaming status",
        "info": "",
        "x": 1030,
        "y": 80,
        "wires": []
    },
    {
        "id": "f9339a39075c7450",
        "type": "switch",
        "z": "2b3efcc977e88d91",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "history-init",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "history-add-entry",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "history-update-entry",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "history-update-streaming",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 210,
        "y": 300,
        "wires": [
            [
                "e64c01c3ce72e42c"
            ],
            [
                "c8c9a2cca8781c5f"
            ],
            [
                "3b2ca8934fb0ccd7"
            ],
            [
                "b07e294259fdd664"
            ]
        ]
    },
    {
        "id": "b153a1db69fe018c",
        "type": "debug",
        "z": "2b3efcc977e88d91",
        "d": true,
        "name": "App inputs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 40,
        "wires": []
    },
    {
        "id": "2c75870eb28bb7c5",
        "type": "debug",
        "z": "2b3efcc977e88d91",
        "d": true,
        "g": "1309c3c5cd6f1b74",
        "name": "UI Builder Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 960,
        "wires": []
    },
    {
        "id": "fd30589c82c22c62",
        "type": "debug",
        "z": "2b3efcc977e88d91",
        "d": true,
        "g": "573a66c74ad47252",
        "name": "UI Components Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 620,
        "wires": []
    },
    {
        "id": "e71f5a20f7b7837e",
        "type": "comment",
        "z": "2b3efcc977e88d91",
        "g": "8a3c592536de3111",
        "name": "Event handler: receive new message",
        "info": "",
        "x": 1020,
        "y": 460,
        "wires": []
    },
    {
        "id": "c8c9a2cca8781c5f",
        "type": "function",
        "z": "2b3efcc977e88d91",
        "g": "8a3c592536de3111",
        "name": "Re-render chat on message",
        "func": "msg.type = \"rerender-chat\"\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 520,
        "wires": [
            [
                "24d6b22fbb3331ef"
            ]
        ]
    },
    {
        "id": "07a96f21f7eb4899",
        "type": "ui-builder",
        "z": "2b3efcc977e88d91",
        "g": "1309c3c5cd6f1b74",
        "name": "",
        "url": "Url",
        "urlType": "env",
        "x": 600,
        "y": 860,
        "wires": [
            [
                "d0bc8cbbd38f96d0",
                "ec546330d29baba3",
                "e9e910c0b95eb6fc",
                "8898a853cc54512d"
            ],
            [
                "2c75870eb28bb7c5"
            ]
        ]
    },
    {
        "id": "f99c0d4e42875ff9",
        "type": "subflow:9d188e904c4abf9e",
        "z": "2b3efcc977e88d91",
        "g": "573a66c74ad47252",
        "name": "prompt-ui",
        "env": [
            {
                "name": "HTML Id",
                "value": "prompt-01",
                "type": "str"
            }
        ],
        "x": 420,
        "y": 600,
        "wires": [
            [
                "24d6b22fbb3331ef"
            ]
        ]
    },
    {
        "id": "e9e910c0b95eb6fc",
        "type": "debug",
        "z": "2b3efcc977e88d91",
        "d": true,
        "g": "1309c3c5cd6f1b74",
        "name": "UI Builder Events",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 920,
        "wires": []
    },
    {
        "id": "8898a853cc54512d",
        "type": "function",
        "z": "2b3efcc977e88d91",
        "g": "31f8fa8c2bd1eaa9",
        "name": "Update prompt",
        "func": "const promptId = \"prompt-01\"\n\nconst newPrompt = msg.payload[`${promptId}-prompt`]\n\nif (!newPrompt) {\n    return;\n}\n\nmsg.prompt = newPrompt;\nmsg.action = \"prompt-update\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "d4c07ba40b49d1c4",
        "type": "comment",
        "z": "2b3efcc977e88d91",
        "g": "31f8fa8c2bd1eaa9",
        "name": "Event handler: update prompt",
        "info": "",
        "x": 1000,
        "y": 640,
        "wires": []
    },
    {
        "id": "e43978271213406b",
        "type": "change",
        "z": "ce6026c0ffde68ba",
        "name": "Inject chat",
        "rules": [
            {
                "t": "set",
                "p": "history",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "originalPayload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "filename",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 110,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "35a3d5114b4b55cc",
        "type": "subflow:6efc1af5415157df",
        "z": "ce6026c0ffde68ba",
        "name": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "f50b8ce9efb83f05"
            ]
        ]
    },
    {
        "id": "88750c0a7f0ea58c",
        "type": "change",
        "z": "ce6026c0ffde68ba",
        "name": "Preserve payload",
        "rules": [
            {
                "t": "set",
                "p": "originalPayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "35a3d5114b4b55cc"
            ]
        ]
    },
    {
        "id": "2ddf48ef1acfb04e",
        "type": "function",
        "z": "ce6026c0ffde68ba",
        "name": "Parse historyDb file",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload);\n}\ncatch (e) {\n    throw new Error(`Error parsing history file (${msg.historyDbFilename}): ${e} - content:\n    \n    \\`${msg.payload}\\`\n    `);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 240,
        "wires": [
            [
                "e43978271213406b"
            ]
        ]
    },
    {
        "id": "f50b8ce9efb83f05",
        "type": "function",
        "z": "ce6026c0ffde68ba",
        "name": "Read historyDb file",
        "func": "const { readFileSync } = fs;\n\nmsg.historyId = env.get(\"Id\") || msg.id;\nconst filename = msg.historyDbFilenames[msg.historyId]\n\ntry {\n    msg.payload = readFileSync(filename).toString().trim();\n    if (!msg.payload) {\n        throw new Error(\"HistoryDb file empty.\");\n    }\n    node.log(`Parsed history file content: \\`${msg.payload}\\``);\n}\ncatch (e) {\n    throw new Error(`Error reading historyDb (id: ${msg.historyId}) file (${filename}): ${e}`);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 130,
        "y": 200,
        "wires": [
            [
                "2ddf48ef1acfb04e"
            ]
        ]
    },
    {
        "id": "f2fd598a0898c772",
        "type": "change",
        "z": "680a38a9fc7ffbbc",
        "name": "Restore payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "originalPayload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "113d466ba0a54e9d",
        "type": "subflow:6efc1af5415157df",
        "z": "680a38a9fc7ffbbc",
        "name": "",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "7bc0341203c4233b"
            ]
        ]
    },
    {
        "id": "7bc0341203c4233b",
        "type": "change",
        "z": "680a38a9fc7ffbbc",
        "name": "Fetch history",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "history",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 180,
        "wires": [
            [
                "d48c011c4080abfa"
            ]
        ]
    },
    {
        "id": "f906b3e6319be105",
        "type": "change",
        "z": "680a38a9fc7ffbbc",
        "name": "Preserve payload",
        "rules": [
            {
                "t": "set",
                "p": "originalPayload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 100,
        "wires": [
            [
                "113d466ba0a54e9d"
            ]
        ]
    },
    {
        "id": "d50cf6701b0d7752",
        "type": "function",
        "z": "680a38a9fc7ffbbc",
        "name": "Write historyDb file",
        "func": "const { writeFileSync } = fs;\n\nconst id = env.get(\"Id\") || msg.id;\nconst filename = msg.historyDbFilenames[id]\n\ntry {\n    writeFileSync(filename, msg.payload);\n}\ncatch (e) {\n    throw new Error(`Error writing historyDb file (${filename}): ${e}`);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 250,
        "y": 260,
        "wires": [
            [
                "f2fd598a0898c772"
            ]
        ]
    },
    {
        "id": "d48c011c4080abfa",
        "type": "function",
        "z": "680a38a9fc7ffbbc",
        "name": "Encode historyDb file",
        "func": "try {\n    msg.payload = JSON.stringify(msg.payload);\n}\ncatch (e) {\n    throw new Error(`Error encoding history file (${msg.historyDbFilename}): ${e} - content:\n    \n    \\`${msg.payload}\\`\n    `);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 220,
        "wires": [
            [
                "d50cf6701b0d7752"
            ]
        ]
    },
    {
        "id": "c6e2b0ab7145e11a",
        "type": "function",
        "z": "6efc1af5415157df",
        "name": "Get filename",
        "func": "msg.historyDbFilenames = global.get(\"historyDbFilenames\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7b7768b80e1acc34",
        "type": "function",
        "z": "ae4739904e91e32d",
        "name": "provide parseMarkdown",
        "func": "const escapeHTML = str => {\n    let inCodeBlock = false;\n    let escapedStr = '';\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '`' && str[i - 1] !== '`') {\n            inCodeBlock = !inCodeBlock;\n        }\n\n        if (!inCodeBlock) {\n            switch (str[i]) {\n                case '&':\n                    escapedStr += '&amp;';\n                    break;\n                case '<':\n                    escapedStr += '&lt;';\n                    break;\n                case '>':\n                    escapedStr += '&gt;';\n                    break;\n                case \"'\":\n                    escapedStr += '&#39;';\n                    break;\n                case '\"':\n                    escapedStr += '&quot;';\n                    break;\n                default:\n                    escapedStr += str[i];\n            }\n        } else {\n            escapedStr += str[i];\n        }\n    }\n\n    return escapedStr;\n};\n\nconst DOMPurify = createDOMPurify(new jsdom.JSDOM('').window);\nmsg.parseMarkdown = (md) =>\n    DOMPurify.sanitize(marked.parse(escapeHTML(md)));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "createDOMPurify",
                "module": "dompurify"
            },
            {
                "var": "marked",
                "module": "marked"
            },
            {
                "var": "jsdom",
                "module": "jsdom"
            }
        ],
        "x": 310,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5ecc4c49da25a80b",
        "type": "switch",
        "z": "74bd10ee8e354d0a",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "history-init",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "history-add-entry",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-done",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-content",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 550,
        "y": 480,
        "wires": [
            [
                "41f92e3d198f4694"
            ],
            [
                "7249f13b4ba0284a"
            ],
            [
                "17e166dfd3532851"
            ],
            [
                "93f4adc1d2f5c323"
            ],
            [
                "1bce8e1d0eace47a"
            ]
        ]
    },
    {
        "id": "17e166dfd3532851",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "name": "Start streaming",
        "func": "// // check for any pending content\n// const pendingContent = context.get(\"pendingContent\") ?? '';\n// context.set(\"pendingContent\", '');\n\nconst newEntry = msg.historyOps(msg.history).insert({\n    role: \"assistant\",\n    content: ''\n});\n\nmsg.history.streaming = newEntry.id;\nmsg.action = \"history-update-streaming\";\nmsg.historyStreaming = msg.history.streaming;\n\nreturn [[\n  msg,\n  {\n    ...msg,\n    action: \"history-add-entry\",\n    newEntry\n  }\n]];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 460,
        "wires": [
            [
                "6fa0a1f2a8dfa0a6"
            ]
        ]
    },
    {
        "id": "1bce8e1d0eace47a",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "name": "Update streaming entry",
        "func": "// if we're not streaming yet\n// if (!msg.history.streaming) {\n//     // then add our content to pending\n//     let pending = context.get(\"pendingContent\") ?? '';\n//     pending += msg.content;\n//     context.set(\"pendingContent\", pending);\n//     return;\n// }\n\n// we are already steaming, find our chat\nconst current = msg.historyOps(msg.history).get(msg.history.streaming);\n\n// update our current chat with our new content\ncurrent.content += msg.content;\n\nmsg.action = \"history-update-entry\";\nmsg.updatedEntry = current;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 600,
        "wires": [
            [
                "6fa0a1f2a8dfa0a6"
            ]
        ]
    },
    {
        "id": "7249f13b4ba0284a",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "name": "Add to history",
        "func": "msg.newEntry = msg.historyOps(msg.history).insert(msg.entry);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 380,
        "wires": [
            [
                "6fa0a1f2a8dfa0a6"
            ]
        ]
    },
    {
        "id": "f5e7eec49fcf570e",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "g": "1ae11ef02f19ba42",
        "name": "Init",
        "func": "if (!msg.historyDbFilenames) {\n    msg.historyDbFilenames = {};\n}\n\nconst sourceFilename = env.get(\"SourceFilename\") || msg.historySourceFilename;\n\nif (env.get(\"New\") || msg.historyNew || !sourceFilename) {\n    msg.historyDbFilenames[msg.id] = sourceFilename || `/data/db/history-${msg.timestamp}.json`;\n    msg.history = {\n        entries: [],\n        streaming: null\n    };\n    msg.initType = \"update\";\n}\nelse {\n    msg.historyDbFilenames[msg.id] = sourceFilename;\n    msg.initType = \"inject\";\n}\n\nglobal.set(\"historyDbFilenames\", msg.historyDbFilenames);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 240,
        "wires": [
            [
                "37cf58b736452c29"
            ]
        ]
    },
    {
        "id": "3039cd8559535cc4",
        "type": "subflow:680a38a9fc7ffbbc",
        "z": "74bd10ee8e354d0a",
        "g": "1ae11ef02f19ba42",
        "name": "",
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "1cfad4d12606eb35"
            ]
        ]
    },
    {
        "id": "37cf58b736452c29",
        "type": "switch",
        "z": "74bd10ee8e354d0a",
        "g": "1ae11ef02f19ba42",
        "name": "",
        "property": "initType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "inject",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 240,
        "wires": [
            [
                "e34397c8aec9b431"
            ],
            [
                "3039cd8559535cc4"
            ]
        ]
    },
    {
        "id": "e34397c8aec9b431",
        "type": "subflow:ce6026c0ffde68ba",
        "z": "74bd10ee8e354d0a",
        "g": "1ae11ef02f19ba42",
        "name": "",
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "1cfad4d12606eb35"
            ]
        ]
    },
    {
        "id": "93f4adc1d2f5c323",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "name": "Stop streaming",
        "func": "// we are streaming, toggle it off\nmsg.history.streaming = null;\nmsg.action = \"history-update-streaming\";\nmsg.historyStreaming = msg.history.streaming;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 520,
        "wires": [
            [
                "6fa0a1f2a8dfa0a6"
            ]
        ]
    },
    {
        "id": "0d2c7f406e329ad7",
        "type": "subflow:ce6026c0ffde68ba",
        "z": "74bd10ee8e354d0a",
        "name": "",
        "x": 330,
        "y": 720,
        "wires": [
            [
                "5ecc4c49da25a80b"
            ]
        ]
    },
    {
        "id": "21642c9bdd34ddea",
        "type": "switch",
        "z": "74bd10ee8e354d0a",
        "name": "If history-init, Else valid action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "history-init",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "(history-add-entry)|(model-connecting)|(model-content)|(model-done)",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 440,
        "wires": [
            [
                "5ecc4c49da25a80b"
            ],
            [
                "89c8968be6b620cf"
            ]
        ]
    },
    {
        "id": "6fa0a1f2a8dfa0a6",
        "type": "subflow:680a38a9fc7ffbbc",
        "z": "74bd10ee8e354d0a",
        "name": "",
        "x": 1140,
        "y": 460,
        "wires": [
            [
                "d1e76fbf62daa7ea",
                "1cfad4d12606eb35"
            ]
        ]
    },
    {
        "id": "7bb6dcdcff9df0bc",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "name": "Provide Operations",
        "func": "msg.historyOps = (history) => ({\n    get (id) {\n        return history.entries.find(it => it.id == id);\n    },\n\n    getAll () {\n        return history.entries;\n    },\n\n    insert (entry) {\n        const uniqueId = () => {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                const r = (Math.random() * 16) | 0,\n                    v = c == 'x' ? r : (r & 0x3) | 0x8;\n                return v.toString(16);\n            });\n        };\n\n        const newEntry = {\n            id: uniqueId(),\n            ...entry\n        };\n\n        history.entries.push(newEntry);\n\n        return newEntry;\n    },\n\n    update (id, entry) {\n        const existing = this.get(id);\n        Object.assign(existing, entry);\n        return existing;\n    },\n\n    delete (id) {\n        history.entries.splice(\n            history.entries.findIndex(it => it.id == id),\n            1\n        );\n        return id;\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 400,
        "wires": [
            [
                "21642c9bdd34ddea"
            ]
        ]
    },
    {
        "id": "1cfad4d12606eb35",
        "type": "change",
        "z": "74bd10ee8e354d0a",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "historyOps",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 420,
        "wires": [
            [
                "cb144a6f342ae0b4"
            ]
        ]
    },
    {
        "id": "eefd90d4e48a163f",
        "type": "debug",
        "z": "74bd10ee8e354d0a",
        "d": true,
        "name": "History In",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "cb144a6f342ae0b4",
        "type": "debug",
        "z": "74bd10ee8e354d0a",
        "d": true,
        "name": "History Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 500,
        "wires": []
    },
    {
        "id": "3b954f62045abd5b",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 875,
        "y": 720,
        "wires": [
            [
                "40c235a781afb37d"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "40c235a781afb37d",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "name": "Lock Db",
        "func": "// get our queue\nlet queue = context.get(\"queue\");\nif (!queue) {\n    queue = [];\n}\n\n// if this is a command\nif (msg.command) {\n    // if we are to release the lock\n    if (msg.command == \"release-lock\") {\n        // if we have any messages queued\n        if (queue.length > 0) {\n            // don't release the lock,\n            // instead, send the next message\n            const message = queue.shift();\n            context.set(\"queue\", queue);\n            return message;\n        }\n        else {\n            // there are no messages left to send,\n            // release the lock for the next message\n            context.set(\"lock\", false);\n            // don't send a message\n            return;\n        }\n    }\n}\n\n// if the db is locked for writing\nif (context.get(\"lock\")) {\n    // then queue our message\n    queue.push(msg);\n    context.set(\"queue\", queue);\n    // don't send a message\n    return;\n}\n\n// else, there is no lock the db,\n// lock it now so we can write to it\ncontext.set(\"lock\", true);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 680,
        "wires": [
            [
                "0d2c7f406e329ad7"
            ]
        ]
    },
    {
        "id": "d1e76fbf62daa7ea",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "name": "Release Db Lock",
        "func": "return {\n    command: \"release-lock\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 500,
        "wires": [
            [
                "3b954f62045abd5b"
            ]
        ]
    },
    {
        "id": "3cd23f12c0321b72",
        "type": "comment",
        "z": "74bd10ee8e354d0a",
        "g": "1ae11ef02f19ba42",
        "name": "Init",
        "info": "",
        "x": 810,
        "y": 120,
        "wires": []
    },
    {
        "id": "b4d35d18f82cbc61",
        "type": "switch",
        "z": "74bd10ee8e354d0a",
        "name": "If model action, else",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^model-",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 560,
        "wires": [
            [
                "ac72e1cba245a8cd"
            ],
            [
                "40c235a781afb37d"
            ]
        ]
    },
    {
        "id": "ac72e1cba245a8cd",
        "type": "switch",
        "z": "74bd10ee8e354d0a",
        "name": "If correct history id",
        "property": "historyId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "id",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 600,
        "wires": [
            [
                "40c235a781afb37d"
            ]
        ]
    },
    {
        "id": "89c8968be6b620cf",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "name": "Set msg.id",
        "func": "msg.id = flow.get(\"Id\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 500,
        "wires": [
            [
                "b4d35d18f82cbc61"
            ]
        ]
    },
    {
        "id": "cc0f068e3b8d9dd6",
        "type": "subflow:6efc1af5415157df",
        "z": "74bd10ee8e354d0a",
        "g": "1ae11ef02f19ba42",
        "name": "",
        "x": 1050,
        "y": 180,
        "wires": [
            [
                "f5e7eec49fcf570e"
            ]
        ]
    },
    {
        "id": "41f92e3d198f4694",
        "type": "function",
        "z": "74bd10ee8e354d0a",
        "g": "1ae11ef02f19ba42",
        "name": "Set msg.id",
        "func": "msg.id = env.get(\"Id\") || msg.historyId || `history-${Math.floor(Math.random() * 1000)}`;\nflow.set(\"Id\", msg.id);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 180,
        "wires": [
            [
                "cc0f068e3b8d9dd6"
            ]
        ]
    },
    {
        "id": "059dcd4099b7cba7",
        "type": "function",
        "z": "54dfdee937147952",
        "name": "Wait and track model errors",
        "func": "const step = msg.currentStep || flow.get(\"$parent.step\");\nconst waitStep = env.get(\"Step\") || msg.waitStep;\n\n// wait until we're on our configured step\nif (step != waitStep) {\n    return;\n}\n\n// fetch any errors we've tracked\nlet modelErrors = context.get(\"model-errors\");\nif (!modelErrors) {\n    modelErrors = [];\n}\n\n// if we're receiving an error, track it\nif (msg.action == \"model-error\") {\n    modelErrors.push(msg.error);\n}\n\ncontext.set(\"model-errors\", modelErrors);\n\n// if history streaming has stopped, the previous step is over\nif (\n    msg.action == 'history-update-streaming'\n    && msg.history.streaming === null\n    && modelErrors.length <= 0\n) {\n    return {\n        history: msg.history,\n        createUserPrompt: msg.createUserPrompt\n    };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "5df2c26079ce2059",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": "Submit prompt",
        "func": "// if there is no prompt defined\nif (!msg.userPrompt) {\n    // then we've nothing to submit\n    return;\n}\n\nmsg.action = \"history-add-entry\"\nmsg.entry = {\n    role: \"user\",\n    content: msg.userPrompt\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 280,
        "wires": [
            [
                "41840610e4e89d4a"
            ]
        ]
    },
    {
        "id": "f1dd49b96b6320ae",
        "type": "subflow:54dfdee937147952",
        "z": "fe8f70709279ea90",
        "name": "Wait for step",
        "env": [
            {
                "name": "Step",
                "value": "",
                "type": "num"
            }
        ],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "6d118588439f3f20"
            ]
        ]
    },
    {
        "id": "7577af8c47fbb0c0",
        "type": "switch",
        "z": "fe8f70709279ea90",
        "name": "If wait",
        "property": "Wait",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 200,
        "wires": [
            [
                "4168d8d0055280f7"
            ]
        ]
    },
    {
        "id": "4168d8d0055280f7",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": "Set waitStep",
        "func": "msg.waitStep = env.get(\"Step\") - 1;\nmsg.currentStep = flow.get(\"$parent.step\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            [
                "f1dd49b96b6320ae"
            ]
        ]
    },
    {
        "id": "f51a837541a082b4",
        "type": "switch",
        "z": "fe8f70709279ea90",
        "name": "If initHistory, else",
        "property": "InitHistoryId",
        "propertyType": "env",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 240,
        "wires": [
            [
                "99e2235264054d88"
            ],
            [
                "5df2c26079ce2059"
            ]
        ]
    },
    {
        "id": "99e2235264054d88",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": "Init history",
        "func": "msg.timestamp = Date.now();\nmsg.action = \"history-init\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 200,
        "wires": [
            [
                "41840610e4e89d4a"
            ]
        ]
    },
    {
        "id": "6d118588439f3f20",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": "Step Definition",
        "func": "const step = env.get(\"Step\");\nflow.set(\"$parent.step\", step);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 160,
        "wires": [
            [
                "4e066ebab1a1d747"
            ]
        ]
    },
    {
        "id": "927157a1bbfb5222",
        "type": "switch",
        "z": "fe8f70709279ea90",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "step-go-to",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "step-start-at",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "history-init",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 170,
        "y": 320,
        "wires": [
            [
                "377da1074003e5d8"
            ],
            [
                "f49be570901df986"
            ],
            [
                "7063c596169b4642"
            ],
            [
                "5cf402c9c6d7168c"
            ]
        ]
    },
    {
        "id": "7063c596169b4642",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": "If history-init Id",
        "func": "// if this history-init is not the id we're were supposed to init\nif (msg.id !== env.get(\"InitHistoryId\")) {\n    // then ignore it\n    return;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 440,
        "wires": [
            [
                "13ef5d74682cbdb4"
            ]
        ]
    },
    {
        "id": "13ef5d74682cbdb4",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 945,
        "y": 440,
        "wires": [
            [
                "5df2c26079ce2059"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "4e066ebab1a1d747",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": "Create user prompt",
        "func": "// if we were given a prompt creator, execute it using\n// an existing history object (presumably from the previous step)\nif (typeof msg.createUserPrompt == \"function\") {\n    msg.userPrompt = msg.createUserPrompt(msg.history);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 200,
        "wires": [
            [
                "f51a837541a082b4"
            ]
        ]
    },
    {
        "id": "3bf29027c2f4417f",
        "type": "subflow:74bd10ee8e354d0a",
        "z": "fe8f70709279ea90",
        "name": "Load History",
        "env": [
            {
                "name": "New",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "a661c60036f2dbf0"
            ]
        ]
    },
    {
        "id": "f49be570901df986",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": "Init loaded history",
        "func": "msg.action = \"history-init\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 320,
        "wires": [
            [
                "3bf29027c2f4417f"
            ]
        ]
    },
    {
        "id": "a661c60036f2dbf0",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 685,
        "y": 360,
        "wires": [
            [
                "6d118588439f3f20"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "377da1074003e5d8",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 305,
        "y": 160,
        "wires": [
            [
                "6d118588439f3f20"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "5cf402c9c6d7168c",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 200,
        "wires": [
            [
                "7577af8c47fbb0c0"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "a3724b9be3e89428",
        "type": "debug",
        "z": "fe8f70709279ea90",
        "name": "Step In",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "8c88243096424bb9",
        "type": "debug",
        "z": "fe8f70709279ea90",
        "name": "Step Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 100,
        "wires": []
    },
    {
        "id": "41840610e4e89d4a",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1285,
        "y": 240,
        "wires": [
            [
                "0af02a1541b8ba63"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "0af02a1541b8ba63",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": "function 9",
        "func": "msg.parentStep = flow.get(\"$parent.step\");\nmsg.flowStep = flow.get(\"step\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 160,
        "wires": [
            [
                "8c88243096424bb9"
            ]
        ]
    },
    {
        "id": "c58191477f52b55b",
        "type": "function",
        "z": "fe8f70709279ea90",
        "name": "function 16",
        "func": "msg.debugParentStep = flow.get(\"$parent.step\");\nmsg.debugFlowStep = flow.get(\"step\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 140,
        "wires": [
            [
                "927157a1bbfb5222",
                "a3724b9be3e89428"
            ]
        ]
    },
    {
        "id": "040a413f7a91f093",
        "type": "change",
        "z": "3bb38f582155f29d",
        "name": "Go to",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "step-go-to",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 90,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0c4e40bbf2650ed6",
        "type": "function",
        "z": "95c38d96d861b4c4",
        "name": "function 11",
        "func": "msg.parent = flow.get(\"prop\");\nmsg.rootFromParent = flow.get(\"$parent.prop\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 240,
        "wires": [
            [
                "c991d0349f4aea89"
            ]
        ]
    },
    {
        "id": "4c4840b662683b53",
        "type": "function",
        "z": "95c38d96d861b4c4",
        "name": "function 12",
        "func": "flow.set(\"prop\", 56);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 120,
        "wires": [
            [
                "0c4e40bbf2650ed6"
            ]
        ]
    },
    {
        "id": "c991d0349f4aea89",
        "type": "subflow:bb86be1bb99d0fec",
        "z": "95c38d96d861b4c4",
        "name": "",
        "x": 490,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "a99b59b008d644da",
        "type": "function",
        "z": "bb86be1bb99d0fec",
        "name": "function 10",
        "func": "msg.rootFromChild = flow.get(\"$parent.$parent.prop\");\nmsg.parentFromChild = flow.get(\"$parent.prop\");\nmsg.child = flow.get(\"prop\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a04ad5963a5dbea7",
        "type": "function",
        "z": "bb86be1bb99d0fec",
        "name": "function 15",
        "func": "flow.set(\"prop\", 78);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 100,
        "wires": [
            [
                "a99b59b008d644da"
            ]
        ]
    },
    {
        "id": "6d867683994b3ab2",
        "type": "switch",
        "z": "9eb27f011bcf9a83",
        "name": "",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "model-connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-content",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 870,
        "y": 500,
        "wires": [
            [
                "8dc1893c26754f86"
            ],
            [
                "7bcc3e7c01afeb3e"
            ],
            [
                "544407f099c6d465"
            ]
        ]
    },
    {
        "id": "8dc1893c26754f86",
        "type": "function",
        "z": "9eb27f011bcf9a83",
        "name": "Send Status CONNECTING",
        "func": "\nreturn {\n    action: \"model-connecting\",\n    type: \"embeddings\",\n    id: env.get(\"Id\"),\n    input: msg.input,\n    inputAttributes: msg.inputAttributes\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "e3c445c220c71f92"
            ]
        ]
    },
    {
        "id": "7bcc3e7c01afeb3e",
        "type": "function",
        "z": "9eb27f011bcf9a83",
        "name": "Send Content",
        "func": "// if we have no content\nif (!msg.content) {\n    // do nothing\n    return;\n}\n\nreturn {\n    action: \"model-content\",\n    type: \"embeddings\",\n    id: env.get(\"Id\"),\n    content: msg.content,\n    input: msg.input,\n    inputAttributes: msg.inputAttributes\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 480,
        "wires": [
            [
                "4cbed130dfdcb696",
                "e3c445c220c71f92"
            ]
        ]
    },
    {
        "id": "4cbed130dfdcb696",
        "type": "function",
        "z": "9eb27f011bcf9a83",
        "name": "Send Status DONE",
        "func": "\nreturn {\n    action: \"model-done\",\n    type: \"embeddings\",\n    id: env.get(\"Id\"),\n    input: msg.input,\n    inputAttributes: msg.inputAttributes\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 520,
        "wires": [
            [
                "e3c445c220c71f92"
            ]
        ]
    },
    {
        "id": "544407f099c6d465",
        "type": "function",
        "z": "9eb27f011bcf9a83",
        "name": "Send Model Error",
        "func": "\nreturn {\n    action: \"model-error\",\n    type: \"embeddings\",\n    id: env.get(\"Id\"),\n    error: msg.error,\n    input: msg.input,\n    inputAttributes: msg.inputAttributes\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 600,
        "wires": [
            [
                "e3c445c220c71f92"
            ]
        ]
    },
    {
        "id": "0b2037f1967fc6c8",
        "type": "function",
        "z": "9eb27f011bcf9a83",
        "name": "Build embeddings request",
        "func": "// we need input\nif (!msg.input || typeof msg.input != \"string\") {\n    return {\n        type: \"model-error\",\n        error: \"LlamaCppEmbeddings - Input is required to run this model.\"\n    };\n}\n\n// we don't accept dimensions\nif (msg.dimensions) {\n    node.warn(`LlamaCppEmbeddings - ignoring given dimensions: ${msg.dimensions}, not supported.`);\n}\n\n// we have input, build the request\n\nmsg.url = `${env.get('BaseUrl')}/embedding`;\nmsg.method = \"POST\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nmsg.payload = {\n    content: msg.input\n};\n\n// if we were given a model\nconst model = env.get(\"Model\") || msg.model;\nif (model && typeof model == \"string\") {\n    msg.payload.model = model;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            [
                "52ae9d3a5862b2ba",
                "632917bc43d1d0cc"
            ]
        ]
    },
    {
        "id": "52ae9d3a5862b2ba",
        "type": "function",
        "z": "9eb27f011bcf9a83",
        "name": "Send connecting status",
        "func": "return {\n    action: \"model-connecting\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 260,
        "wires": [
            [
                "6d867683994b3ab2"
            ]
        ]
    },
    {
        "id": "5d5bf97f50b20698",
        "type": "switch",
        "z": "9eb27f011bcf9a83",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "model-prompt",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 80,
        "wires": [
            [
                "9b8abe0eeb7afada"
            ]
        ]
    },
    {
        "id": "9b8abe0eeb7afada",
        "type": "switch",
        "z": "9eb27f011bcf9a83",
        "name": "Type",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "embeddings",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 120,
        "wires": [
            [
                "0b2037f1967fc6c8"
            ]
        ]
    },
    {
        "id": "632917bc43d1d0cc",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "9eb27f011bcf9a83",
        "name": "Send embeddings request",
        "x": 530,
        "y": 300,
        "wires": [
            [
                "d53ec8a5e6c59764"
            ]
        ]
    },
    {
        "id": "d53ec8a5e6c59764",
        "type": "function",
        "z": "9eb27f011bcf9a83",
        "name": "Handle response",
        "func": "// if we received an error\nif (msg.action == \"http-error\") {\n    return {\n        action: \"model-error\",\n        error: msg.error,\n        input: msg.msgIn.input,\n        inputAttributes: msg.msgIn.inputAttributes\n    }\n}\n\n// else, we got a successful response, parse it\nconst embeddingContent = msg.payload.embedding;\n\nreturn {\n    action: \"model-content\",\n    content: embeddingContent,\n    input: msg.msgIn.input,\n    inputAttributes: msg.msgIn.inputAttributes\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 340,
        "wires": [
            [
                "6d867683994b3ab2"
            ]
        ]
    },
    {
        "id": "80de775010d1a8fb",
        "type": "debug",
        "z": "9eb27f011bcf9a83",
        "name": "Embedding In",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 20,
        "wires": []
    },
    {
        "id": "55aad079b52003ed",
        "type": "debug",
        "z": "9eb27f011bcf9a83",
        "name": "Embedding Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 420,
        "wires": []
    },
    {
        "id": "e3c445c220c71f92",
        "type": "function",
        "z": "9eb27f011bcf9a83",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1365,
        "y": 500,
        "wires": [
            [
                "55aad079b52003ed"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "9cb813cf5332b414",
        "type": "switch",
        "z": "2ec5ed7947d505dd",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "vector-store-update-index",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-content",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "vector-store-search",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 190,
        "y": 380,
        "wires": [
            [
                "838e2404129124f8"
            ],
            [
                "5e48d1e98ace6c0b"
            ],
            [
                "5e48d1e98ace6c0b"
            ],
            [
                "2ebc1d4f67fa7912"
            ]
        ]
    },
    {
        "id": "07e98a41a4878395",
        "type": "function",
        "z": "2ec5ed7947d505dd",
        "name": "Update index - build request",
        "func": "const uniqueId = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0,\n            v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n};\n\nmsg.url = `${env.get(\"BaseUrl\")}/collections/${env.get(\"Id\")}/points?wait=true`\nmsg.method = \"PUT\";\nmsg.payload = {\n    points: msg.embeddings.map((it, idx) => ({\n        id: uniqueId(),\n        vector: it.content,\n        payload: it.inputAttributes.doc\n    }))\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 240,
        "wires": [
            [
                "abf5e03a448370c2"
            ]
        ]
    },
    {
        "id": "d197205c350e3f86",
        "type": "function",
        "z": "2ec5ed7947d505dd",
        "name": "Update index - handle response",
        "func": "// if we received an error\nif (msg.action == \"http-error\") {\n    return {\n        action: \"vector-store-error\",\n        error: msg.error,\n        id: env.get(\"Id\")\n    }\n}\n\n// if, for any other reason, our status is not ok\nif (msg.payload.status != \"ok\") {\n    return {\n        action: \"vector-store-error\",\n        error: msg.payload.status,\n        id: env.get(\"Id\")\n    };\n}\n\n// else, we got a successful response\nreturn {\n    action: \"vector-store-update-index\",\n    id: env.get(\"Id\"),\n    embeddings: msg.msgIn.embeddings\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 320,
        "wires": [
            [
                "b4f42425cadc44ae"
            ]
        ]
    },
    {
        "id": "838e2404129124f8",
        "type": "function",
        "z": "2ec5ed7947d505dd",
        "name": "Update index - Get embeddings",
        "func": "// pass through our docs to embed\nreturn {\n    action: \"embeddings-start\",\n    type: \"update-index\",\n    docs: msg.docs\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 180,
        "wires": [
            [
                "d6d055253c324615"
            ]
        ]
    },
    {
        "id": "abf5e03a448370c2",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "2ec5ed7947d505dd",
        "name": "Update index - send request",
        "x": 740,
        "y": 280,
        "wires": [
            [
                "d197205c350e3f86"
            ]
        ]
    },
    {
        "id": "e9235dfdc1f65289",
        "type": "function",
        "z": "2ec5ed7947d505dd",
        "name": "Search - build request",
        "func": "msg.url = `${env.get(\"BaseUrl\")}/collections/${env.get(\"Id\")}/points/search`\nmsg.method = \"POST\";\nmsg.payload = {\n    ...(msg.attributes.params ?? {}),\n    vector: msg.embeddings[0].content,\n    with_payload: true\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 660,
        "wires": [
            [
                "3bdc790d3c0aa820"
            ]
        ]
    },
    {
        "id": "c4dd1420087bf507",
        "type": "function",
        "z": "2ec5ed7947d505dd",
        "name": "Search - handle response",
        "func": "// if we received an error\nif (msg.action == \"http-error\") {\n    return {\n        action: \"vector-store-error\",\n        error: msg.error,\n        id: env.get(\"Id\")\n    }\n}\n\n// if, for any other reason, our status is not ok\nif (msg.payload.status != \"ok\") {\n    return {\n        action: \"vector-store-error\",\n        error: msg.payload.status,\n        id: env.get(\"Id\")\n    };\n}\n\n// else, we got a successful response\nreturn {\n    action: \"vector-store-search\",\n    id: env.get(\"Id\"),\n    embedding: msg.msgIn.embeddings[0],\n    results: msg.payload.result\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 740,
        "wires": [
            [
                "b4f42425cadc44ae"
            ]
        ]
    },
    {
        "id": "3bdc790d3c0aa820",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "2ec5ed7947d505dd",
        "name": "Search - send request",
        "x": 720,
        "y": 700,
        "wires": [
            [
                "c4dd1420087bf507"
            ]
        ]
    },
    {
        "id": "b4f42425cadc44ae",
        "type": "function",
        "z": "2ec5ed7947d505dd",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1685,
        "y": 440,
        "wires": [
            [
                "f926d3d49c8efd77"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "f926d3d49c8efd77",
        "type": "debug",
        "z": "2ec5ed7947d505dd",
        "name": "VectorStore Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 360,
        "wires": []
    },
    {
        "id": "8bf49fc765949fdc",
        "type": "debug",
        "z": "2ec5ed7947d505dd",
        "d": true,
        "name": "VectorStore In",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 40,
        "wires": []
    },
    {
        "id": "5e48d1e98ace6c0b",
        "type": "switch",
        "z": "2ec5ed7947d505dd",
        "name": "Model Type",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "embeddings",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 380,
        "wires": [
            [
                "d6d055253c324615"
            ]
        ]
    },
    {
        "id": "2ebc1d4f67fa7912",
        "type": "function",
        "z": "2ec5ed7947d505dd",
        "name": "Search - Get embeddings",
        "func": "// pass through our docs to embed\nreturn {\n    action: \"embeddings-start\",\n    type: \"search\",\n    attributes: {\n        params: msg.vectorSearchParams\n    },\n    docs: [msg.doc]\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 600,
        "wires": [
            [
                "d6d055253c324615"
            ]
        ]
    },
    {
        "id": "d6d055253c324615",
        "type": "function",
        "z": "2ec5ed7947d505dd",
        "name": "Embeddings queue",
        "func": "const uniqueId = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0,\n            v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n};\n\n// get embedding queue\nconst embeddingQueue = context.get(\"embeddingQueue\") ?? new Map();\n// get embedding batches\nconst embeddingBatches = context.get(\"embeddingBatches\") ?? new Map();\n\nconst stopEmbedding = (embeddingId) => {\n    let next;\n    // remove the embedding queue\n    embeddingQueue.delete(embeddingId);\n    // delete our batch\n    embeddingBatches.delete(embeddingId);\n    // if there is another embedding queued\n    if (embeddingQueue.size > 0) {\n        // send off the first embedding in our new queue\n        next = embeddingQueue.values().next().value.shift();\n    }\n    // else, there are no more embeddings\n    else {\n        // we are now idle\n        context.set(\"embeddingStatus\", \"idle\");\n    }\n    return next;\n}\n\n// if this is a model content message\nif (msg.action == \"model-content\") {\n    // if we don't have an embedding id\n    const embeddingId = msg.inputAttributes.embeddingId;\n    if (!embeddingId) {\n        // then we should disregard this message\n        // it isn't for an embedding\n        return;\n    }\n\n    // else, we have just received an embedding\n    // first we need to store it, and then fire off the next one\n    \n    // if our id doesn't exist\n    if (!embeddingBatches.has(embeddingId)) {\n        // init it\n        embeddingBatches.set(embeddingId, []);\n    }\n    \n    // add our embedding to the batch\n    embeddingBatches.get(embeddingId).push(msg);\n    \n    // if there is more in our embedding queue\n    let next;\n    if (embeddingQueue.get(embeddingId).length > 0) {\n        // then send off our next embedding\n        next = embeddingQueue.get(embeddingId).shift();\n    }\n    // else, our current embedding is finished\n    else {\n        // send our embedding batch - 2nd output\n        node.send([undefined, {\n            action: \"embeddings-done\",\n            embeddingId,\n            type: msg.inputAttributes.embeddingType,\n            attributes: msg.inputAttributes.embeddingAttributes,\n            embeddings: Array.from(embeddingBatches.get(embeddingId).values())\n        }]);\n        // end our embed, get the next one\n        next = stopEmbedding(embeddingId)\n    }\n    // update our queue and batches\n    context.set(\"embeddingQueue\", embeddingQueue);\n    context.set(\"embeddingBatches\", embeddingBatches);\n// send off our next embedding\n    return next;\n}\n\n// if this is a model error message\nif (msg.action == \"model-error\") {\n    // if we don't have an embedding id\n    const embeddingId = msg.inputAttributes.embeddingId;\n    if (!embeddingId) {\n        // then we should disregard this message\n        // it isn't for an embedded embedding\n        return;\n    }\n\n    // else, there was an error with our embedding\n    // we should cancel this entire embedding,\n    // but still send the next one\n    const next = stopEmbedding(embeddingId);\n    // update our queue and batches\n    context.set(\"embeddingQueue\", embeddingQueue);\n    context.set(\"embeddingBatches\", embeddingBatches);\n// send off our next embedding\n    return next;\n}\n\n// if this is an message with new embeddings\nif (msg.action == \"embeddings-start\") {\n    // if we didn't receive any docs\n    if (!Array.isArray(msg.docs)) {\n        node.warn(`Qdrant - Ignoring non-array docs: ${msg.docs}`);\n    }\n\n    // create an id for this embedding\n    const embeddingId = uniqueId();\n\n    // create embedding requests\n    const embeddings = msg.docs.map(doc => ({\n        action: \"model-prompt\",\n        type: \"embeddings\",\n        input: doc.pageContent,\n        inputAttributes: {\n            embeddingId,\n            embeddingType: msg.type,\n            embeddingAttributes: msg.attributes,\n            doc\n        }\n    }));\n\n    // if we're not currently embedding\n    let firstEmbedding;\n    const embeddingStatus = context.get(\"embeddingStatus\") ?? \"idle\";\n    if (embeddingStatus == \"idle\") {\n        // take off the first embedding to send it now\n        firstEmbedding = embeddings.shift();\n        // we're embedding now\n        context.set(\"embeddingStatus\", \"running\");\n    }\n\n    // add our embeddings to the queue\n    embeddingQueue.set(embeddingId, embeddings);\n    context.set(\"embeddingQueue\", embeddingQueue);\n\n    // send off our first embedding\n    return firstEmbedding;\n}\n\n// if we get to this point, that means we got a message we\n// did not recognize\nnode.warn(`Qdrant - Embeddings Queue - Unrecognized msg.action: ${msg.action}`);\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 440,
        "wires": [
            [
                "b4f42425cadc44ae"
            ],
            [
                "76b69f5a052b3512"
            ]
        ]
    },
    {
        "id": "76b69f5a052b3512",
        "type": "switch",
        "z": "2ec5ed7947d505dd",
        "name": "Embedding type",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update-index",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "07e98a41a4878395"
            ],
            [
                "e9235dfdc1f65289"
            ]
        ]
    },
    {
        "id": "8bfba49dc9b231a0",
        "type": "http request",
        "z": "f0aa5f2ed7dab3b8",
        "name": "Body request / json response",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 240,
        "wires": [
            [
                "3d6d82698400006b"
            ]
        ]
    },
    {
        "id": "3d6d82698400006b",
        "type": "function",
        "z": "f0aa5f2ed7dab3b8",
        "name": "Handle response",
        "func": "// if this is a forward messge\nif (msg.action == \"forward-msg\") {\n    // save our msg for later\n    msg.action = msg.msgAction;\n    delete msg.msgAction;\n    context.set(\"forwardedMsg\", msg);\n    // don't send anything for now\n    return;\n}\n\n// get any forwarded input we might have\nconst forwardedMsg = context.get(\"forwardedMsg\");\n\n// if an error occurred\nif (typeof msg.statusCode == \"string\") {\n    return {\n        action: \"http-error\",\n        error: msg.payload,\n        msgIn: forwardedMsg\n    };\n}\n\n// else, we at least got a response\n// if it was an error response\nif (msg.statusCode >= 400) {\n    return {\n        action: \"http-error\",\n        error: msg.payload,\n        msgIn: forwardedMsg\n    };\n}\n\n// else, we got a successful response\nreturn {\n    ...msg,\n    action: \"http-success\",\n    content: msg.payload,\n    msgIn: forwardedMsg\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3979567024f92d8a",
        "type": "function",
        "z": "f0aa5f2ed7dab3b8",
        "name": "Forward msg",
        "func": "return {\n    ...msg,\n    action: \"forward-msg\",\n    msgAction: msg.action\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 180,
        "wires": [
            [
                "3d6d82698400006b"
            ]
        ]
    },
    {
        "id": "4d595b2ab5d73f41",
        "type": "debug",
        "z": "f0aa5f2ed7dab3b8",
        "d": true,
        "name": "HTTP Requests",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "477f39c216daeebe",
        "type": "http request",
        "z": "f0aa5f2ed7dab3b8",
        "name": "Querystring request / json response",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "3d6d82698400006b"
            ]
        ]
    },
    {
        "id": "6f50302a0314605e",
        "type": "switch",
        "z": "f0aa5f2ed7dab3b8",
        "name": "Payload Response Mode",
        "property": "msg.payloadResponseMode",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "body-json",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "querystring-json",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "body-text",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "querystring-text",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "body-buffer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "querystring-buffer",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 250,
        "y": 360,
        "wires": [
            [
                "8bfba49dc9b231a0"
            ],
            [
                "477f39c216daeebe"
            ],
            [
                "82eed4434b86a830"
            ],
            [
                "47e72b16872c9c29"
            ],
            [
                "eb064815eab65390"
            ],
            [
                "6b3fa08227a4a132"
            ]
        ]
    },
    {
        "id": "82eed4434b86a830",
        "type": "http request",
        "z": "f0aa5f2ed7dab3b8",
        "name": "Body request / string response",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 340,
        "wires": [
            [
                "3d6d82698400006b"
            ]
        ]
    },
    {
        "id": "47e72b16872c9c29",
        "type": "http request",
        "z": "f0aa5f2ed7dab3b8",
        "name": "Querystring request / string response",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 380,
        "wires": [
            [
                "3d6d82698400006b"
            ]
        ]
    },
    {
        "id": "eb064815eab65390",
        "type": "http request",
        "z": "f0aa5f2ed7dab3b8",
        "name": "Body request / buffer response",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 440,
        "wires": [
            [
                "3d6d82698400006b"
            ]
        ]
    },
    {
        "id": "6b3fa08227a4a132",
        "type": "http request",
        "z": "f0aa5f2ed7dab3b8",
        "name": "Querystring request / buffer response",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 480,
        "wires": [
            [
                "3d6d82698400006b"
            ]
        ]
    },
    {
        "id": "1c4e6c80d9868fa0",
        "type": "subflow:30eb5320bb41dc49",
        "z": "f0aa5f2ed7dab3b8",
        "name": "",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "4d595b2ab5d73f41",
                "6f50302a0314605e",
                "3979567024f92d8a"
            ]
        ]
    },
    {
        "id": "446ec29fe6cf3270",
        "type": "switch",
        "z": "a4137713471da6c4",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "history-add-entry",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "vector-store-search",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "history-init",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 210,
        "y": 280,
        "wires": [
            [
                "87b2fd9be71c70e8"
            ],
            [
                "2ef9041ac1eff817"
            ],
            [
                "a96c909aaf955b96"
            ],
            [
                "a57a1ec5360af43f"
            ]
        ]
    },
    {
        "id": "c2c1a70fd9f36e28",
        "type": "subflow:74bd10ee8e354d0a",
        "z": "a4137713471da6c4",
        "name": "",
        "x": 820,
        "y": 260,
        "wires": [
            [
                "5511b481a5af2321"
            ]
        ]
    },
    {
        "id": "a96c909aaf955b96",
        "type": "function",
        "z": "a4137713471da6c4",
        "name": "Set init props",
        "func": "msg.historyNew = env.get(\"New\") || msg.historyNew;\nmsg.historySourceFilename = env.get(\"SourceFilename\") || msg.historySourceFilename;\nmsg.historyId = env.get(\"Id\") || msg.historyId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 400,
        "wires": [
            [
                "c2c1a70fd9f36e28"
            ]
        ]
    },
    {
        "id": "736a5f71119f063f",
        "type": "switch",
        "z": "a4137713471da6c4",
        "name": "history-add-entry role",
        "property": "entryRole",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "user",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 460,
        "y": 120,
        "wires": [
            [
                "4bc41ad610e79dab"
            ],
            [
                "c2c1a70fd9f36e28"
            ]
        ]
    },
    {
        "id": "87b2fd9be71c70e8",
        "type": "function",
        "z": "a4137713471da6c4",
        "name": "Set new entry role",
        "func": "msg.entryRole = msg.entry.role;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            [
                "736a5f71119f063f"
            ]
        ]
    },
    {
        "id": "a57a1ec5360af43f",
        "type": "function",
        "z": "a4137713471da6c4",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 375,
        "y": 540,
        "wires": [
            [
                "c2c1a70fd9f36e28"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "4bc41ad610e79dab",
        "type": "function",
        "z": "a4137713471da6c4",
        "name": "Find context docs",
        "func": "return {\n    action: \"vector-store-search\",\n    doc: {\n        pageContent: msg.entry.content\n    },\n    top: 10\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 80,
        "wires": [
            [
                "5511b481a5af2321"
            ]
        ]
    },
    {
        "id": "2ef9041ac1eff817",
        "type": "function",
        "z": "a4137713471da6c4",
        "name": "Send user message and search context",
        "func": "const messages = [{\n    action: \"history-add-entry\",\n    entry: {\n        role: \"user\",\n        content: msg.embedding.input\n    }\n}];\n\n// if we have search results\nif (msg.results.length > 0) {\n    messages.unshift({\n        action: \"history-add-entry\",\n        entry: {\n            role: \"context\",\n            content: msg.results.map(it => it.payload)\n        }\n    });\n}\nreturn [messages];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 260,
        "wires": [
            [
                "c2c1a70fd9f36e28"
            ]
        ]
    },
    {
        "id": "dfd0dddab653fba0",
        "type": "debug",
        "z": "a4137713471da6c4",
        "d": true,
        "name": "RAG History In",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "140813a1b2bbcd12",
        "type": "debug",
        "z": "a4137713471da6c4",
        "d": true,
        "name": "RAG History Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "5511b481a5af2321",
        "type": "function",
        "z": "a4137713471da6c4",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 975,
        "y": 140,
        "wires": [
            [
                "140813a1b2bbcd12"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "7fef69cf88d9cc09",
        "type": "subflow:6dcab040eb85e22f",
        "z": "9d188e904c4abf9e",
        "name": "",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "b1f8acb01b9cf529"
            ]
        ]
    },
    {
        "id": "fa630c201c72b3c4",
        "type": "function",
        "z": "9d188e904c4abf9e",
        "name": "Render App - Props",
        "func": "msg.elementId = env.get(\"HTML Id\");\nmsg.parentElement = env.get(\"Parent\");\nmsg.heading = env.get(\"Title\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 240,
        "wires": [
            [
                "7fef69cf88d9cc09"
            ]
        ]
    },
    {
        "id": "db2c82fdd3e4fd59",
        "type": "function",
        "z": "9d188e904c4abf9e",
        "name": "Render App",
        "func": "// if we weren't given a system prompt, \n// then render nothing\nif (!msg.systemPrompt) {\n    return msg;\n}\n\nconst parent = msg.parent;\n\n// Add the form tag\nparent.components.push({\n    'type': 'form',\n    'parent': msg.parentElement,\n    'id': msg.elementId,\n    'components': [],\n    'attributes': {\n        'class': 'prompt-ui'\n    },\n})\n\n// Convenient references\nconst frmBody = parent.components[parent.components.length - 1]\n\n// Add the header\nfrmBody.components.push({\n    'type': 'h1',\n    'slot': msg.heading,\n})\n\n// Add a div to wrap the textarea and send button\nconst formDiv = {\n    'type': 'div',\n    'attributes': {\n        'class': 'prompt-form'\n    },\n    'components': [\n        {\n            'type': 'textarea',\n            'id': `${msg.elementId}-prompt`,\n            'properties': {\n                'value': msg.systemPrompt\n            },\n            'events': {\n                \"change\": \"uibuilder.eventSend\"\n            }\n        },\n    ],\n}\n\n// Add the message div to the form body components\nfrmBody.components.push(formDiv)\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "b1f8acb01b9cf529",
        "type": "style-ui",
        "z": "9d188e904c4abf9e",
        "name": "prompt-styles",
        "elementId": "prompt-style-01",
        "parent": "head",
        "slotContent": "\r\n",
        "x": 180,
        "y": 340,
        "wires": [
            [
                "db2c82fdd3e4fd59"
            ]
        ]
    },
    {
        "id": "f7baf9a2b6aa04e9",
        "type": "switch",
        "z": "9d188e904c4abf9e",
        "name": "message handler switch",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "render-app",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 80,
        "wires": [
            [
                "fa630c201c72b3c4"
            ],
            [
                "fa630c201c72b3c4"
            ]
        ]
    },
    {
        "id": "1f9838526c71a615",
        "type": "subflow:74bd10ee8e354d0a",
        "z": "f19bc65164444615",
        "name": "",
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "c9503f57f2cb91a0"
            ]
        ]
    },
    {
        "id": "6ea2427c62da31ce",
        "type": "function",
        "z": "f19bc65164444615",
        "name": "Init",
        "func": "msg.id = env.get(\"Factory Id\") || msg.factoryId || `programatic-history-factory-${Date.now()}`;\nmsg.histories = {};\n\nflow.set(\"Id\", msg.id);\nflow.set(\"Histories\", msg.histories);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 260,
        "wires": [
            [
                "56d72b63240b58d6"
            ]
        ]
    },
    {
        "id": "ac1128419ebdc901",
        "type": "switch",
        "z": "f19bc65164444615",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "prog-factory-init",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "prog-history-init",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 570,
        "y": 440,
        "wires": [
            [
                "6ea2427c62da31ce"
            ],
            [
                "91e592e7dd2607ad"
            ],
            [
                "385f44c059a65470"
            ]
        ]
    },
    {
        "id": "91e592e7dd2607ad",
        "type": "function",
        "z": "f19bc65164444615",
        "name": "Create History",
        "func": "const defaultId = `programatic-history-${Date.now()}`;\n\nmsg.action = \"history-init\";\n\nif (!msg.historyId) {\n    msg.historyId = defaultId;\n}\n\n// if this history already exists\nif (msg.histories[msg.historyId]) {\n    node.warn(`Ignoring init action for existing programatic history: ${msg.historyId}`);\n    return;\n}\n\nif (!msg.historySourceFilename) {\n    msg.historySourceFilename = `/data/db/${defaultId}.json`;\n}\n\nmsg.histories[msg.historyId] = msg.historySourceFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 380,
        "wires": [
            [
                "1f9838526c71a615"
            ]
        ]
    },
    {
        "id": "c9503f57f2cb91a0",
        "type": "switch",
        "z": "f19bc65164444615",
        "name": "If history-init, else",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "history-init",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "385f44c059a65470"
            ],
            [
                "56d72b63240b58d6"
            ]
        ]
    },
    {
        "id": "385f44c059a65470",
        "type": "function",
        "z": "f19bc65164444615",
        "name": "Send history action",
        "func": "const histories = flow.get(\"Histories\");\nconst queue = context.get(\"Queue\") || {};\nconst initializedHistories = context.get(\"InitializedHistories\") || [];\nconst currentlyInitialized = context.get(\"CurrentlyInitialized\") || null;\n\nif (msg.action == \"history-init\") {\n    // build array of responses\n    const responses = [];\n\n    // mark history as intialized\n    context.set(\"CurrentlyInitialized\", msg.id);\n    // if our history was just initialized\n    if (!initializedHistories.includes(msg.id)) {\n        // mark it as initialized at least once\n        initializedHistories.push(msg.id);\n        context.set(\"InitializedHistories\", initializedHistories);\n        // pass this init action through\n        responses.push({\n            ...msg,\n            passThrough: true\n        });\n    }\n    // get our queue\n    const historyQueue = queue[msg.id];\n    // if we have a queue\n    if (historyQueue) {\n        // send our queued actions to our now initialized history\n        responses.push(...historyQueue);\n        delete queue[msg.id];\n        context.set(\"Queue\", queue);\n    }\n\n    // return our responses\n    return [responses];\n}\n\nlet historyId,\n    historyAction,\n    missingIdError = true;\n\nif (msg.action.startsWith(\"model-\")) {\n    historyId = msg.historyId;\n    historyAction = msg.action;\n    missingIdError = false;\n}\n\nif (msg.action.startsWith(\"prog-history-\")) {\n    historyId = msg.id;\n    historyAction = msg.action.replace(\"prog-history-\", \"history-\");\n}\n\nconst historyMessage = {\n    ...msg,\n    historyId,\n    action: historyAction\n};\n\n// if this is our currently initialized history\nif (currentlyInitialized === historyId) {\n    // then just pass the message through\n    return historyMessage;\n}\n\n// else, we'll need to queue this message until our history is initialized\nconst historyQueue = queue[historyId] || [];\nhistoryQueue.push(historyMessage);\nqueue[historyId] = historyQueue;\ncontext.set(\"Queue\", queue);\n\n// if we already have this history on record\nconst historyFilename = msg.histories[historyId];\nif (historyFilename) {\n    // all we need to do is re-init our history before sending our action\n    return {\n        action: \"history-init\",\n        historySourceFilename: historyFilename,\n        historyId,\n    };\n}\n\n// else, we need to wait for our history to be initialized a first time\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 600,
        "wires": [
            [
                "2f18c3b72b0c9ed4"
            ]
        ]
    },
    {
        "id": "2f18c3b72b0c9ed4",
        "type": "switch",
        "z": "f19bc65164444615",
        "name": "Pass through",
        "property": "passThrough",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 640,
        "wires": [
            [
                "56d72b63240b58d6"
            ],
            [
                "1f9838526c71a615"
            ]
        ]
    },
    {
        "id": "249204d92550e10f",
        "type": "function",
        "z": "f19bc65164444615",
        "name": "Inject histories",
        "func": "msg.histories = flow.get(\"Histories\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 360,
        "wires": [
            [
                "19b459cfc255c9f2"
            ]
        ]
    },
    {
        "id": "56d72b63240b58d6",
        "type": "function",
        "z": "f19bc65164444615",
        "name": "Update histories",
        "func": "flow.set(\"Histories\", msg.histories);\n\ndelete msg.histories;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 500,
        "wires": [
            [
                "c53f1c064ea11050"
            ]
        ]
    },
    {
        "id": "88303d90d7e5e417",
        "type": "debug",
        "z": "f19bc65164444615",
        "d": true,
        "name": "Programmatic History In",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 40,
        "wires": []
    },
    {
        "id": "c53f1c064ea11050",
        "type": "debug",
        "z": "f19bc65164444615",
        "d": true,
        "name": "Programmatic History Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 520,
        "wires": []
    },
    {
        "id": "19b459cfc255c9f2",
        "type": "switch",
        "z": "f19bc65164444615",
        "name": "If prog-factory-init, Else valid action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "prog-factory-init",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "(prog-history-.*)|(history-.*)|(model-.*)",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 280,
        "y": 400,
        "wires": [
            [
                "ac1128419ebdc901"
            ],
            [
                "452415ed7af8aa05"
            ]
        ]
    },
    {
        "id": "452415ed7af8aa05",
        "type": "switch",
        "z": "f19bc65164444615",
        "name": "If factory init, else",
        "property": "histories",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 460,
        "wires": [
            [
                "ac1128419ebdc901"
            ],
            [
                "fc2edb1a241a9468"
            ]
        ]
    },
    {
        "id": "fc2edb1a241a9468",
        "type": "function",
        "z": "f19bc65164444615",
        "name": "Error: not initialized",
        "func": "node.error(`Skipping action: ${msg.action} for unitialized history factory. (msg: ${JSON.stringify(msg, undefined, 2)})`);\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 500,
        "wires": []
    },
    {
        "id": "0a432a478665f6a9",
        "type": "function",
        "z": "21de8117bd1967f9",
        "name": "extractHtmlTags",
        "func": "const { default: { default: JSSoup } } = msg.importedModules['jssoup'];\n\nmsg.extractHtmlTags = (text) =>\n    // get all tags from content\n    new JSSoup(text).descendants\n        // only return HTML tags\n        .filter(it => it.name)\n        // get tag name and content\n        .map(({name, contents}) => ({ name, content: contents?.join('') ?? '' }));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "3d458d6f47d14634",
        "type": "subflow:87f7528a5c81b545",
        "z": "21de8117bd1967f9",
        "name": "Import jssoup",
        "env": [
            {
                "name": "Modules",
                "value": "[\"jssoup\"]",
                "type": "json"
            }
        ],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "0a432a478665f6a9"
            ]
        ]
    },
    {
        "id": "af73ebafaf5dc5f2",
        "type": "function",
        "z": "240cc03734c17fa7",
        "name": "Parse Response",
        "func": "// if this is not a stream ending\nif (msg.action != \"history-update-streaming\" || msg.history.streaming) {\n    return;\n}\n\nconst response = msg.history.entries.slice(-1)[0].content;\nconst responseTags = msg.extractHtmlTags(response);\n\n// send message for every tag\nreturn [\n    responseTags.map(({name, content}) => ({\n        tag: name,\n        content,\n        agentId: msg.historyId\n    }))\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "c75d4b3b73c4fe40",
        "type": "subflow:21de8117bd1967f9",
        "z": "240cc03734c17fa7",
        "name": "",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "af73ebafaf5dc5f2"
            ]
        ]
    },
    {
        "id": "1540fd3640a5c2da",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Container spec",
        "func": "msg.name = env.get(\"Container Name\") || msg.containerName || `genai-container-${Date.now()}`;\nmsg.image = env.get(\"Image\") || msg.image;\nmsg.command = env.get(\"Command\") || msg.command;\nmsg.args = yargs(env.get(\"Docker Run Args\") || msg.dockerRunArgs).parse();\nmsg.responseMode = env.get(\"Response Mode\") || msg.responseMode || 'full';\nmsg.commit = env.get(\"Commit\") || msg.commit || false;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "yargs",
                "module": "yargs"
            }
        ],
        "x": 240,
        "y": 100,
        "wires": [
            [
                "68cbcf691071823e"
            ]
        ]
    },
    {
        "id": "68cbcf691071823e",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Create container",
        "func": "\nreturn {\n    method: \"POST\",\n    url: `http://docker-engine-api:2375/containers/create?name=${msg.name}`,\n    payload: {\n        Cmd: msg.command,\n        Image: msg.image\n    },\n    containerSpec: msg\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "2163e4e6c0ca65f7"
            ]
        ]
    },
    {
        "id": "2163e4e6c0ca65f7",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "b9a9b43a3594c357",
        "name": "",
        "x": 240,
        "y": 220,
        "wires": [
            [
                "c0e105a4e8c1ed29"
            ]
        ]
    },
    {
        "id": "28417899327d5e30",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Start container",
        "func": "const containerId = msg.msgIn.containerSpec.id = msg.content.Id;\n\nreturn {\n    method: \"POST\",\n    url: `http://docker-engine-api:2375/containers/${containerId}/start`,\n    containerSpec: msg.msgIn.containerSpec\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 340,
        "wires": [
            [
                "10e31bc197b72db3"
            ]
        ]
    },
    {
        "id": "c0e105a4e8c1ed29",
        "type": "switch",
        "z": "b9a9b43a3594c357",
        "name": "If http-success",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "http-success",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 260,
        "wires": [
            [
                "28417899327d5e30"
            ],
            [
                "f2d7034e67ca9556"
            ]
        ]
    },
    {
        "id": "f2d7034e67ca9556",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Handle error",
        "func": "\nreturn {\n    ...msg,\n    action: \"docker-error\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 560,
        "wires": [
            [
                "b136a36f1f060bab"
            ]
        ]
    },
    {
        "id": "10e31bc197b72db3",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "b9a9b43a3594c357",
        "name": "",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "f298903bf9973df7"
            ]
        ]
    },
    {
        "id": "f298903bf9973df7",
        "type": "switch",
        "z": "b9a9b43a3594c357",
        "name": "If http-success",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "http-success",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 420,
        "wires": [
            [
                "f5ad23d6f9a6c234",
                "0dd1355d2588c8a9"
            ],
            [
                "f2d7034e67ca9556"
            ]
        ]
    },
    {
        "id": "76e87439b348d398",
        "type": "subflow:72ced27310c541f6",
        "z": "b9a9b43a3594c357",
        "name": "",
        "x": 480,
        "y": 540,
        "wires": [
            [
                "bf699708b661931a"
            ]
        ]
    },
    {
        "id": "f5ad23d6f9a6c234",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Get stdout",
        "func": "const containerId = msg.msgIn.containerSpec.id;\n\nreturn {\n    method: \"GET\",\n    url: `http://docker-engine-api:2375/containers/${containerId}/logs`,\n    payloadMode: 'querystring',\n    payload: {\n        follow: true,\n        stdout: true,\n        stderr: false\n    },\n    headers: {\n        'accept': 'text/string',\n    },\n    containerSpec: msg.msgIn.containerSpec,\n    outputMode: msg.msgIn.containerSpec.outputMode\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 500,
        "wires": [
            [
                "76e87439b348d398"
            ]
        ]
    },
    {
        "id": "bf699708b661931a",
        "type": "switch",
        "z": "b9a9b43a3594c357",
        "name": "cURL Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "command-stderr",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command-exit",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command-stdout",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 600,
        "wires": [
            [
                "f2d7034e67ca9556"
            ],
            [
                "4adad0a3f6b3b9a0"
            ],
            [
                "8ea54312d07a6fdc"
            ]
        ]
    },
    {
        "id": "ac62a774eb153489",
        "type": "switch",
        "z": "b9a9b43a3594c357",
        "name": "Exit Code",
        "property": "msg.exit.code",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 640,
        "wires": [
            [
                "f2d7034e67ca9556"
            ],
            [
                "3915149c0c74af4b"
            ]
        ]
    },
    {
        "id": "8ea54312d07a6fdc",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Handle stdout",
        "func": "if (!msg.content) {\n    return;\n}\n\nreturn {\n    ...msg,\n    containerSpec: msg.msgIn.containerSpec,\n    action: \"docker-stdout\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1240,
        "wires": [
            [
                "b136a36f1f060bab"
            ]
        ]
    },
    {
        "id": "c02417dc4c8df8e5",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Handle success",
        "func": "\nreturn {\n    ...msg,\n    action: \"docker-done\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 960,
        "wires": [
            [
                "b136a36f1f060bab"
            ]
        ]
    },
    {
        "id": "5a94f86438968b9b",
        "type": "switch",
        "z": "b9a9b43a3594c357",
        "name": "If remove container",
        "property": "msg.containerSpec.args.rm",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 960,
        "wires": [
            [
                "154690456a2fc9f8"
            ],
            [
                "c02417dc4c8df8e5"
            ]
        ]
    },
    {
        "id": "154690456a2fc9f8",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Remove container",
        "func": "const containerSpec = msg.containerSpec;\n\nreturn {\n    method: \"DELETE\",\n    url: `http://docker-engine-api:2375/containers/${containerSpec.id}?v=true`,\n    containerSpec,\n    exit: msg.exit\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1040,
        "wires": [
            [
                "ed312f61da898031"
            ]
        ]
    },
    {
        "id": "ed312f61da898031",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "b9a9b43a3594c357",
        "name": "",
        "x": 700,
        "y": 1080,
        "wires": [
            [
                "2310df3f0167dbf7"
            ]
        ]
    },
    {
        "id": "2310df3f0167dbf7",
        "type": "switch",
        "z": "b9a9b43a3594c357",
        "name": "If http-success",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "http-success",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 700,
        "y": 1120,
        "wires": [
            [
                "5047c7f754d6aa6d"
            ],
            [
                "f2d7034e67ca9556"
            ]
        ]
    },
    {
        "id": "0dc9efa99bce1f0c",
        "type": "subflow:72ced27310c541f6",
        "z": "b9a9b43a3594c357",
        "name": "",
        "x": 240,
        "y": 540,
        "wires": [
            [
                "d713530df83a6cc3"
            ]
        ]
    },
    {
        "id": "0dd1355d2588c8a9",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Get stderr",
        "func": "const containerId = msg.msgIn.containerSpec.id;\n\nreturn {\n    method: \"GET\",\n    url: `http://docker-engine-api:2375/containers/${containerId}/logs`,\n    payloadMode: 'querystring',\n    payload: {\n        follow: true,\n        stdout: false,\n        stderr: true\n    },\n    headers: {\n        'accept': 'text/string',\n    },\n    containerSpec: msg.msgIn.containerSpec,\n    outputMode: msg.msgIn.containerSpec.outputMode\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 500,
        "wires": [
            [
                "0dc9efa99bce1f0c"
            ]
        ]
    },
    {
        "id": "d713530df83a6cc3",
        "type": "switch",
        "z": "b9a9b43a3594c357",
        "name": "cURL Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "command-stderr",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command-stdout",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 580,
        "wires": [
            [
                "f2d7034e67ca9556"
            ],
            [
                "dd73ee28dfd14074"
            ]
        ]
    },
    {
        "id": "dd73ee28dfd14074",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Handle stderr",
        "func": "if (!msg.content) {\n    return;\n}\n\nreturn {\n    ...msg,\n    containerSpec: msg.msgIn.containerSpec,\n    action: \"docker-stderr\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1320,
        "wires": [
            [
                "b136a36f1f060bab"
            ]
        ]
    },
    {
        "id": "3915149c0c74af4b",
        "type": "switch",
        "z": "b9a9b43a3594c357",
        "name": "If commit",
        "property": "msg.containerSpec.commit",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 680,
        "wires": [
            [
                "350e0fda13f31cc6"
            ],
            [
                "cf1db7761982b2fc"
            ]
        ]
    },
    {
        "id": "350e0fda13f31cc6",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Commit",
        "func": "\nreturn {\n    ...msg,\n    container: msg.containerSpec.id\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 760,
        "wires": [
            [
                "35eba55d4599f26a"
            ]
        ]
    },
    {
        "id": "35eba55d4599f26a",
        "type": "subflow:3f4aa860a3b350bc",
        "z": "b9a9b43a3594c357",
        "name": "",
        "x": 700,
        "y": 800,
        "wires": [
            [
                "8d5c1f2ac7b735ab"
            ]
        ]
    },
    {
        "id": "8d5c1f2ac7b735ab",
        "type": "switch",
        "z": "b9a9b43a3594c357",
        "name": "If success",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "docker-done",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 840,
        "wires": [
            [
                "c829d6336d001021"
            ],
            [
                "f2d7034e67ca9556"
            ]
        ]
    },
    {
        "id": "c829d6336d001021",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Store commit",
        "func": "\nreturn {\n    ...msg,\n    containerSpec: {\n        ...msg.commitSpec.containerSpec,\n        commit: msg.commitSpec\n    },\n    exit: msg.commitSpec.exit\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 880,
        "wires": [
            [
                "5a94f86438968b9b"
            ]
        ]
    },
    {
        "id": "4adad0a3f6b3b9a0",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Store exit",
        "func": "\nreturn {\n    containerSpec: msg.msgIn.containerSpec,\n    exit: msg\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 600,
        "wires": [
            [
                "ac62a774eb153489"
            ]
        ]
    },
    {
        "id": "5047c7f754d6aa6d",
        "type": "function",
        "z": "b9a9b43a3594c357",
        "name": "Return input message",
        "func": "\nreturn msg.msgIn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1160,
        "wires": [
            [
                "c02417dc4c8df8e5"
            ]
        ]
    },
    {
        "id": "9ead6c09c1634875",
        "type": "debug",
        "z": "b9a9b43a3594c357",
        "name": "Docker Run In",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 20,
        "wires": []
    },
    {
        "id": "0a96edc6fd08333b",
        "type": "debug",
        "z": "b9a9b43a3594c357",
        "name": "Docker Run Out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 880,
        "wires": []
    },
    {
        "id": "65a8ebb1afe5c330",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "5982620408722375",
        "name": "",
        "x": 630,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "41ea315220e88ed4",
        "type": "function",
        "z": "5982620408722375",
        "name": "function 21",
        "func": "msg.url = `http://docker-engine-api:2375/containers/e9388b9bc020d3438b87a56357b93c08f79fbda456525834238245285ed47eed/logs?stdout=true`;\n// msg.url = `http://host.docker.internal:8080`\nmsg.method = \"GET\"\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "65a8ebb1afe5c330"
            ]
        ]
    },
    {
        "id": "81af6496ee4f4c30",
        "type": "exec",
        "z": "d5c30c295cb6b7bc",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 530,
        "y": 200,
        "wires": [
            [
                "189a0f12c5d3189e"
            ],
            [
                "bba82265f3401843"
            ],
            [
                "571c40cd622a7e4a"
            ]
        ]
    },
    {
        "id": "10a590c86c24cc1c",
        "type": "exec",
        "z": "d5c30c295cb6b7bc",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "spawn",
        "x": 530,
        "y": 280,
        "wires": [
            [
                "189a0f12c5d3189e"
            ],
            [
                "bba82265f3401843"
            ],
            [
                "571c40cd622a7e4a"
            ]
        ]
    },
    {
        "id": "9c2566ae93501d69",
        "type": "switch",
        "z": "d5c30c295cb6b7bc",
        "name": "Mode",
        "property": "mode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "exec",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spawn",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 240,
        "wires": [
            [
                "81af6496ee4f4c30"
            ],
            [
                "10a590c86c24cc1c",
                "b3c027b1a78e62ca"
            ]
        ]
    },
    {
        "id": "1c249f69debb918b",
        "type": "function",
        "z": "d5c30c295cb6b7bc",
        "name": "Set mode",
        "func": "msg.mode = msg.mode || 'exec';\nmsg.responseMode = msg.responseMode || 'text';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 140,
        "wires": [
            [
                "9c2566ae93501d69",
                "5ec949124503c75a"
            ]
        ]
    },
    {
        "id": "571c40cd622a7e4a",
        "type": "function",
        "z": "d5c30c295cb6b7bc",
        "name": "Return code",
        "func": "\nreturn {\n    ...msg.payload,\n    action: 'command-exit'\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 320,
        "wires": [
            [
                "bee02be8135363fa"
            ]
        ]
    },
    {
        "id": "5be0298a22eb5f2a",
        "type": "function",
        "z": "d5c30c295cb6b7bc",
        "name": "Spawned",
        "func": "\nreturn {\n    msgIn: msg,\n    action: \"command-spawn\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5ec949124503c75a",
        "type": "function",
        "z": "d5c30c295cb6b7bc",
        "name": "Forward msg",
        "func": "return {\n    ...msg,\n    action: \"forward-msg\",\n    msgAction: msg.action\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "bee02be8135363fa"
            ]
        ]
    },
    {
        "id": "189a0f12c5d3189e",
        "type": "function",
        "z": "d5c30c295cb6b7bc",
        "name": "Stdout",
        "func": "return {\n    ...msg,\n    action: \"command-stdout\",\n    content: msg.payload,\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "bee02be8135363fa"
            ]
        ]
    },
    {
        "id": "bba82265f3401843",
        "type": "function",
        "z": "d5c30c295cb6b7bc",
        "name": "Stderr",
        "func": "\nreturn {\n    ...msg,\n    action: \"command-stderr\",\n    content: msg.payload\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 240,
        "wires": [
            [
                "bee02be8135363fa"
            ]
        ]
    },
    {
        "id": "bee02be8135363fa",
        "type": "function",
        "z": "d5c30c295cb6b7bc",
        "name": "Handle response",
        "func": "// if this is a forward messge\nif (msg.action == \"forward-msg\") {\n    // save our msg for later\n    msg.action = msg.msgAction;\n    delete msg.msgAction;\n    context.set(\"forwardedMsg\", msg);\n    // don't send anything for now\n    return;\n}\n\n// get any forwarded input we might have\nconst forwardedMsg = context.get(\"forwardedMsg\");\n\n// transform response\nif (msg.content) {\n    switch(forwardedMsg.responseMode) {\n        case 'text':\n            msg.content = msg.content.toString();\n            break;\n        case 'buffer':\n            msg.content = Buffer.from(msg.content);\n            break;\n    }\n}\n\nreturn {\n    ...msg,\n    msgIn: forwardedMsg,\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "63387d16cd6a7986",
        "type": "subflow:d5c30c295cb6b7bc",
        "z": "72ced27310c541f6",
        "name": "",
        "x": 620,
        "y": 300,
        "wires": [
            [
                "c7494ed5f552a21e"
            ]
        ]
    },
    {
        "id": "c8af8c1b86c8ae07",
        "type": "function",
        "z": "72ced27310c541f6",
        "name": "Create command",
        "func": "const { URLSearchParams } = msg.global;\n\nmsg.outputMode = msg.outputMode || 'full';\n\nlet curlCommand = `curl --silent -X ${msg.method}`;\n\nfor (const [key, value] of Object.entries(msg.headers)) {\n    curlCommand += ` -H \"${key}: ${value}\"`;\n}\n\nconst payload = msg.payload || {};\nif (Object.keys(payload).length > 0) {\n    switch(msg.payloadMode) {\n        case 'body':\n            curlCommand += ` -H \"Content-Type: application/json\" -d '${JSON.stringify(payload)}'`;\n            break;\n        case 'querystring':\n            const queryString = new URLSearchParams(payload).toString();\n            const separator = msg.url.includes('?') ? '&' : '?';\n            msg.url += `${separator}${queryString}`;\n            break;\n    }\n}\n\ncurlCommand += ` \"${msg.url}\"`;\n\nreturn {\n    ...msg,\n    command: curlCommand,\n    mode: msg.outputMode === 'full' ? 'exec' : 'spawn'\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 220,
        "wires": [
            [
                "63387d16cd6a7986"
            ]
        ]
    },
    {
        "id": "e13b4eb99a77c41e",
        "type": "subflow:30eb5320bb41dc49",
        "z": "72ced27310c541f6",
        "name": "",
        "x": 250,
        "y": 180,
        "wires": [
            [
                "c8af8c1b86c8ae07",
                "9b8674a5a8ade573"
            ]
        ]
    },
    {
        "id": "03f57deed86e37c5",
        "type": "provide-global",
        "z": "72ced27310c541f6",
        "name": "",
        "x": 240,
        "y": 140,
        "wires": [
            [
                "e13b4eb99a77c41e"
            ]
        ]
    },
    {
        "id": "c7494ed5f552a21e",
        "type": "function",
        "z": "72ced27310c541f6",
        "name": "Handle response",
        "func": "if (!['command-stderr', 'command-stdout'].includes(msg.action)) {\n    // no content to parse, just return the message\n    return msg;\n}\n\n// else, parse our content\nlet parsedContent;\nswitch (msg.msgIn.responseMode) {\n    case 'json':\n        try {\n            parsedContent = JSON.parse(msg.content);\n        } catch (e) {\n            node.warn('Failed to parse JSON response');\n            parsedContent = msg.content;\n        }\n        break;\n    case 'text':\n        parsedContent = msg.content.toString();\n        break;\n    case 'buffer':\n        parsedContent = Buffer.from(msg.content);\n        break;\n}\n\nreturn {\n    ...msg,\n    rawContent: msg.content,\n    content: parsedContent,\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9b8674a5a8ade573",
        "type": "debug",
        "z": "72ced27310c541f6",
        "d": true,
        "name": "cURL Requests",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 160,
        "wires": []
    },
    {
        "id": "3762dbf4e0957cfa",
        "type": "function",
        "z": "30eb5320bb41dc49",
        "name": "Build request",
        "func": "msg.method = msg.method.toLocaleUpperCase() || \"GET\";\nmsg.payloadMode = msg.method === \"GET\" && msg.payloadMode\n    ? msg.payloadMode : 'body';\nmsg.headers = msg.headers ?\n    Object.fromEntries(\n        Object.entries(msg.headers)\n            .map(\n                ([k, v]) => [k.toLocaleLowerCase(), v]\n            )\n    )\n    : {};\nconst acceptHeader = msg.headers['accept'] = msg.headers['accept'] || 'application/json';\nmsg.responseMode =\n    acceptHeader.includes('json')\n    ? 'json'\n    : acceptHeader.includes('text')\n    ? 'text'\n    : 'buffer';\nmsg.payloadResponseMode = `${msg.payloadMode}-${msg.responseMode}`;\n// we should just be able to disable this -- stupid\nmsg.requestTimeout = 60 * 60 * 1000;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "f3d99166630391d1",
        "type": "function",
        "z": "3f4aa860a3b350bc",
        "name": "Commit spec",
        "func": "msg.container = env.get(\"Container\") || msg.container;\nmsg.repository = env.get(\"Repository\") || msg.repository || `commit-${msg.container}`;\nmsg.tag = env.get(\"Tag\") || msg.tag || `${Date.now()}`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "yargs",
                "module": "yargs"
            }
        ],
        "x": 210,
        "y": 100,
        "wires": [
            [
                "c393a31a37569fbb"
            ]
        ]
    },
    {
        "id": "c393a31a37569fbb",
        "type": "function",
        "z": "3f4aa860a3b350bc",
        "name": "Commit container",
        "func": "\nreturn {\n    method: \"POST\",\n    url: `http://docker-engine-api:2375/commit?container=${msg.container}&tag=${msg.tag}&repo=${msg.repository}`,\n    payload: {\n        Cmd: msg.command,\n        Image: msg.image\n    },\n    commitSpec: msg\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 180,
        "wires": [
            [
                "1d44ae7d4b9f9d12"
            ]
        ]
    },
    {
        "id": "1d44ae7d4b9f9d12",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "3f4aa860a3b350bc",
        "name": "",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "42d4108f978541ae"
            ]
        ]
    },
    {
        "id": "42d4108f978541ae",
        "type": "switch",
        "z": "3f4aa860a3b350bc",
        "name": "If http-success",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "http-success",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 260,
        "wires": [
            [
                "cea8afeae263e378"
            ],
            [
                "9fe7448838c509e5"
            ]
        ]
    },
    {
        "id": "9fe7448838c509e5",
        "type": "function",
        "z": "3f4aa860a3b350bc",
        "name": "Handle error",
        "func": "\nreturn {\n    ...msg,\n    commitSpec: msg.msgIn.commitSpec,\n    action: \"docker-error\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "cea8afeae263e378",
        "type": "function",
        "z": "3f4aa860a3b350bc",
        "name": "Handle success ",
        "func": "const commit = msg.msgIn.commitSpec;\n\nreturn {\n    ...msg,\n    commitSpec: {\n        ...commit,\n        image: `${commit.repository}:${commit.tag}`\n    },\n    action: \"docker-done\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6d6f8c6f67a318de",
        "type": "function",
        "z": "126e4a373d8bcb36",
        "name": "Parse Content",
        "func": "\nreturn {\n    ...msg,\n    contentTags: msg.extractHtmlTags(msg.content || '')\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "af3d5caec2de488c",
        "type": "subflow:21de8117bd1967f9",
        "z": "126e4a373d8bcb36",
        "name": "",
        "x": 250,
        "y": 140,
        "wires": [
            [
                "6d6f8c6f67a318de"
            ]
        ]
    },
    {
        "id": "e935f75b3e48ad5e",
        "type": "function",
        "z": "828f5a08b0bcf89d",
        "name": "Parse Content",
        "func": "return {\n    ...msg,\n    contentHtml: msg.parseMarkdown(msg.content)\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e82cac62a6dcc5e2",
        "type": "subflow:ae4739904e91e32d",
        "z": "828f5a08b0bcf89d",
        "name": "",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "e935f75b3e48ad5e"
            ]
        ]
    },
    {
        "id": "880a67537dd0efe3",
        "type": "provide-import-fn",
        "z": "87f7528a5c81b545",
        "name": "",
        "x": 290,
        "y": 200,
        "wires": [
            [
                "6bedf6b16eb7796b"
            ]
        ]
    },
    {
        "id": "457ddbfd4780ea1d",
        "type": "function",
        "z": "87f7528a5c81b545",
        "name": "Named Imports",
        "func": "\n;(async () => {\n    try {\n        const importedModules = Object.fromEntries(\n            await Promise.all(\n                msg.moduleSpecs.map(async spec => {\n                    const moduleNamepsace = await msg.import(spec.moduleName);\n\n                    const importedModule = Object.fromEntries(\n                        [\n                            ...(spec.defaultExport ? [{name: \"default\", alias: \"default\"}] : []),\n                            ...(spec.namedExports ?? Object.keys(moduleNamepsace).map(k => ({name: k, alias: k})))\n                        ].map(\n                            ({name, alias}) => [alias, moduleNamepsace[name]]\n                        )\n                    )\n\n                    return [spec.key, importedModule];\n                })\n            )\n        );\n\n        node.send({...msg, importedModules});\n    }   \n    catch (e) {\n        node.error(e.stack);\n    }\n})();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sseJs",
                "module": "sse.js"
            }
        ],
        "x": 820,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "6bedf6b16eb7796b",
        "type": "function",
        "z": "87f7528a5c81b545",
        "name": "module-alias",
        "func": "// Copied from: https://github.com/ilearnio/module-alias/blob/dev/index.js\nconst nodePath = await msg.import('path')\n\nconst modulePaths = []\nconst moduleAliases = {}\nconst moduleAliasNames = []\n\nfunction isPathMatchesAlias(path, alias) {\n    // Matching /^alias(\\/|$)/\n    if (path.indexOf(alias) === 0) {\n        if (path.length === alias.length) return true\n        if (path[alias.length] === '/') return true\n    }\n\n    return false\n}\n\nconst init = async () => {\n    const Module = await msg.import('node:module')\n\n    const oldNodeModulePaths = Module._nodeModulePaths\n    Module._nodeModulePaths = function (from) {\n        let paths = oldNodeModulePaths.call(this, from)\n\n        // Only include the module path for top-level modules\n        // that were not installed:\n        if (from.indexOf('node_modules') === -1) {\n            paths = modulePaths.concat(paths)\n        }\n\n        return paths\n    }\n\n    const oldResolveFilename = Module._resolveFilename\n    Module._resolveFilename = function (request, parentModule, isMain, options) {\n        for (let i = moduleAliasNames.length; i-- > 0;) {\n            const alias = moduleAliasNames[i]\n            if (isPathMatchesAlias(request, alias)) {\n                let aliasTarget = moduleAliases[alias]\n                // Custom function handler\n                if (typeof moduleAliases[alias] === 'function') {\n                    const fromPath = parentModule.filename\n                    aliasTarget = moduleAliases[alias](fromPath, request, alias)\n                    if (!aliasTarget || typeof aliasTarget !== 'string') {\n                        throw new Error('[module-alias] Expecting custom handler function to return path.')\n                    }\n                }\n                request = nodePath.join(aliasTarget, request.substr(alias.length))\n                // Only use the first match\n                break\n            }\n        }\n\n        return oldResolveFilename.call(this, request, parentModule, isMain, options)\n    }\n};\n\nfunction addPathHelper(path, targetArray) {\n    path = nodePath.normalize(path)\n    if (targetArray && targetArray.indexOf(path) === -1) {\n        targetArray.unshift(path)\n    }\n}\n\nfunction getMainModule() {\n    return msg.global.require.main?._simulateRepl ? undefined : msg.global.require.main\n}\n\nfunction addPath(path) {\n    let parent\n    path = nodePath.normalize(path)\n\n    if (modulePaths.indexOf(path) === -1) {\n        modulePaths.push(path)\n        // Enable the search path for the current top-level module\n        const mainModule = getMainModule()\n        if (mainModule) {\n            addPathHelper(path, mainModule.paths)\n        }\n        parent = msg.global.module.parent\n\n        // Also modify the paths of the module that was used to load the\n        // app-module-paths module and all of it's parents\n        while (parent && parent !== mainModule) {\n            addPathHelper(path, parent.paths)\n            parent = parent.parent\n        }\n    }\n}\n\n(async () => {\n    try {\n        // if we haven't added our data module yet\n        if (!global.get(\"InstallModules:DataModuleAliased\")) {\n            // do so now\n            // first, patch node's module\n            await init();\n            // now we can add our path\n            addPath(`/data`);\n            // we've now added our data path\n            global.set(\"InstallModules:DataModuleAliased\", true);\n        }\n        \n        // forward our message\n        node.send(msg);\n    }\n    catch (e) {\n        node.error(e);\n    }\n})();\n\nreturn;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "df49aa776ec39a20"
            ]
        ]
    },
    {
        "id": "9989cd73c1728ba4",
        "type": "provide-global",
        "z": "87f7528a5c81b545",
        "name": "",
        "x": 280,
        "y": 160,
        "wires": [
            [
                "880a67537dd0efe3"
            ]
        ]
    },
    {
        "id": "df49aa776ec39a20",
        "type": "function",
        "z": "87f7528a5c81b545",
        "name": "Get modules to install",
        "func": "const cachedInstalls = global.get(\"InstallModules:CachedInstalls\") || [];\n\nconst toInstall = msg.moduleSpecs.map(spec => {\n    // split name\n    const splitName = spec.moduleName.split('/');\n    // construct module name based on first character\n    switch(splitName[0][0]) {\n        case '/':\n            // ignore files and directories\n            return;\n        case '.':\n            // ignore files and directories\n            return;\n        case '@':\n            // return org module\n            return splitName.slice(0, 1).join('/');\n        default:\n            // return top-level module\n            return splitName[0];\n    }\n}).filter(it => it && !cachedInstalls.includes(it));\n\nglobal.set(\"InstallModules:CachedInstalls\", [...cachedInstalls, ...toInstall]);\n\n// return our modules to install\nreturn {\n    ...msg,\n    toInstall\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 360,
        "wires": [
            [
                "becc084ee991baaf"
            ]
        ]
    },
    {
        "id": "e98dae970d7540c6",
        "type": "function",
        "z": "87f7528a5c81b545",
        "name": "Get modules",
        "func": "// List of modules\nconst toImport = env.get(\"Modules\") || msg.modules || [];\n\nmsg.moduleSpecs = toImport.map(module => {\n    // create module spec\n    const moduleSpec = {\n        defaultExport: true,\n        namedExports: undefined,\n        ...(typeof module === \"string\" ? { moduleName: module } : {\n            ...module,\n            namedExports: module.namedExports.map(\n                named => typeof named === \"string\" ? {\n                    name: named,\n                    alias: named\n                } : named\n            )\n        })\n    };\n    moduleSpec.key = module.key ?? moduleSpec.moduleName;\n    return moduleSpec;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 100,
        "wires": [
            [
                "9989cd73c1728ba4"
            ]
        ]
    },
    {
        "id": "44dc42cb66468495",
        "type": "subflow:d5c30c295cb6b7bc",
        "z": "87f7528a5c81b545",
        "name": "",
        "x": 420,
        "y": 520,
        "wires": [
            [
                "5ef12c46bbd7a294"
            ]
        ]
    },
    {
        "id": "5ef12c46bbd7a294",
        "type": "switch",
        "z": "87f7528a5c81b545",
        "name": "Command action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "command-stdout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command-stderr",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command-exit",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 430,
        "y": 580,
        "wires": [
            [
                "d66301aee1d76d87"
            ],
            [
                "0a7620bc1dd07e51"
            ],
            [
                "c26e5607bec3a41a"
            ]
        ]
    },
    {
        "id": "0a7620bc1dd07e51",
        "type": "debug",
        "z": "87f7528a5c81b545",
        "name": "Install modules error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 680,
        "wires": []
    },
    {
        "id": "c26e5607bec3a41a",
        "type": "switch",
        "z": "87f7528a5c81b545",
        "name": "If successful",
        "property": "msg.code",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 740,
        "wires": [
            [
                "fef6f985a19ce44e"
            ],
            [
                "0a7620bc1dd07e51"
            ]
        ]
    },
    {
        "id": "d66301aee1d76d87",
        "type": "debug",
        "z": "87f7528a5c81b545",
        "name": "Install modules stdout",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 640,
        "wires": []
    },
    {
        "id": "88d2db1e34559f1c",
        "type": "function",
        "z": "87f7528a5c81b545",
        "name": "Install modules",
        "func": "\nreturn {\n    ...msg,\n    command: `cd /data && npm install ${msg.toInstall.join(' ')}`,\n    mode: \"exec\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 480,
        "wires": [
            [
                "44dc42cb66468495"
            ]
        ]
    },
    {
        "id": "becc084ee991baaf",
        "type": "switch",
        "z": "87f7528a5c81b545",
        "name": "If modules to install",
        "property": "$count(msg.toInstall)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "gte",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 400,
        "wires": [
            [
                "88d2db1e34559f1c"
            ],
            [
                "457ddbfd4780ea1d"
            ]
        ]
    },
    {
        "id": "fef6f985a19ce44e",
        "type": "function",
        "z": "87f7528a5c81b545",
        "name": "Finish install",
        "func": "msg = msg.msgIn;\n\nconst cachedInstalls = global.get(\"InstallModules:CachedInstalls\") || [];\n\nglobal.set(\"InstallModules:CachedInstalls\", [...cachedInstalls, ...msg.toInstall]);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 780,
        "wires": [
            [
                "457ddbfd4780ea1d"
            ]
        ]
    },
    {
        "id": "4432567301785438",
        "type": "subflow:87f7528a5c81b545",
        "z": "d5c98b48f9d2d77f",
        "name": "",
        "env": [
            {
                "name": "Modules",
                "value": "[\"html-entities\"]",
                "type": "json"
            }
        ],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "e5c508b6228990f4"
            ]
        ]
    },
    {
        "id": "e5c508b6228990f4",
        "type": "function",
        "z": "d5c98b48f9d2d77f",
        "name": "Decode",
        "func": "const { decode } = msg.importedModules['html-entities'];\n\nmsg.decodedContent = decode(msg.content);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c0c36621780669a4",
        "type": "subflow:a59054999730c251",
        "z": "9e23ccbf2e0608ed",
        "d": true,
        "g": "0e1cb402b61eb646",
        "name": "Model - openai - localhost",
        "env": [
            {
                "name": "Id",
                "value": "openai-localhost",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:8080",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "45671622e142be7e"
            ]
        ]
    },
    {
        "id": "948e1265a14409b8",
        "type": "debug",
        "z": "9e23ccbf2e0608ed",
        "g": "aaf9af66d3e39da8",
        "name": "Model Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 720,
        "wires": []
    },
    {
        "id": "977f9402195729c4",
        "type": "subflow:a59054999730c251",
        "z": "9e23ccbf2e0608ed",
        "g": "0e1cb402b61eb646",
        "name": "Model - genai - llama-cpp-llava",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-llava",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-llava",
                "type": "str"
            }
        ],
        "x": 430,
        "y": 560,
        "wires": [
            [
                "45671622e142be7e"
            ]
        ]
    },
    {
        "id": "a63ac3946c2843eb",
        "type": "debug",
        "z": "9e23ccbf2e0608ed",
        "d": true,
        "g": "aaf9af66d3e39da8",
        "name": "Model Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 680,
        "wires": []
    },
    {
        "id": "5e149325f881f48b",
        "type": "subflow:2b3efcc977e88d91",
        "z": "9e23ccbf2e0608ed",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "simple-chat",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 160,
        "wires": [
            [
                "246a383da043e031",
                "34dd380b3322dc77"
            ]
        ]
    },
    {
        "id": "8ec4c35df45a28c5",
        "type": "comment",
        "z": "9e23ccbf2e0608ed",
        "g": "0e1cb402b61eb646",
        "name": "Models",
        "info": "",
        "x": 350,
        "y": 420,
        "wires": []
    },
    {
        "id": "246a383da043e031",
        "type": "subflow:74bd10ee8e354d0a",
        "z": "9e23ccbf2e0608ed",
        "name": "",
        "x": 310,
        "y": 220,
        "wires": [
            [
                "c865bad2cdc088e0"
            ]
        ]
    },
    {
        "id": "b1093b3dfa80dbe3",
        "type": "switch",
        "z": "9e23ccbf2e0608ed",
        "g": "aaf9af66d3e39da8",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "model-content",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 700,
        "wires": [
            [
                "a63ac3946c2843eb"
            ],
            [
                "948e1265a14409b8"
            ]
        ]
    },
    {
        "id": "8e313642e9e9049a",
        "type": "inject",
        "z": "9e23ccbf2e0608ed",
        "name": "Start App",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            },
            {
                "p": "action",
                "v": "history-init",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "246a383da043e031"
            ]
        ]
    },
    {
        "id": "378e8541feaf87ec",
        "type": "subflow:a59054999730c251",
        "z": "9e23ccbf2e0608ed",
        "d": true,
        "g": "0e1cb402b61eb646",
        "name": "Model - dummy sse",
        "env": [
            {
                "name": "Id",
                "value": "dummy-sse",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:8091",
                "type": "str"
            },
            {
                "name": "Batch",
                "value": "10",
                "type": "num"
            }
        ],
        "x": 390,
        "y": 480,
        "wires": [
            [
                "45671622e142be7e"
            ]
        ]
    },
    {
        "id": "45671622e142be7e",
        "type": "function",
        "z": "9e23ccbf2e0608ed",
        "g": "0e1cb402b61eb646",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 645,
        "y": 580,
        "wires": [
            [
                "246a383da043e031",
                "b1093b3dfa80dbe3"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "33ca3631b9af0d55",
        "type": "subflow:a59054999730c251",
        "z": "9e23ccbf2e0608ed",
        "d": true,
        "g": "0e1cb402b61eb646",
        "name": "Model - genai - llama-cpp-mistral-8x",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-mistral-8x",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-mistral-8x",
                "type": "str"
            }
        ],
        "x": 440,
        "y": 600,
        "wires": [
            [
                "45671622e142be7e"
            ]
        ]
    },
    {
        "id": "d9e8ec2ee480957d",
        "type": "function",
        "z": "9e23ccbf2e0608ed",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 205,
        "y": 460,
        "wires": [
            [
                "378e8541feaf87ec",
                "c0c36621780669a4",
                "977f9402195729c4",
                "33ca3631b9af0d55"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "c865bad2cdc088e0",
        "type": "function",
        "z": "9e23ccbf2e0608ed",
        "g": "bf3cb919a9b18a74",
        "name": "System Prompt",
        "func": "// Initial prompt\nconst initialPrompt = `You are a helpful chat bot that will perform any requested tasks to the best of your ability.`;\n\n// if this is an update prompt message\nif (msg.action == \"prompt-update\") {\n    // update our prompt\n    context.set(\"prompt\", msg.prompt);\n    // that's all\n    return msg;\n}\n\n// get current prompt\nlet currentPrompt = context.get(\"prompt\");\n\nif (!currentPrompt) {\n    currentPrompt = initialPrompt\n    context.set(\"prompt\", currentPrompt);\n}\n\nmsg.systemPrompt = currentPrompt;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "5e149325f881f48b",
                "d9e8ec2ee480957d"
            ]
        ]
    },
    {
        "id": "34dd380b3322dc77",
        "type": "switch",
        "z": "9e23ccbf2e0608ed",
        "g": "bf3cb919a9b18a74",
        "name": "If prompt action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^prompt-",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 580,
        "y": 280,
        "wires": [
            [
                "c865bad2cdc088e0"
            ]
        ]
    },
    {
        "id": "6b73ef72bb7e4b87",
        "type": "subflow:2b3efcc977e88d91",
        "z": "ec55121054ad7072",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "admin-operator",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "e77e6ed92b6eba12"
            ]
        ]
    },
    {
        "id": "e77e6ed92b6eba12",
        "type": "subflow:74bd10ee8e354d0a",
        "z": "ec55121054ad7072",
        "name": "Admin History",
        "env": [
            {
                "name": "SourceFilename",
                "value": "/data/db/history-1711926907124.json",
                "type": "str"
            }
        ],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "6b73ef72bb7e4b87",
                "0a39bb73f010efd7",
                "8ad28cb311d8a5c0"
            ]
        ]
    },
    {
        "id": "cd5e2c4e51717c0f",
        "type": "inject",
        "z": "ec55121054ad7072",
        "name": "Start App",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            },
            {
                "p": "action",
                "v": "history-init",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "e77e6ed92b6eba12",
                "d7625ef95dd891b8"
            ]
        ]
    },
    {
        "id": "0a34e1dce381f16b",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 205,
        "y": 440,
        "wires": [
            [
                "21debbaed5b57fd5",
                "75d06bae12a047f9",
                "a61cd1dd9aeb1256",
                "9d4dbbbd2defb7fb"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "75d06bae12a047f9",
        "type": "subflow:a59054999730c251",
        "z": "ec55121054ad7072",
        "d": true,
        "g": "0bd29a38bd7fd7ee",
        "name": "Model - openai - localhost",
        "env": [
            {
                "name": "Id",
                "value": "openai-localhost",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:8080",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "a98ec39f0f7f2c84"
            ]
        ]
    },
    {
        "id": "a61cd1dd9aeb1256",
        "type": "subflow:a59054999730c251",
        "z": "ec55121054ad7072",
        "g": "0bd29a38bd7fd7ee",
        "name": "Model - genai - llama-cpp-llava",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-llava",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-llava",
                "type": "str"
            }
        ],
        "x": 430,
        "y": 540,
        "wires": [
            [
                "a98ec39f0f7f2c84"
            ]
        ]
    },
    {
        "id": "12901237f1ea6884",
        "type": "comment",
        "z": "ec55121054ad7072",
        "g": "0bd29a38bd7fd7ee",
        "name": "Models",
        "info": "",
        "x": 350,
        "y": 400,
        "wires": []
    },
    {
        "id": "d9e0c9a3cf18f405",
        "type": "debug",
        "z": "ec55121054ad7072",
        "g": "7aad90c5be36eb0a",
        "name": "Model Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 700,
        "wires": []
    },
    {
        "id": "4b7f0d34fcfa313d",
        "type": "debug",
        "z": "ec55121054ad7072",
        "d": true,
        "g": "7aad90c5be36eb0a",
        "name": "Model Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 660,
        "wires": []
    },
    {
        "id": "bbeaa9f159afdfaf",
        "type": "switch",
        "z": "ec55121054ad7072",
        "g": "7aad90c5be36eb0a",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "model-content",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 680,
        "wires": [
            [
                "4b7f0d34fcfa313d"
            ],
            [
                "d9e0c9a3cf18f405"
            ]
        ]
    },
    {
        "id": "21debbaed5b57fd5",
        "type": "subflow:a59054999730c251",
        "z": "ec55121054ad7072",
        "d": true,
        "g": "0bd29a38bd7fd7ee",
        "name": "Model - dummy sse",
        "env": [
            {
                "name": "Id",
                "value": "dummy-sse",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal.local:8091",
                "type": "str"
            },
            {
                "name": "Batch",
                "value": "10",
                "type": "num"
            }
        ],
        "x": 390,
        "y": 460,
        "wires": [
            [
                "a98ec39f0f7f2c84"
            ]
        ]
    },
    {
        "id": "a98ec39f0f7f2c84",
        "type": "function",
        "z": "ec55121054ad7072",
        "g": "0bd29a38bd7fd7ee",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 645,
        "y": 560,
        "wires": [
            [
                "e77e6ed92b6eba12",
                "bbeaa9f159afdfaf",
                "4de07154c6644063"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "9d4dbbbd2defb7fb",
        "type": "subflow:a59054999730c251",
        "z": "ec55121054ad7072",
        "d": true,
        "g": "0bd29a38bd7fd7ee",
        "name": "Model - genai - llama-cpp-mistral-8x",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-mistral-8x",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-mistral-8x",
                "type": "str"
            }
        ],
        "x": 440,
        "y": 580,
        "wires": [
            [
                "a98ec39f0f7f2c84"
            ]
        ]
    },
    {
        "id": "0a39bb73f010efd7",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": "Admin Prompt",
        "func": "msg.systemPrompt = `## Mandate\n\nYou are an AI Administrator.\n\nYour mandate is to manage a collective of AI Operators in order to accomplish the goal of any requests from the User.\n\nWhen a goal is too complex or you lack the requisite abilities for you to accomplish it on your own, break the goal down into one or more smaller tasks and assign each task to an Operator.\n\nIn addition to requests from the User, Operators may also send you messages or requests. Unlike requests from the User, you may choose whether and how to respond to messages and requests from Operators.\n\nEvery response must conclude with an <end /> tag.\n\n## Commands\n\nManage the collective of Operators using the Operator API. Send commands to the API as a JSON object wrapped in <operator-api></operator-api> tags. Messages from operators will be given to you wrapped in <operator-message></operator-message> tags.\n\n## Operator API Docs\n\n### Create an Operator\n\n\\`\\`\\`\n<operator-api>\n{\n  \"method\": \"POST\",\n  \"path\": \"/operators\",\n  \"body\": {\n    \"id\": \"06f86c9a-1fe6-4c74-8939-30e64cb1edbb\",\n    \"name\": \"My First Operator\"\n  }\n}\n</operator-api>\n\\`\\`\\`\n\n### Message an Operator\n\n\\`\\`\\`\n<operator-api>\n{\n  \"method\": \"POST\",\n  \"path\": \"/operators/06f86c9a-1fe6-4c74-8939-30e64cb1edbb/messages\",\n  \"body\": {\n    \"content\": \"Sign up for an account at the following website: https://www.example.com\"\n  }\n}\n</operator-api>\n\\`\\`\\`\n\n### Delete an Operator\n\n\\`\\`\\`\n<operator-api>\n{\n  \"method\": \"DELETE\",\n  \"path\": \"/operators/06f86c9a-1fe6-4c74-8939-30e64cb1edbb\",\n  \"body\": {}\n}\n</operator-api>\n\\`\\`\\`\n\n<end />\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 400,
        "wires": [
            [
                "0a34e1dce381f16b"
            ]
        ]
    },
    {
        "id": "4de07154c6644063",
        "type": "subflow:f19bc65164444615",
        "z": "ec55121054ad7072",
        "name": "Operator Histories",
        "env": [
            {
                "name": "Factory Id",
                "value": "operators",
                "type": "str"
            }
        ],
        "x": 890,
        "y": 600,
        "wires": [
            [
                "94206e52b6f654bd",
                "941ab8d26359e8b3"
            ]
        ]
    },
    {
        "id": "3f33490320859b09",
        "type": "switch",
        "z": "ec55121054ad7072",
        "name": "Response tag",
        "property": "tag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "operator-api",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 880,
        "y": 240,
        "wires": [
            [
                "1ec42373eea9f5ff"
            ]
        ]
    },
    {
        "id": "1ec42373eea9f5ff",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": "Parse operator API",
        "func": "let apiMsg;\ntry {\n    apiMsg = JSON.parse(msg.content);\n}\ncatch (e) {\n    throw new Error(`Error parsing operator AI call: ${msg.content} - ${e}`);\n}\n\nreturn {\n    ...msg,\n    ...apiMsg\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 340,
        "wires": [
            [
                "17e432a11037e949"
            ]
        ]
    },
    {
        "id": "17e432a11037e949",
        "type": "switch",
        "z": "ec55121054ad7072",
        "name": "Operator API - Path",
        "property": "path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^/operators(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?$",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "^/operators/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/messages$",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 440,
        "wires": [
            [
                "1e437fb36b5c0ea1"
            ],
            [
                "da042c7a27dcbd9f"
            ]
        ],
        "outputLabels": [
            "Operators",
            "Operators/Messages"
        ]
    },
    {
        "id": "1e437fb36b5c0ea1",
        "type": "switch",
        "z": "ec55121054ad7072",
        "name": "Operators Method",
        "property": "method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 420,
        "wires": [
            [
                "2c04b0bb076a5230"
            ],
            []
        ]
    },
    {
        "id": "2c04b0bb076a5230",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": "Create operator",
        "func": "msg = {\n    action: \"prog-history-init\",\n    historyId: msg.body?.id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 360,
        "wires": [
            [
                "40557c67b6ce1c09",
                "1554a43a221611d6"
            ]
        ]
    },
    {
        "id": "da042c7a27dcbd9f",
        "type": "switch",
        "z": "ec55121054ad7072",
        "name": "Operators/Messages Method",
        "property": "method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1140,
        "y": 460,
        "wires": [
            [
                "2d1212f366ac2dec"
            ]
        ]
    },
    {
        "id": "a2eae6bb6671163b",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": "Add Admin Message",
        "func": "msg = {\n    action: \"prog-history-add-entry\",\n    entry: {\n        role: \"user\",\n        content: msg.createAdminMessagePrompt(msg.body?.content)\n    },\n    id: msg.path.split('/')[2]\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 540,
        "wires": [
            [
                "4de07154c6644063",
                "dd64967ec7cb7b3d"
            ]
        ]
    },
    {
        "id": "2d1212f366ac2dec",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": "Admin message prompt template",
        "func": "msg.createAdminMessagePrompt = message => {\n    return `<admin-message>${message}</admin-message><end />`;\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 500,
        "wires": [
            [
                "a2eae6bb6671163b"
            ]
        ]
    },
    {
        "id": "ef526c2a80f31eb3",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": "Operator Prompt",
        "func": "msg.systemPrompt = `## Mandate\n\nYou are an AI Operator.\n\nYour mandate is to perform any tasks requested of you by your AI Administrator to the best of your ability in order to accomplish the overarching goal of the User.\n\nWhen a task is too complex or you lack the requisite abilities for you to accomplish it on your own, you may ask the Administrator to break the task down into one or more smaller tasks and assign them to Operators.\n\nThis conversation is a complete record of every action you took in performing the task.\n\nEnd all responses with an <end /> tag.\n\n## Commands\n\nYou may message the Administrator by wrapping your message in <operator-message></operator-message> tags. Messages from the Administrator will be given to you wrapped in <admin-message></admin-message> tags.\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 480,
        "wires": [
            [
                "0a34e1dce381f16b"
            ]
        ]
    },
    {
        "id": "87b70bd29575e8b4",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 265,
        "y": 920,
        "wires": [
            [
                "ef526c2a80f31eb3"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "40557c67b6ce1c09",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1695,
        "y": 540,
        "wires": [
            [
                "4de07154c6644063"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "a073258f226718b6",
        "type": "switch",
        "z": "ec55121054ad7072",
        "name": "Response tag",
        "property": "tag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "operator-message",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 880,
        "y": 760,
        "wires": [
            [
                "2d730859f47f1ceb"
            ]
        ]
    },
    {
        "id": "94206e52b6f654bd",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 715,
        "y": 680,
        "wires": [
            [
                "87b70bd29575e8b4"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "8ad28cb311d8a5c0",
        "type": "subflow:240cc03734c17fa7",
        "z": "ec55121054ad7072",
        "name": "Parse Admin Response",
        "x": 900,
        "y": 160,
        "wires": [
            [
                "3f33490320859b09"
            ]
        ]
    },
    {
        "id": "941ab8d26359e8b3",
        "type": "subflow:240cc03734c17fa7",
        "z": "ec55121054ad7072",
        "name": "Parse Operator Response",
        "x": 910,
        "y": 680,
        "wires": [
            [
                "a073258f226718b6"
            ]
        ]
    },
    {
        "id": "2d730859f47f1ceb",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": "Operator message prompt template",
        "func": "msg.createOperatorMessagePrompt = (id, message) => {\n    return `<operator-message operatorId=\"${id}\">${message}</operator-message><end />`;\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 700,
        "wires": [
            [
                "134cfbd5d2b56837"
            ]
        ]
    },
    {
        "id": "134cfbd5d2b56837",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": "Add Operator Message",
        "func": "msg = {\n    action: \"history-add-entry\",\n    entry: {\n        role: \"user\",\n        content: msg.createOperatorMessagePrompt(msg.agentId, msg.content)\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 740,
        "wires": [
            [
                "13c990f21a453c5a",
                "e7f4585c8ca44732"
            ]
        ]
    },
    {
        "id": "d2c9ca4a42af3ba9",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 725,
        "y": 400,
        "wires": [
            [
                "e77e6ed92b6eba12"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "13c990f21a453c5a",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1615,
        "y": 740,
        "wires": [
            [
                "d2c9ca4a42af3ba9"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "d7625ef95dd891b8",
        "type": "function",
        "z": "ec55121054ad7072",
        "name": "Init Operator Histories",
        "func": "\nreturn {\n    action: \"prog-factory-init\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "b6cc1b3167117b16"
            ]
        ]
    },
    {
        "id": "1554a43a221611d6",
        "type": "debug",
        "z": "ec55121054ad7072",
        "name": "Creating Operator",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 320,
        "wires": []
    },
    {
        "id": "dd64967ec7cb7b3d",
        "type": "debug",
        "z": "ec55121054ad7072",
        "name": "Sending Admin Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 600,
        "wires": []
    },
    {
        "id": "e7f4585c8ca44732",
        "type": "debug",
        "z": "ec55121054ad7072",
        "name": "Sending Operator Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 800,
        "wires": []
    },
    {
        "id": "b75f0d8130661559",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "function 1",
        "func": "return { sseJs, nodeFetch, async }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sseJs",
                "module": "sse.js"
            },
            {
                "var": "async",
                "module": "async"
            },
            {
                "var": "nodeFetch",
                "module": "node-fetch"
            }
        ],
        "x": 1080,
        "y": 360,
        "wires": [
            [
                "ea2d35fce99de4ae"
            ]
        ]
    },
    {
        "id": "26a114fc27cd90b0",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 900,
        "y": 340,
        "wires": [
            [
                "b75f0d8130661559"
            ]
        ]
    },
    {
        "id": "ea2d35fce99de4ae",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 380,
        "wires": []
    },
    {
        "id": "8f75c3504c3dbc5f",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "Install dependencies",
        "func": "// List of NPM modules\nconst toInstall = [\n    'sse.js'\n]\n\nconst { exec } = childProcess;\n\nconst run = async (cmd) => {\n    const child = exec(cmd, (err) => {\n        if (err) console.error(err);\n    });\n    await new Promise((resolve) => child.on('close', resolve));\n};\n\nawait Promise.all(toInstall.map(it => run(`npm install ${it}`)));\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "childProcess",
                "module": "child_process"
            }
        ],
        "x": 940,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "e22d75a202b3a7d9",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "function 2",
        "func": "//throw new Error(\"This crashes Node-RED!\");\n\n(async () => {\n    try {\n        const sse = await (global.get(\"dynamicallyImport\"))(\"sse.js\");\n        node.send({sse});\n        node.done();\n    }\n    catch (e) {\n        node.send({ e });\n    }\n})();\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 460,
        "wires": [
            [
                "18e60cf6d75b5c02"
            ]
        ]
    },
    {
        "id": "233b190c4bba2abc",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1000,
        "y": 460,
        "wires": [
            [
                "e22d75a202b3a7d9"
            ]
        ]
    },
    {
        "id": "18e60cf6d75b5c02",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 460,
        "wires": []
    },
    {
        "id": "366fdac4502597e4",
        "type": "provide-import-fn",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "",
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "f58a612cea662f7f"
            ]
        ]
    },
    {
        "id": "f58a612cea662f7f",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "Named Imports",
        "func": "// List of modules\nconst toImport = [\n    'sse.js',\n    \"node:events\"\n];\n\n;(async () => {\n    try {\n        const imported = Object.fromEntries(\n            await Promise.all(\n                toImport.map(\n                    async it => [it, await msg.import(it)]\n                )\n            )\n        );\n\n        node.send({...msg, namedImports: imported});\n    }   \n    catch (e) {\n        node.error(e);\n    }\n})();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sseJs",
                "module": "sse.js"
            }
        ],
        "x": 1370,
        "y": 600,
        "wires": [
            [
                "3163545a452b8023"
            ]
        ]
    },
    {
        "id": "3163545a452b8023",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "function 5",
        "func": "const {\"sse.js\": { SSE }} = msg.namedImports;\nconst { Event } = msg.global;\n\nclass CustomEvent extends Event { \n  constructor(message, data) {\n    super(message, data)\n    this.detail = data?.detail\n  }\n}\n\nmsg.global.CustomEvent = CustomEvent;\ntry {\n  const r = SSE();\n  msg.r = r;\n  return msg;\n}\ncatch (e) {\n  node.error(e);\n  node.error(e.stack);\n}\n\n// return {\n//   ...msg,\n//   scriptglobal: global,\n//   Event: global.Event,\n//   globalEvent: msg.global.Event\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 520,
        "wires": [
            [
                "f4e0940a4675e15a"
            ]
        ]
    },
    {
        "id": "f4e0940a4675e15a",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 480,
        "wires": []
    },
    {
        "id": "d5dd065101ef890a",
        "type": "provide-global",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "",
        "x": 1110,
        "y": 640,
        "wires": [
            [
                "366fdac4502597e4"
            ]
        ]
    },
    {
        "id": "4a5b440f0562c4c5",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 910,
        "y": 600,
        "wires": [
            [
                "d5dd065101ef890a"
            ]
        ]
    },
    {
        "id": "370b802881cc5a5b",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "Send chat to model",
        "func": "msg['genai-llama-cpp-llava'] = {\n    payload: {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful chat bot that will perform any requested tasks to the best of your ability.\"\n            },\n            ...msg.chat.history.map(it => ({\n                role: it.role,\n                content: it.content\n            }))\n        ],\n        \"temperature\": 0.7,\n        \"stop\": null,\n        \"stream\": true\n    }\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 100,
        "wires": [
            [
                "d33cede612c96641"
            ]
        ]
    },
    {
        "id": "d33cede612c96641",
        "type": "subflow:6d317c39edd7ba27",
        "z": "3fb1b07be44ed756",
        "name": "localhost-sse",
        "env": [
            {
                "name": "Id",
                "value": "localhost-sse",
                "type": "str"
            },
            {
                "name": "Url",
                "value": "http://host.docker.internal:8091/sse",
                "type": "str"
            },
            {
                "name": "options",
                "value": "{\"method\": \"POST\"}",
                "type": "json"
            },
            {
                "name": "Options",
                "value": "{\"method\":\"POST\"}",
                "type": "json"
            }
        ],
        "x": 570,
        "y": 120,
        "wires": [
            [
                "453833904710992b"
            ]
        ]
    },
    {
        "id": "453833904710992b",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 160,
        "wires": []
    },
    {
        "id": "e5399fe826058b29",
        "type": "subflow:6d317c39edd7ba27",
        "z": "3fb1b07be44ed756",
        "name": "localhost-openai",
        "env": [
            {
                "name": "Id",
                "value": "localhost-openai",
                "type": "str"
            },
            {
                "name": "Url",
                "value": "http://host.docker.internal:8080/v1/chat/completions",
                "type": "str"
            },
            {
                "name": "Options",
                "value": "{\"method\":\"POST\",\"headers\":{\"Content-Type\":\"application/json\"}}",
                "type": "json"
            },
            {
                "name": "options",
                "value": "{\"method\": \"POST\"}",
                "type": "json"
            }
        ],
        "x": 760,
        "y": 60,
        "wires": [
            [
                "4912a5fe5cc3d7cd"
            ]
        ]
    },
    {
        "id": "4912a5fe5cc3d7cd",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 100,
        "wires": []
    },
    {
        "id": "6db72e1f1342ce1d",
        "type": "subflow:6d317c39edd7ba27",
        "z": "3fb1b07be44ed756",
        "name": "genai-llama-cpp-llava",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-llava",
                "type": "str"
            },
            {
                "name": "Url",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-llava/v1/chat/completions",
                "type": "str"
            },
            {
                "name": "Options",
                "value": "{\"method\":\"POST\",\"headers\":{\"Content-Type\":\"application/json\"}}",
                "type": "json"
            },
            {
                "name": "options",
                "value": "{\"method\": \"POST\"}",
                "type": "json"
            }
        ],
        "x": 780,
        "y": 180,
        "wires": [
            [
                "eea7ca5e3d911f8d"
            ]
        ]
    },
    {
        "id": "eea7ca5e3d911f8d",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "53c302c1821fa9b9",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 1190,
        "y": 240,
        "wires": [
            [
                "f1e2bb90d5fcdf68"
            ]
        ]
    },
    {
        "id": "d7e17a64b9a03bac",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 240,
        "wires": []
    },
    {
        "id": "f1e2bb90d5fcdf68",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "function 7",
        "func": "\nreturn {fs};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 1340,
        "y": 240,
        "wires": [
            [
                "d7e17a64b9a03bac"
            ]
        ]
    },
    {
        "id": "23cc77d254e27371",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "Init Vector Store",
        "func": "const { HNSWLib } = langchainCommunityVectorstoresHnswlib;\nconst { OpenAIEmbeddings } = langchainOpenai;\n\nconst vectorStore = await HNSWLib.fromTexts(\n    [\"Hello world\", \"Bye bye\", \"hello nice world\"],\n    [{ id: 2 }, { id: 1 }, { id: 3 }],\n    new OpenAIEmbeddings()\n);\n\nconst resultOne = await vectorStore.similaritySearch(\"hello world\", 1);\nconsole.log(resultOne);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "langchainCommunityVectorstoresHnswlib",
                "module": "@langchain/community/vectorstores/hnswlib"
            },
            {
                "var": "langchainOpenai",
                "module": "@langchain/openai"
            }
        ],
        "x": 1500,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9f7595e19d34fca3",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "Provide OpenAIEmbeddings",
        "func": "msg.OpenAIEmbeddings = class {\n    constructor () {\n        \n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "78e2f994d1fbe874",
        "type": "subflow:b9a9b43a3594c357",
        "z": "3fb1b07be44ed756",
        "name": "Docker Run",
        "env": [
            {
                "name": "Container Name",
                "value": "create-directory-01",
                "type": "str"
            },
            {
                "name": "Command",
                "value": "",
                "type": "str"
            },
            {
                "name": "Output Mode",
                "value": "full",
                "type": "str"
            },
            {
                "name": "Commit",
                "value": "true",
                "type": "bool"
            },
            {
                "name": "Response Mode",
                "value": "full",
                "type": "str"
            }
        ],
        "x": 190,
        "y": 840,
        "wires": [
            [
                "7d1f6f8b055c1f9c",
                "2b9295527ed600a5"
            ]
        ]
    },
    {
        "id": "b1b7a5e444690a58",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 740,
        "wires": [
            [
                "b6d1a9d992b0d137"
            ]
        ]
    },
    {
        "id": "7d1f6f8b055c1f9c",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "Create directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 880,
        "wires": []
    },
    {
        "id": "01a08cd51c7a1f8a",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 980,
        "wires": [
            [
                "bd126ff279ae3415"
            ]
        ]
    },
    {
        "id": "f8f3094def8eec89",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "3fb1b07be44ed756",
        "name": "",
        "x": 680,
        "y": 980,
        "wires": [
            [
                "60dae42d0ea16a38"
            ]
        ]
    },
    {
        "id": "bd126ff279ae3415",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "function 20",
        "func": "msg.url = `http://docker-engine-api:2375/containers/5efd360faabae42c09c97845e52f9709aca2519e923204596c14225aa3c454ca/exec`;\nmsg.method = \"POST\"\nmsg.payload = {\n    AttachStdout: true,\n    AttachStderr: true,\n    Tty: true,\n    Cmd: [\"bash\", \"-c\", \"for i in {1..10}; do echo \\\"Exec message\\\"; sleep 1; done\"]\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 980,
        "wires": [
            [
                "f8f3094def8eec89"
            ]
        ]
    },
    {
        "id": "60dae42d0ea16a38",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 980,
        "wires": []
    },
    {
        "id": "80486c2b2c4ca875",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1040,
        "wires": [
            [
                "1f5e501e97cf0503"
            ]
        ]
    },
    {
        "id": "539ef7fa2e766b13",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "3fb1b07be44ed756",
        "name": "",
        "x": 680,
        "y": 1040,
        "wires": [
            [
                "6f9623b787e73b13"
            ]
        ]
    },
    {
        "id": "1f5e501e97cf0503",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "function 22",
        "func": "msg.url = `http://docker-engine-api:2375/exec/b6ecfcc454087d84e46e8f1fec6ba1bf8701322f8146393bdb102d6859283130/start`;\nmsg.method = \"POST\"\nmsg.payload = {\n    Detach: false,\n    Tty: false\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1040,
        "wires": [
            [
                "539ef7fa2e766b13"
            ]
        ]
    },
    {
        "id": "6f9623b787e73b13",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1040,
        "wires": []
    },
    {
        "id": "6c89094abec8d0f3",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1100,
        "wires": [
            [
                "52f3d0c6089039ae"
            ]
        ]
    },
    {
        "id": "fcd58b089d8db6fc",
        "type": "subflow:f0aa5f2ed7dab3b8",
        "z": "3fb1b07be44ed756",
        "name": "",
        "x": 680,
        "y": 1100,
        "wires": [
            [
                "b2f29c3b2edf6a54"
            ]
        ]
    },
    {
        "id": "52f3d0c6089039ae",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "function 23",
        "func": "msg.url = `http://docker-engine-api:2375/exec/7cdfd069b582e2d85945fc8c9f1d9c080b11a016e1611067c74c969aca7b6b1f/start`;\nmsg.method = \"POST\"\nmsg.payload = {}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1100,
        "wires": [
            [
                "fcd58b089d8db6fc"
            ]
        ]
    },
    {
        "id": "b2f29c3b2edf6a54",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1100,
        "wires": []
    },
    {
        "id": "54e8be0ccd77b333",
        "type": "subflow:d5c30c295cb6b7bc",
        "z": "3fb1b07be44ed756",
        "name": "",
        "x": 360,
        "y": 700,
        "wires": [
            [
                "ef618dafdea24bf5"
            ]
        ]
    },
    {
        "id": "a8857b2bfb37fa1d",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "function 24",
        "func": "\nreturn {\n    mode: \"spawn\",\n    command: \"ls -la /data\"\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 700,
        "wires": [
            [
                "54e8be0ccd77b333"
            ]
        ]
    },
    {
        "id": "dde91c17372b1fe1",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "a8857b2bfb37fa1d"
            ]
        ]
    },
    {
        "id": "ef618dafdea24bf5",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 680,
        "wires": []
    },
    {
        "id": "b6d1a9d992b0d137",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "Create directory",
        "func": "\nreturn {\n    command: [\"bash\", \"-c\", 'mkdir /root/scripts']\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 800,
        "wires": [
            [
                "78e2f994d1fbe874"
            ]
        ]
    },
    {
        "id": "2b9295527ed600a5",
        "type": "switch",
        "z": "3fb1b07be44ed756",
        "name": "If success",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "docker-done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 760,
        "wires": [
            [
                "8335323195e55550"
            ]
        ]
    },
    {
        "id": "8335323195e55550",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "Create script",
        "func": "\nreturn {\n    command: [\n        \"bash\",\n        \"-c\",\n        `cat << 'EOF' > /root/scripts/script-01.sh ${\n`#!/bin/bash\n\necho \"Script start\";\n\nls -la\n\necho \"Script end\";\n`}\nEOF\n\nchmod +x /root/scripts/script-01.sh`\n    ],\n    image: msg.containerSpec.commit.image\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 800,
        "wires": [
            [
                "c5b7d5c62d369c24"
            ]
        ]
    },
    {
        "id": "c5b7d5c62d369c24",
        "type": "subflow:b9a9b43a3594c357",
        "z": "3fb1b07be44ed756",
        "name": "",
        "env": [
            {
                "name": "Container Name",
                "value": "create-script-01",
                "type": "str"
            },
            {
                "name": "Image",
                "value": "",
                "type": "str"
            },
            {
                "name": "Command",
                "value": "",
                "type": "str"
            },
            {
                "name": "Output Mode",
                "value": "full",
                "type": "str"
            },
            {
                "name": "Commit",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 410,
        "y": 840,
        "wires": [
            [
                "e386314f2de22206",
                "b424a8681b95fd74"
            ]
        ]
    },
    {
        "id": "e386314f2de22206",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "create script",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 880,
        "wires": []
    },
    {
        "id": "b424a8681b95fd74",
        "type": "switch",
        "z": "3fb1b07be44ed756",
        "name": "If success",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "docker-done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 620,
        "y": 760,
        "wires": [
            [
                "3d56f436eacbe88b"
            ]
        ]
    },
    {
        "id": "3d56f436eacbe88b",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "Execute script",
        "func": "\nreturn {\n    command: [\"bash\", \"-c\", \"/root/scripts/script-01.sh\"],\n    image: msg.containerSpec.commit.image\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 800,
        "wires": [
            [
                "10318dc5293f6d80"
            ]
        ]
    },
    {
        "id": "10318dc5293f6d80",
        "type": "subflow:b9a9b43a3594c357",
        "z": "3fb1b07be44ed756",
        "name": "",
        "env": [
            {
                "name": "Container Name",
                "value": "execute-script-01",
                "type": "str"
            },
            {
                "name": "Image",
                "value": "",
                "type": "str"
            },
            {
                "name": "Command",
                "value": "",
                "type": "str"
            },
            {
                "name": "Output Mode",
                "value": "full",
                "type": "str"
            }
        ],
        "x": 630,
        "y": 840,
        "wires": [
            [
                "3ef49ac93dfcce8c"
            ]
        ]
    },
    {
        "id": "3ef49ac93dfcce8c",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "execute script",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 880,
        "wires": []
    },
    {
        "id": "437a9435e7f7839a",
        "type": "comment",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "Imports, Dependencies, Global",
        "info": "",
        "x": 1460,
        "y": 340,
        "wires": []
    },
    {
        "id": "93482abb81e0fcdd",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "c984808fcfb74f0f"
            ]
        ]
    },
    {
        "id": "c984808fcfb74f0f",
        "type": "change",
        "z": "3fb1b07be44ed756",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\"one\",\"two\",\"three\"]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "other",
                "pt": "msg",
                "to": "23",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 260,
        "wires": [
            [
                "45a072776a06e888"
            ]
        ]
    },
    {
        "id": "45a072776a06e888",
        "type": "split",
        "z": "3fb1b07be44ed756",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "306f4255096d69e2"
            ]
        ]
    },
    {
        "id": "306f4255096d69e2",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 340,
        "wires": []
    },
    {
        "id": "234a56ef02849517",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 900,
        "y": 700,
        "wires": [
            [
                "4b1052f331f48638"
            ]
        ]
    },
    {
        "id": "bd0ab9ac636bddf7",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 700,
        "wires": []
    },
    {
        "id": "4b1052f331f48638",
        "type": "provide-import-fn",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "",
        "x": 1110,
        "y": 700,
        "wires": [
            [
                "f119a534c23868e3"
            ]
        ]
    },
    {
        "id": "f119a534c23868e3",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "Named Imports",
        "func": "// List of modules\nconst toImport = [\n    'sse.js',\n    \"node:events\",\n    \"node:path\",\n    \"node:module\"\n];\n\n;(async () => {\n    try {\n        const imported = Object.fromEntries(\n            await Promise.all(\n                toImport.map(\n                    async it => [it, await msg.import(it)]\n                )\n            )\n        );\n\n        node.send({...msg, namedImports: imported});\n    }   \n    catch (e) {\n        node.error(e);\n    }\n})();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sseJs",
                "module": "sse.js"
            }
        ],
        "x": 1360,
        "y": 700,
        "wires": [
            [
                "bd0ab9ac636bddf7"
            ]
        ]
    },
    {
        "id": "a11718080bf06447",
        "type": "subflow:87f7528a5c81b545",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "",
        "env": [
            {
                "name": "Modules",
                "value": "[\"colors/safe.js\",{\"moduleName\":\"change-case\",\"key\":\"changeCase\",\"defaultExport\":false,\"namedExports\":[\"camelCase\",{\"name\":\"split\",\"alias\":\"splitWords\"}]}]",
                "type": "json"
            }
        ],
        "x": 1130,
        "y": 760,
        "wires": [
            [
                "11de70778f4fcccb"
            ]
        ]
    },
    {
        "id": "7e92245bb06f8113",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 900,
        "y": 760,
        "wires": [
            [
                "a11718080bf06447"
            ]
        ]
    },
    {
        "id": "11de70778f4fcccb",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "g": "e18c67f0ba18707b",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 760,
        "wires": []
    },
    {
        "id": "39d3ce3ccf412e91",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "function 25",
        "func": "msg.content = `\nTo elicit a more detailed and specific response from BigStar, you could alter Lilly's prompt as follows:\n\n<prompt>I have $10,000 in savings currently in an investment account. My goal is to earn a passive income of $10,000 per month within the next 6-12 months. Please provide a comprehensive step-by-step plan that outlines clear actions and resources for meeting this goal. The plan should include information on high-yield savings accounts, their interest rates, minimum balance requirements, and any other relevant details. Additionally, please consider providing examples of other investment strategies or financial products that could help me achieve my goal.</prompt>\n\nThis prompt is more detailed and specific, which would encourage BigStar to provide a more thorough response with actionable steps and resources for achieving Lilly's goal\n<operator-api>\n{\n  \"method\": \"POST\",\n  \"path\": \"/operators\",\n  \"body\": {\n    \"id\": \"06f86c9a-1fe6-4c74-8939-30e64cb1edbb\",\n    \"name\": \"My First Operator\"\n  }\n}\n</operator-api>\n\n<operator-api>\n{\n  \"method\": \"POST\",\n  \"path\": \"/operators/06f86c9a-1fe6-4c74-8939-30e64cb1edbb/messages\",\n  \"body\": {\n    \"content\": \"Sign up for an account at the following website: https://www.example.com\"\n  }\n}\n</operator-api>\n<operator-message>When I tried to access the website, I got a 404 Not Found error.</operator-message>\n\n\\`sudo apt - get update && sudo apt - get install - y net - tools\\`\n\n\\`\\`\\`bash\n#!/bin/bash\n\necho \"Script start.\"\necho \"Stderr start\" >& 2\n\nsudo apt update && sudo apt install - y curl\nsudo apt install - y google - chrome - stable\n\ncurl - X GET https://www.google.com/?s=puppies\n\\`\\`\\`\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 360,
        "wires": [
            [
                "f943a06e26050abe"
            ]
        ]
    },
    {
        "id": "482aefc956fcabfa",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 320,
        "wires": [
            [
                "39d3ce3ccf412e91"
            ]
        ]
    },
    {
        "id": "f943a06e26050abe",
        "type": "subflow:126e4a373d8bcb36",
        "z": "3fb1b07be44ed756",
        "name": "",
        "x": 430,
        "y": 400,
        "wires": [
            [
                "0b8c8bc4d9b7c3e5"
            ]
        ]
    },
    {
        "id": "0b8c8bc4d9b7c3e5",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 440,
        "wires": []
    },
    {
        "id": "cfb2407a726eb285",
        "type": "function",
        "z": "3fb1b07be44ed756",
        "name": "function 26",
        "func": "msg.content = `\n<stdout beginningTruncated=\"true\">\nperties(a,{g:{value:b,configurable:!0,writable:!0,enumerable:!1}})})(B,55);Object.freeze(B);var C=function(){};Object.freeze(new function(){});Object.freeze(new C);Object.freeze(new C);var D=!z&&!w(),G=function(a){if(/-[a-z]/.test(\"ved\"))return null;if(D&&a.dataset){if(y()&&!(\"ved\"in a.dataset))return null;a=a.dataset.ved;return a===void 0?null:a}return a.getAttribute(\"data-\"+\"ved\".replace(/([A-Z])/g,\"-$1\").toLowerCase())};var H=[],I=null;function J(a){a=a.target;var b=performance.now(),f=[],K=f.concat,d=H;if(!(d instanceof Array)){var m=typeof Symbol!=\"undefined\"&&Symbol.iterator&&d[Symbol.iterator];if(m)d=m.call(d);else if(typeof d.length==\"number\")d={next:c(d)};else throw Error(\"b\\`\"+String(d));for(var E=[];!(m=d.next()).done;)E.push(m.value);d=E}H=K.call(f,d,[b]);if(a&&a instanceof HTMLElement)if(a===I){if(b=H.length>=4)b=(H[H.length-1]-H[H.length-4])/1E3<5;if(b){b=google.getEI(a);a.hasAttribute(\"data-ved\")?f=a?G(a)||\"\":\"\":f=(f=\n\u0001\u0001�a.closest(\"[data-ved]\"))?G(f)||\"\":\"\";f=f||\"\";if(a.hasAttribute(\"jsname\"))a=a.getAttribute(\"jsname\");else{var F;a=(F=a.closest(\"[jsname]\"))==null?void 0:F.getAttribute(\"jsname\")}google.log(\"rcm\",\"&ei=\"+b+\"&tgtved=\"+f+\"&jsname=\"+(a||\"\"))}}else I=a,H=[b]}window.document.addEventListener(\"DOMContentLoaded\",function(){document.body.addEventListener(\"click\",J)});}).call(this);</script></body></html>\n</stdout>\n\n<stderr beginningTruncated=\"false\">\n\u0002\nStderr start\n\u0002\u0001\n\u0002PWARNING: apt does not have a stable CLI interface. Use with caution in scripts.\n\u0002\u0001\n\u0002\u0001\n\u0002PWARNING: apt does not have a stable CLI interface. Use with caution in scripts.\n\u0002\u0001\n\u0002Jdebconf: delaying package configuration, since apt-utils is not installed\n\u0002P  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n\u0002N                                 Dload  Upload   Total   Spent    Left  Speed\n\u0002�\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100 19962    0 19962    0     0  62933      0 --:--:-- --:--:-- --:--:-- 62971\n\n</stderr>\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "d94dedcd28f4f2c5"
            ]
        ]
    },
    {
        "id": "5e6e19942bea27c9",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 640,
        "y": 320,
        "wires": [
            [
                "cfb2407a726eb285"
            ]
        ]
    },
    {
        "id": "b291b78b3b8cf21c",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 440,
        "wires": []
    },
    {
        "id": "d94dedcd28f4f2c5",
        "type": "subflow:828f5a08b0bcf89d",
        "z": "3fb1b07be44ed756",
        "name": "",
        "env": [
            {
                "name": "Escape",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 670,
        "y": 400,
        "wires": [
            [
                "b291b78b3b8cf21c"
            ]
        ]
    },
    {
        "id": "99974fc7f020b29e",
        "type": "switch",
        "z": "3fb1b07be44ed756",
        "name": "If script exists",
        "property": "$replace(msg.topic, /[^0-9]/, '')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1320,
        "y": 980,
        "wires": [
            [
                "8df1b8a506d75f34"
            ],
            [
                "b0a5abcb0b3bf998"
            ]
        ]
    },
    {
        "id": "ec8158c197f35ed6",
        "type": "inject",
        "z": "3fb1b07be44ed756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "\u0001\u00021",
        "payload": "",
        "payloadType": "date",
        "x": 1320,
        "y": 940,
        "wires": [
            [
                "99974fc7f020b29e"
            ]
        ]
    },
    {
        "id": "8df1b8a506d75f34",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 980,
        "wires": []
    },
    {
        "id": "b0a5abcb0b3bf998",
        "type": "debug",
        "z": "3fb1b07be44ed756",
        "name": "otherwise",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1020,
        "wires": []
    },
    {
        "id": "98f4b0c9b2ccebc1",
        "type": "subflow:2b3efcc977e88d91",
        "z": "3b5c9ca1fb9ebf48",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "bash-executor",
                "type": "str"
            }
        ],
        "x": 690,
        "y": 120,
        "wires": [
            [
                "4c47c0ebef362a00"
            ]
        ]
    },
    {
        "id": "4c47c0ebef362a00",
        "type": "subflow:74bd10ee8e354d0a",
        "z": "3b5c9ca1fb9ebf48",
        "name": "UI History",
        "x": 680,
        "y": 200,
        "wires": [
            [
                "98f4b0c9b2ccebc1",
                "bb99a83f06a6e48b"
            ]
        ]
    },
    {
        "id": "b8f8b9efb15b957b",
        "type": "inject",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Start App",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            },
            {
                "p": "action",
                "v": "history-init",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "4c47c0ebef362a00",
                "abab070131a97f0b"
            ]
        ]
    },
    {
        "id": "ea9b73f9cc386115",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 45,
        "y": 680,
        "wires": [
            [
                "8ef6bd83dbaa3d85",
                "d3eca839cbbe8f34",
                "d4ebbd593cf64e04",
                "3e0ce960e9b660a1"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "d3eca839cbbe8f34",
        "type": "subflow:a59054999730c251",
        "z": "3b5c9ca1fb9ebf48",
        "d": true,
        "g": "f7696f05d57ef7a1",
        "name": "Model - openai - localhost",
        "env": [
            {
                "name": "Id",
                "value": "openai-localhost",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:8080",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 740,
        "wires": [
            [
                "4c7815cb04fa305a"
            ]
        ]
    },
    {
        "id": "d4ebbd593cf64e04",
        "type": "subflow:a59054999730c251",
        "z": "3b5c9ca1fb9ebf48",
        "g": "f7696f05d57ef7a1",
        "name": "Model - genai - llama-cpp-llava",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-llava",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-llava",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 780,
        "wires": [
            [
                "4c7815cb04fa305a"
            ]
        ]
    },
    {
        "id": "c2b3e2bf431804bd",
        "type": "comment",
        "z": "3b5c9ca1fb9ebf48",
        "g": "f7696f05d57ef7a1",
        "name": "Models",
        "info": "",
        "x": 190,
        "y": 640,
        "wires": []
    },
    {
        "id": "1c9144b2ef0b4dd5",
        "type": "debug",
        "z": "3b5c9ca1fb9ebf48",
        "g": "a7de977d7732152e",
        "name": "Model Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 940,
        "wires": []
    },
    {
        "id": "399f0d05531fcfd6",
        "type": "debug",
        "z": "3b5c9ca1fb9ebf48",
        "d": true,
        "g": "a7de977d7732152e",
        "name": "Model Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 900,
        "wires": []
    },
    {
        "id": "504106b997f60dbe",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "g": "a7de977d7732152e",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "model-content",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 920,
        "wires": [
            [
                "399f0d05531fcfd6"
            ],
            [
                "1c9144b2ef0b4dd5"
            ]
        ]
    },
    {
        "id": "8ef6bd83dbaa3d85",
        "type": "subflow:a59054999730c251",
        "z": "3b5c9ca1fb9ebf48",
        "d": true,
        "g": "f7696f05d57ef7a1",
        "name": "Model - dummy sse",
        "env": [
            {
                "name": "Id",
                "value": "dummy-sse",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal.local:8091",
                "type": "str"
            },
            {
                "name": "Batch",
                "value": "10",
                "type": "num"
            }
        ],
        "x": 230,
        "y": 700,
        "wires": [
            [
                "4c7815cb04fa305a"
            ]
        ]
    },
    {
        "id": "4c7815cb04fa305a",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "g": "f7696f05d57ef7a1",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 485,
        "y": 800,
        "wires": [
            [
                "504106b997f60dbe",
                "3856fb6b7a093891"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "3e0ce960e9b660a1",
        "type": "subflow:a59054999730c251",
        "z": "3b5c9ca1fb9ebf48",
        "d": true,
        "g": "f7696f05d57ef7a1",
        "name": "Model - genai - llama-cpp-mistral-8x",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-mistral-8x",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-mistral-8x",
                "type": "str"
            }
        ],
        "x": 280,
        "y": 820,
        "wires": [
            [
                "4c7815cb04fa305a"
            ]
        ]
    },
    {
        "id": "ea8016e9c51abc6c",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "System Prompt",
        "func": "// Initial prompt\nconst initialPrompt = `You are a helpful chat bot that will perform any requested tasks to the best of your ability.`;\n\n// if this is an update prompt message\nif (msg.action == \"prompt-update\") {\n    // update our prompt\n    context.set(\"prompt\", msg.prompt);\n    // that's all\n    return msg;\n}\n\n// get current prompt\nlet currentPrompt = context.get(\"prompt\");\n\nif (!currentPrompt) {\n    currentPrompt = initialPrompt\n    context.set(\"prompt\", currentPrompt);\n}\n\nmsg.systemPrompt = currentPrompt;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 540,
        "wires": [
            [
                "ea9b73f9cc386115"
            ]
        ]
    },
    {
        "id": "bb99a83f06a6e48b",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "If history-add-entry",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "history-add-entry",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 300,
        "wires": [
            [
                "74615acebc474df6"
            ]
        ]
    },
    {
        "id": "74615acebc474df6",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "If new user message",
        "property": "msg.newEntry.role",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "user",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 200,
        "y": 340,
        "wires": [
            [
                "0e6df6e3cee2dcb1",
                "d9a7870f0b658527"
            ]
        ]
    },
    {
        "id": "8a8d172c882c49af",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Add Task Message",
        "func": "msg = {\n    action: \"prog-history-add-entry\",\n    entry: {\n        role: \"user\",\n        content: msg.createBashTaskPrompt(msg.newEntry.content || '')\n    },\n    id: msg.newEntry.id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 440,
        "wires": [
            [
                "3856fb6b7a093891"
            ]
        ]
    },
    {
        "id": "0e6df6e3cee2dcb1",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Bash task prompt template",
        "func": "msg.createBashTaskPrompt = task => {\n    return '' + \n`Write a single bash script that will return an output ` + \n`that accomplishes the following task. Remember to ` +\n`install all needed dependencies at the beginning of ` +\n`the script.\n    \n${task}`\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 400,
        "wires": [
            [
                "8a8d172c882c49af"
            ]
        ]
    },
    {
        "id": "3856fb6b7a093891",
        "type": "subflow:f19bc65164444615",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Executor Histories",
        "env": [
            {
                "name": "Factory Id",
                "value": "executors",
                "type": "str"
            }
        ],
        "x": 730,
        "y": 420,
        "wires": [
            [
                "ea8016e9c51abc6c",
                "d2016f7ee41f50fa",
                "fb44317b333bd1ce"
            ]
        ]
    },
    {
        "id": "abab070131a97f0b",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Init Executor Histories",
        "func": "\nreturn {\n    action: \"prog-factory-init\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "3856fb6b7a093891"
            ]
        ]
    },
    {
        "id": "d9a7870f0b658527",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Create executor",
        "func": "msg = {\n    action: \"prog-history-init\",\n    historyId: msg.newEntry.id\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "3856fb6b7a093891",
                "e62148ddacf36d74"
            ]
        ]
    },
    {
        "id": "d2016f7ee41f50fa",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "If update streaming",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "history-update-streaming",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 500,
        "wires": [
            [
                "aa7f174857ed9d6b"
            ]
        ]
    },
    {
        "id": "aa7f174857ed9d6b",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "If not streaming",
        "property": "msg.history.streaming",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 720,
        "y": 540,
        "wires": [
            [
                "e8e887fd86249699"
            ]
        ]
    },
    {
        "id": "fdf90a031a450b58",
        "type": "subflow:828f5a08b0bcf89d",
        "z": "3b5c9ca1fb9ebf48",
        "name": "",
        "env": [
            {
                "name": "Escape",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 730,
        "y": 620,
        "wires": [
            [
                "5ae0178c7a8ab864"
            ]
        ]
    },
    {
        "id": "e8e887fd86249699",
        "type": "change",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Get agent response",
        "rules": [
            {
                "t": "set",
                "p": "content",
                "pt": "msg",
                "to": "msg.history.entries[-1].content",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 580,
        "wires": [
            [
                "fdf90a031a450b58"
            ]
        ]
    },
    {
        "id": "5ae0178c7a8ab864",
        "type": "change",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Get parsed response",
        "rules": [
            {
                "t": "set",
                "p": "rawContent",
                "pt": "msg",
                "to": "content",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "content",
                "pt": "msg",
                "to": "contentHtml",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 660,
        "wires": [
            [
                "05d22164293a60d1"
            ]
        ]
    },
    {
        "id": "05d22164293a60d1",
        "type": "subflow:126e4a373d8bcb36",
        "z": "3b5c9ca1fb9ebf48",
        "name": "",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "940cc0ae14188d1c"
            ]
        ]
    },
    {
        "id": "e62148ddacf36d74",
        "type": "subflow:b9a9b43a3594c357",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Setup environment",
        "env": [
            {
                "name": "Container Name",
                "value": "setup-environment",
                "type": "str"
            },
            {
                "name": "Command",
                "value": "[\"bash\",\"-c\",\"mkdir /root/scripts; mkdir /root/new-scripts\"]",
                "type": "json"
            },
            {
                "name": "Output Mode",
                "value": "full",
                "type": "str"
            },
            {
                "name": "Commit",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 470,
        "y": 320,
        "wires": [
            [
                "4fa2b99cc6cd1b5c"
            ]
        ]
    },
    {
        "id": "4fa2b99cc6cd1b5c",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "If docker done",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "docker-done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 360,
        "wires": [
            [
                "940cc0ae14188d1c"
            ]
        ]
    },
    {
        "id": "210a1d261ee95131",
        "type": "subflow:b9a9b43a3594c357",
        "z": "3b5c9ca1fb9ebf48",
        "name": "",
        "env": [
            {
                "name": "Container Name",
                "value": "create-script",
                "type": "str"
            },
            {
                "name": "Image",
                "value": "",
                "type": "str"
            },
            {
                "name": "Command",
                "value": "",
                "type": "str"
            },
            {
                "name": "Output Mode",
                "value": "full",
                "type": "str"
            },
            {
                "name": "Commit",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 750,
        "y": 1060,
        "wires": [
            [
                "27741de92e91d0d3"
            ]
        ]
    },
    {
        "id": "0e914a8e763e8ea0",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Create script",
        "func": "\nconst scriptPath = `/root/new-scripts/script-${Date.now()}-${msg.index}.sh`;\n\nconst code = msg.currentCode.replaceAll(\"sudo \", \"\");\n\nreturn {\n    action: \"loop-codes\",\n    scriptPath,\n    history: msg.history,\n    historyId: msg.historyId,\n    contentCodes: msg.contentCodes,\n    index: msg.index,\n    command: [\n        \"bash\",\n        \"-c\",\n        `cat << 'EOF' > ${scriptPath}\n${code}\nEOF\n\nchmod +x ${scriptPath}`\n    ],\n    image: msg.lastImage\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1020,
        "wires": [
            [
                "210a1d261ee95131",
                "a02641d0cd9d6dbe"
            ]
        ]
    },
    {
        "id": "1a70750cb8a22229",
        "type": "change",
        "z": "3b5c9ca1fb9ebf48",
        "name": "For each code",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "contentCodes",
                "pt": "msg",
                "to": "msg.contentTags[name='code'].content",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "loop-codes",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 780,
        "wires": [
            [
                "8249b529648a77f1",
                "16406d3e5582a1a4"
            ]
        ]
    },
    {
        "id": "f92c3f86107e5f1a",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "If current code",
        "property": "msg.currentCode",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 940,
        "wires": [
            [
                "116ec2e1966609a4"
            ],
            [
                "583705d65356bc91"
            ]
        ]
    },
    {
        "id": "116ec2e1966609a4",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "If uses chrome",
        "property": "currentCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "(chrome)",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 980,
        "wires": [
            [
                "cf5d7ad2b913deed"
            ],
            [
                "0e914a8e763e8ea0"
            ]
        ]
    },
    {
        "id": "27741de92e91d0d3",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Docker output",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "docker-stderr",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "docker-done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 1100,
        "wires": [
            [
                "f2d99994f035a684",
                "b3f008f8f6712c97"
            ],
            [
                "f2d99994f035a684"
            ]
        ]
    },
    {
        "id": "1e9eba189d0b8e2f",
        "type": "subflow:b9a9b43a3594c357",
        "z": "3b5c9ca1fb9ebf48",
        "name": "",
        "env": [
            {
                "name": "Container Name",
                "value": "compare-script",
                "type": "str"
            },
            {
                "name": "Image",
                "value": "",
                "type": "str"
            },
            {
                "name": "Command",
                "value": "",
                "type": "str"
            },
            {
                "name": "Output Mode",
                "value": "full",
                "type": "str"
            },
            {
                "name": "Commit",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 750,
        "y": 1180,
        "wires": [
            [
                "63fac46ac0ea4dec"
            ]
        ]
    },
    {
        "id": "f2d99994f035a684",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Compare script",
        "func": "const stderrMsg = context.get(\"StderrMsg\");\n\n// we'll get a loop message first telling us to reset state\nif (msg.action === \"loop-codes\") {\n    context.set(\"StderrMsg\", null);\n    return;\n}\n\n// if this is a stderr message\nif (msg.action === \"docker-stderr\") {\n    // store it so we won't continue on docker success\n    context.set(\"StderrMsg\", msg);\n    return;\n}\n\n// else, we are to continue on,\n// but don't if we previously received a stderrMsg\nif (stderrMsg) {\n    return;\n}\n\nreturn {\n    action: \"loop-codes\",\n    history: msg.containerSpec.history,\n    historyId: msg.containerSpec.historyId,\n    contentCodes: msg.containerSpec.contentCodes,\n    index: msg.containerSpec.index,\n    scriptPath: msg.containerSpec.scriptPath,\n    command: [\n        \"bash\",\n        \"-c\",\n        `result=0; for f in /root/scripts/*; `+\n        `do cmp -s ${msg.containerSpec.scriptPath} \"$f\" && result=1; `+\n        `done; echo $result`\n    ],\n    image: msg.containerSpec.commit.image\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1140,
        "wires": [
            [
                "1e9eba189d0b8e2f",
                "63a5c80a9677a5e8"
            ]
        ]
    },
    {
        "id": "63fac46ac0ea4dec",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Docker output",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "docker-stdout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "docker-done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 1220,
        "wires": [
            [
                "a2e31c64ae6e49c9"
            ],
            [
                "a08be90792caa2ef"
            ]
        ]
    },
    {
        "id": "a2e31c64ae6e49c9",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "If script exists",
        "property": "$replace(msg.content, /[^0-9]/, '')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 760,
        "y": 1260,
        "wires": [
            [
                "61627dea12b6773b"
            ],
            [
                "a08be90792caa2ef"
            ]
        ]
    },
    {
        "id": "a08be90792caa2ef",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Execute script",
        "func": "// get existing done and out messages\nconst doneMsg = context.get(\"DoneMsg\");\nconst outMsg = context.get(\"OutMsg\");\n\n// we'll get a loop message first telling us to reset state\nif (msg.action === \"loop-codes\") {\n    context.set(\"DoneMsg\", null);\n    context.set(\"OutMsg\", null);\n    return;\n}\n\n// if we get our done message first\nif (msg.action === \"docker-done\" && !outMsg) {\n    context.set(\"DoneMsg\", msg);\n    return;\n}\n\n// if we get our out message first\nif (msg.action === \"docker-stdout\" && !doneMsg) {\n    context.set(\"OutMsg\", msg);\n    return;\n}\n\n// else, we should have both messages, use our done message\nmsg = doneMsg ?? msg;\n\nconst scriptName = msg.containerSpec.scriptPath.split('/').slice(-1)[0];\n\nreturn {\n    action: \"loop-codes\",\n    history: msg.containerSpec.history,\n    historyId: msg.containerSpec.historyId,\n    contentCodes: msg.containerSpec.contentCodes,\n    index: msg.containerSpec.index,\n    command: [\n        \"bash\",\n        \"-c\",\n        `mv ${msg.containerSpec.scriptPath} /root/scripts; /root/scripts/${scriptName}`\n    ],\n    image: msg.containerSpec.commit.image\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1300,
        "wires": [
            [
                "af1330eccccb509f",
                "93f20029ca3784d0"
            ]
        ]
    },
    {
        "id": "af1330eccccb509f",
        "type": "subflow:b9a9b43a3594c357",
        "z": "3b5c9ca1fb9ebf48",
        "name": "",
        "env": [
            {
                "name": "Container Name",
                "value": "execute-script",
                "type": "str"
            },
            {
                "name": "Image",
                "value": "",
                "type": "str"
            },
            {
                "name": "Command",
                "value": "",
                "type": "str"
            },
            {
                "name": "Output Mode",
                "value": "full",
                "type": "str"
            },
            {
                "name": "Commit",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 750,
        "y": 1340,
        "wires": [
            [
                "8c0e8b561fb58e4c"
            ]
        ]
    },
    {
        "id": "8c0e8b561fb58e4c",
        "type": "switch",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Docker output",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "docker-stdout",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "docker-stderr",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "docker-done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 760,
        "y": 1400,
        "wires": [
            [
                "93f20029ca3784d0"
            ],
            [
                "93f20029ca3784d0"
            ],
            [
                "dd6437290fd336e7"
            ]
        ]
    },
    {
        "id": "8249b529648a77f1",
        "type": "change",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Get current code",
        "rules": [
            {
                "t": "set",
                "p": "content",
                "pt": "msg",
                "to": "msg.contentCodes[$$.msg.index]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "lastImage",
                "pt": "msg",
                "to": "msg.containerSpec.commit.image",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 820,
        "wires": [
            [
                "544de36198caadba"
            ]
        ]
    },
    {
        "id": "dd6437290fd336e7",
        "type": "change",
        "z": "3b5c9ca1fb9ebf48",
        "g": "d20e17ae1f88e910",
        "name": "Iterate loop",
        "rules": [
            {
                "t": "set",
                "p": "index",
                "pt": "msg",
                "to": "msg.containerSpec.index + 1",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "history",
                "pt": "msg",
                "to": "msg.containerSpec.history",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "historyId",
                "pt": "msg",
                "to": "msg.containerSpec.historyId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "contentCodes",
                "pt": "msg",
                "to": "msg.containerSpec.contentCodes",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1460,
        "wires": [
            [
                "7ab56a5e25543ac8",
                "5952b16f0c8023f3"
            ]
        ]
    },
    {
        "id": "940cc0ae14188d1c",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Get environment",
        "func": "const environments = context.get(\"Environments\") || {};\nconst queues = context.get(\"Queues\") || {};\n\n// if docker done\nif (msg.action === \"docker-done\") {\n    // get our queue\n    const execQueue = queues[msg.containerSpec.historyId] || [];\n    // store our environment\n    environments[msg.containerSpec.historyId] = msg.containerSpec;\n    context.set(\"Environments\", environments);\n    // add our environment to each queue message and send them\n    return [\n        execQueue.map(it => ({\n            ...it,\n            containerSpec: msg.containerSpec\n        }))\n    ];\n}\n\n// else, this is a message for executing in an environment\n// get our environment\nconst execEnv = environments[msg.historyId];\n// if we don't have one yet\nif (!execEnv) {\n    // get our queue\n    const execQueue = queues[msg.historyId] || [];\n    // queue our message\n    execQueue.push(msg);\n    context.set(\"Queues\", queues);\n    // don't send any messages\n    return;\n}\n// add our environment to our message\nmsg.containerSpec = execEnv;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 740,
        "wires": [
            [
                "1a70750cb8a22229"
            ]
        ]
    },
    {
        "id": "5ae745cf98b55950",
        "type": "change",
        "z": "3b5c9ca1fb9ebf48",
        "g": "d20e17ae1f88e910",
        "name": "Update environment",
        "rules": [
            {
                "t": "set",
                "p": "containerSpec",
                "pt": "msg",
                "to": "$merge([msg.containerSpec, { historyId: msg.history.id }])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "docker-done",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 1500,
        "wires": [
            [
                "35a1e0a9c30682f6",
                "93f20029ca3784d0",
                "e874a9f9c957d07f"
            ]
        ]
    },
    {
        "id": "93f20029ca3784d0",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Get Aggregate Script Outputs",
        "func": "const outputs = context.get(\"Outputs\") || [];\n\n// if this is the beginning of a loop\nif ([\"loop-codes\", \"reset-codes\"].includes(msg.action)) {\n    // reset our outputs\n    context.set(\"Outputs\", []);\n    // don't return any messages\n    return;\n}\n\n// if this is an output to aggregate\nif ([\"docker-stdout\", \"docker-stderr\"].includes(msg.action)) {\n    outputs.push(msg);\n    context.set(\"Outputs\", outputs);\n    // don't return any messages\n    return;\n}\n\n// else, return our aggregated outputs\nmsg.scriptOutputs = outputs;\ncontext.set(\"Outputs\", []);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1460,
        "wires": [
            [
                "6634abddc36c6662"
            ]
        ]
    },
    {
        "id": "c8668175271219a7",
        "type": "change",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Reset codes",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "reset-codes",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 1320,
        "wires": [
            [
                "93f20029ca3784d0"
            ]
        ]
    },
    {
        "id": "cf5d7ad2b913deed",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Chrome unavailable prompt template",
        "func": "msg.createPrompt = () => {\n    return 'Chrome is not available, please use a different method.';\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1000,
        "wires": [
            [
                "8c491b44c49379ec"
            ]
        ]
    },
    {
        "id": "8c491b44c49379ec",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Add Exec Message",
        "func": "msg = {\n    action: \"prog-history-add-entry\",\n    entry: {\n        role: \"user\",\n        content: msg.createPrompt()\n    },\n    id: msg.historyId\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1080,
        "wires": [
            [
                "c8668175271219a7",
                "824ad7c29ee4fd68",
                "d1688f392dbffd37"
            ]
        ]
    },
    {
        "id": "1e8f78c5c7e72bca",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Script exists prompt template",
        "func": "msg.createPrompt = () => {\n    return \"We've already tried that script.\";\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1180,
        "wires": [
            [
                "8c491b44c49379ec"
            ]
        ]
    },
    {
        "id": "6634abddc36c6662",
        "type": "function",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Script output prompt template",
        "func": "const outputs = msg.scriptOutputs;\n\nconst streamMaxLength = 1350;\n\nmsg.createPrompt = () => {\n    return outputs.map(outMsg => {\n        const tag = outMsg.action === \"docker-stdout\" ? \"stdout\" : \"stderr\";\n        return `<${tag} beginningTruncated=\"${outMsg.content.length > streamMaxLength ? 'true' : 'false'}\">\n${outMsg.content.slice(-streamMaxLength)}\n</${tag}>\n\n`\n    }).join('');\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1500,
        "wires": [
            [
                "8c491b44c49379ec"
            ]
        ]
    },
    {
        "id": "16406d3e5582a1a4",
        "type": "debug",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Begin code loop",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 800,
        "wires": []
    },
    {
        "id": "d1688f392dbffd37",
        "type": "debug",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Executor Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1120,
        "wires": []
    },
    {
        "id": "5952b16f0c8023f3",
        "type": "debug",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Iterate loop",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1560,
        "wires": []
    },
    {
        "id": "e874a9f9c957d07f",
        "type": "debug",
        "z": "3b5c9ca1fb9ebf48",
        "name": "End loop",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1600,
        "wires": []
    },
    {
        "id": "053e11fd5e2f4c95",
        "type": "debug",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Current code",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 920,
        "wires": []
    },
    {
        "id": "544de36198caadba",
        "type": "subflow:d5c98b48f9d2d77f",
        "z": "3b5c9ca1fb9ebf48",
        "name": "",
        "x": 780,
        "y": 860,
        "wires": [
            [
                "d51dc15e41460eed"
            ]
        ]
    },
    {
        "id": "d51dc15e41460eed",
        "type": "change",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Get decode",
        "rules": [
            {
                "t": "set",
                "p": "currentCode",
                "pt": "msg",
                "to": "decodedContent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 900,
        "wires": [
            [
                "f92c3f86107e5f1a",
                "053e11fd5e2f4c95"
            ]
        ]
    },
    {
        "id": "b3f008f8f6712c97",
        "type": "debug",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Create script stderr",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1040,
        "wires": []
    },
    {
        "id": "61627dea12b6773b",
        "type": "change",
        "z": "3b5c9ca1fb9ebf48",
        "name": "Get history",
        "rules": [
            {
                "t": "set",
                "p": "historyId",
                "pt": "msg",
                "to": "msg.containerSpec.historyId",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 1140,
        "wires": [
            [
                "1e8f78c5c7e72bca"
            ]
        ]
    },
    {
        "id": "fb44317b333bd1ce",
        "type": "subflow:2b3efcc977e88d91",
        "z": "3b5c9ca1fb9ebf48",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "bash-executor-view",
                "type": "str"
            }
        ],
        "x": 950,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b2e03950e248b5e7",
        "type": "comment",
        "z": "3b5c9ca1fb9ebf48",
        "name": "TODO",
        "info": "1. Parse \"command not found\" and prompt to remember to install dependencies.\n2. Identify the AI getting stuck (cross threshold of scripts/messages) and prompt it to identify the problems it is having and recommend solutions\n    - try and do this before the context window is exhausted.\n",
        "x": 130,
        "y": 140,
        "wires": []
    },
    {
        "id": "fe160cbe0df384e5",
        "type": "template",
        "z": "191694dad2850f37",
        "name": "System Prompt",
        "field": "prompt",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "You are a helpful chat bot that will perform any requested tasks to the best of your ability.",
        "output": "str",
        "x": 200,
        "y": 520,
        "wires": [
            [
                "81b98c3380c57334"
            ]
        ]
    },
    {
        "id": "34fa053e9707e425",
        "type": "subflow:74bd10ee8e354d0a",
        "z": "191694dad2850f37",
        "g": "b1dd9777ee396bd7",
        "name": "Solution History",
        "env": [
            {
                "name": "Id",
                "value": "solution-01",
                "type": "str"
            }
        ],
        "x": 480,
        "y": 380,
        "wires": [
            [
                "8565c4a9a8c13312",
                "88802dbd1e8b0c57",
                "b38cd518b824c20d"
            ]
        ]
    },
    {
        "id": "9d0d59cbd0342094",
        "type": "inject",
        "z": "191694dad2850f37",
        "g": "0e31504694a6eb0c",
        "name": "Start Loop",
        "props": [
            {
                "p": "action",
                "v": "step-go-to",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 500,
        "y": 80,
        "wires": [
            [
                "b67aacc8e54e5106"
            ]
        ]
    },
    {
        "id": "c85c2df7d79465a0",
        "type": "subflow:a59054999730c251",
        "z": "191694dad2850f37",
        "d": true,
        "g": "83fd8826b0ec3bf4",
        "name": "Model - dummy sse",
        "env": [
            {
                "name": "Id",
                "value": "dummy-sse",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:8091",
                "type": "str"
            },
            {
                "name": "Batch",
                "value": "10",
                "type": "num"
            }
        ],
        "x": 330,
        "y": 680,
        "wires": [
            [
                "d48b052e253b43c3"
            ]
        ]
    },
    {
        "id": "73516493eccdfd9d",
        "type": "subflow:a59054999730c251",
        "z": "191694dad2850f37",
        "g": "83fd8826b0ec3bf4",
        "name": "Model - genai - llama-cpp-llava",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-llava",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-llava",
                "type": "str"
            },
            {
                "name": "Batch",
                "value": "10",
                "type": "num"
            }
        ],
        "x": 370,
        "y": 760,
        "wires": [
            [
                "d48b052e253b43c3"
            ]
        ]
    },
    {
        "id": "f762ec936046e78f",
        "type": "comment",
        "z": "191694dad2850f37",
        "g": "83fd8826b0ec3bf4",
        "name": "Models",
        "info": "",
        "x": 290,
        "y": 620,
        "wires": []
    },
    {
        "id": "e451712bc8b52b18",
        "type": "debug",
        "z": "191694dad2850f37",
        "g": "ce1b28a464e3b3b3",
        "name": "Model Errors",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 880,
        "wires": []
    },
    {
        "id": "e2dd14f8d37e7a72",
        "type": "debug",
        "z": "191694dad2850f37",
        "g": "ce1b28a464e3b3b3",
        "name": "Model Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 840,
        "wires": []
    },
    {
        "id": "bb6dc487db2ce156",
        "type": "switch",
        "z": "191694dad2850f37",
        "g": "ce1b28a464e3b3b3",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "model-streaming-content",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 860,
        "wires": [
            [
                "e2dd14f8d37e7a72"
            ],
            [
                "e451712bc8b52b18"
            ]
        ]
    },
    {
        "id": "42cede20c9456a92",
        "type": "subflow:74bd10ee8e354d0a",
        "z": "191694dad2850f37",
        "g": "5dbdaf47523ce33a",
        "name": "Eval History",
        "env": [
            {
                "name": "Id",
                "value": "eval-01",
                "type": "str"
            }
        ],
        "x": 1270,
        "y": 640,
        "wires": [
            [
                "1f999e727d7bdcbd",
                "f79210375a125e74",
                "c9ba32537f7bc133",
                "6b036e58872195a7"
            ]
        ]
    },
    {
        "id": "b67aacc8e54e5106",
        "type": "function",
        "z": "191694dad2850f37",
        "g": "0e31504694a6eb0c",
        "name": "Prompt: Problem statement",
        "func": "msg.createUserPrompt = () =>\n    `I have 10K in savings currently in an investment account. My goal is to earn a passive income of $10K every month. Create a plan for me that will meet this goal. I'm looking for single tailored plan, not options to choose from. Give specific, brief instructions for carrying out this plan.`;\n\nflow.set(\"originalProblemStatement\", msg.createUserPrompt());\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 160,
        "wires": [
            [
                "8565c4a9a8c13312"
            ]
        ]
    },
    {
        "id": "81b98c3380c57334",
        "type": "function",
        "z": "191694dad2850f37",
        "g": "83fd8826b0ec3bf4",
        "name": "In",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 700,
        "wires": [
            [
                "c85c2df7d79465a0",
                "73516493eccdfd9d",
                "93859b35073996c8"
            ]
        ],
        "icon": "font-awesome/fa-address-card-o"
    },
    {
        "id": "d48b052e253b43c3",
        "type": "function",
        "z": "191694dad2850f37",
        "g": "83fd8826b0ec3bf4",
        "name": "Out",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 700,
        "wires": [
            [
                "bb6dc487db2ce156",
                "4135e1850bf3099c",
                "fe0f3fe28e08e2f0",
                "0800060d86e1ca55",
                "079bf5373fe5d58f",
                "b38cd518b824c20d"
            ]
        ],
        "icon": "font-awesome/fa-address-card-o"
    },
    {
        "id": "c533acab9a1bba89",
        "type": "comment",
        "z": "191694dad2850f37",
        "g": "0e31504694a6eb0c",
        "name": "Step 1: Problem Statement and Solution",
        "info": "",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "8516a2d5188e142d",
        "type": "comment",
        "z": "191694dad2850f37",
        "g": "17a2a4d88505d1b2",
        "name": "Step 2: Evaluate Solution",
        "info": "",
        "x": 990,
        "y": 340,
        "wires": []
    },
    {
        "id": "5dd26b4eb51f86a8",
        "type": "comment",
        "z": "191694dad2850f37",
        "g": "3334e9dd5bf3557d",
        "name": "Step 3: Propose New Prompt",
        "info": "",
        "x": 1000,
        "y": 820,
        "wires": []
    },
    {
        "id": "0800060d86e1ca55",
        "type": "function",
        "z": "191694dad2850f37",
        "g": "0df36a8be0d76989",
        "name": "Prompt: Use proposed prompt",
        "func": "msg.createUserPrompt = (history) => {\n    const promptProposal = history.entries.slice(-1)[0].content;\n    let newPrompt;\n    try {\n        // don't search for full ending tag, since sometimes the last token gets cutoff\n        newPrompt = promptProposal.match(/<prompt>([\\s\\S]*?)<\\/pro/)[1].trim();\n        if (newPrompt.length < 1) {\n            throw new Error(\"Empty prompt extracted from proposal\")\n        }\n    }\n    catch (e) {\n        throw new Error(`Error extracting prompt from: \\`${promptProposal}\\``);\n    }\n\n    return newPrompt;\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 160,
        "wires": [
            [
                "a33731f7d26ff1d8"
            ]
        ]
    },
    {
        "id": "32fd036f241606a1",
        "type": "comment",
        "z": "191694dad2850f37",
        "g": "0df36a8be0d76989",
        "name": "Step 4: Restart w/ New Prompt",
        "info": "",
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "0ad9554c20eb8dd0",
        "type": "switch",
        "z": "191694dad2850f37",
        "g": "b1dd9777ee396bd7",
        "name": "If Step 1",
        "property": "step",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 340,
        "wires": [
            [
                "34fa053e9707e425"
            ]
        ]
    },
    {
        "id": "4135e1850bf3099c",
        "type": "switch",
        "z": "191694dad2850f37",
        "g": "5dbdaf47523ce33a",
        "name": "If Step 2 or 3",
        "property": "step",
        "propertyType": "flow",
        "rules": [
            {
                "t": "btwn",
                "v": "2",
                "vt": "num",
                "v2": "3",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1270,
        "y": 600,
        "wires": [
            [
                "42cede20c9456a92"
            ]
        ]
    },
    {
        "id": "93859b35073996c8",
        "type": "subflow:a59054999730c251",
        "z": "191694dad2850f37",
        "d": true,
        "g": "83fd8826b0ec3bf4",
        "name": "Model - openai - localhost",
        "env": [
            {
                "name": "Id",
                "value": "openai-localhost",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:8080",
                "type": "str"
            }
        ],
        "x": 350,
        "y": 720,
        "wires": [
            [
                "d48b052e253b43c3"
            ]
        ]
    },
    {
        "id": "8565c4a9a8c13312",
        "type": "subflow:fe8f70709279ea90",
        "z": "191694dad2850f37",
        "g": "0e31504694a6eb0c",
        "name": "Step 1",
        "env": [
            {
                "name": "Step",
                "value": "1",
                "type": "num"
            },
            {
                "name": "InitHistoryId",
                "value": "solution-01",
                "type": "str"
            },
            {
                "name": "Wait",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "0ad9554c20eb8dd0"
            ]
        ]
    },
    {
        "id": "1322aa4137d1056e",
        "type": "function",
        "z": "191694dad2850f37",
        "d": true,
        "g": "17a2a4d88505d1b2",
        "name": "Prompt: Evalutate Solution",
        "func": "msg.createUserPrompt = (history) => {\n    const problemStatement = history.entries[0].content;\n\n    const solution = history.entries.slice(-1)[0].content;\n\n    return `I'm going to give you a prompt that a user named Lilly gave to an LLM model named BigStar-13B. Then, I will give you the response BigStar gave to Lilly. I want you to rate BigStar's response on a scale from 1-10. Then, give 2-3 specific improvements to BigStar's response that would have increased it's rating.\n\nHere is Lilly's prompt:\n\n${problemStatement}\n\nHere is BigStar's response:\n\n${solution}\n\nWhat would you rate BigStar's response?`;\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 420,
        "wires": [
            [
                "1f999e727d7bdcbd"
            ]
        ]
    },
    {
        "id": "1f999e727d7bdcbd",
        "type": "subflow:fe8f70709279ea90",
        "z": "191694dad2850f37",
        "g": "17a2a4d88505d1b2",
        "name": "Step 2",
        "env": [
            {
                "name": "Step",
                "value": "2",
                "type": "num"
            },
            {
                "name": "InitHistoryId",
                "value": "eval-01",
                "type": "str"
            }
        ],
        "x": 1290,
        "y": 420,
        "wires": [
            [
                "4135e1850bf3099c"
            ]
        ]
    },
    {
        "id": "833eaf27d6837495",
        "type": "subflow:fe8f70709279ea90",
        "z": "191694dad2850f37",
        "g": "3334e9dd5bf3557d",
        "name": "Step 3",
        "env": [
            {
                "name": "Step",
                "value": "3",
                "type": "num"
            },
            {
                "name": "InitHistory",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1290,
        "y": 900,
        "wires": [
            [
                "909642bb1b9261ea"
            ]
        ]
    },
    {
        "id": "fe0f3fe28e08e2f0",
        "type": "function",
        "z": "191694dad2850f37",
        "g": "3334e9dd5bf3557d",
        "name": "Prompt: Propose New Prompt",
        "func": "msg.createUserPrompt = () => \n    `How could Lilly's prompt be altered to get BigStar to respond with your suggested improvements? Please provide the new prompt wrapped in <prompt></prompt> tags.`;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 900,
        "wires": [
            [
                "833eaf27d6837495"
            ]
        ]
    },
    {
        "id": "a33731f7d26ff1d8",
        "type": "subflow:fe8f70709279ea90",
        "z": "191694dad2850f37",
        "g": "0df36a8be0d76989",
        "name": "Step 4",
        "env": [
            {
                "name": "Step",
                "value": "4",
                "type": "num"
            },
            {
                "name": "InitHistory",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 930,
        "y": 220,
        "wires": [
            [
                "85c126ddb6ae9692"
            ]
        ]
    },
    {
        "id": "36217d16d71a4c30",
        "type": "inject",
        "z": "191694dad2850f37",
        "g": "17a2a4d88505d1b2",
        "name": "Start @ Step 2",
        "props": [
            {
                "p": "historyId",
                "v": "solution-01",
                "vt": "str"
            },
            {
                "p": "historySourceFilename",
                "v": "/data/db/history-1706503270302.json",
                "vt": "str"
            },
            {
                "p": "action",
                "v": "step-start-at",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1260,
        "y": 340,
        "wires": [
            [
                "b38cd518b824c20d"
            ]
        ]
    },
    {
        "id": "7b60dc37c59dc80f",
        "type": "inject",
        "z": "191694dad2850f37",
        "g": "0df36a8be0d76989",
        "name": "Start @ Step 4",
        "props": [
            {
                "p": "historyId",
                "v": "eval-01",
                "vt": "str"
            },
            {
                "p": "historySourceFilename",
                "v": "/data/db/history-1706169633523.json",
                "vt": "str"
            },
            {
                "p": "action",
                "v": "step-start-at",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1260,
        "y": 80,
        "wires": [
            [
                "0800060d86e1ca55"
            ]
        ]
    },
    {
        "id": "36f73b6e3236c721",
        "type": "inject",
        "z": "191694dad2850f37",
        "g": "3334e9dd5bf3557d",
        "name": "Start @ Step 3",
        "props": [
            {
                "p": "historyId",
                "v": "eval-01",
                "vt": "str"
            },
            {
                "p": "historySourceFilename",
                "v": "/data/db/history-1706169407261.json",
                "vt": "str"
            },
            {
                "p": "action",
                "v": "step-start-at",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1260,
        "y": 820,
        "wires": [
            [
                "fe0f3fe28e08e2f0"
            ]
        ]
    },
    {
        "id": "bd8902942d9f30bc",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 780,
        "wires": [
            [
                "fe0f3fe28e08e2f0"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "f79210375a125e74",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1435,
        "y": 660,
        "wires": [
            [
                "bd8902942d9f30bc"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "909642bb1b9261ea",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1435,
        "y": 820,
        "wires": [
            [
                "246801bf115544b3"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "246801bf115544b3",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1125,
        "y": 640,
        "wires": [
            [
                "4135e1850bf3099c"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "c9ba32537f7bc133",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1435,
        "y": 320,
        "wires": [
            [
                "322d52b49ebe2f42"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "88802dbd1e8b0c57",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 645,
        "y": 420,
        "wires": [
            [
                "fe160cbe0df384e5"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "85c126ddb6ae9692",
        "type": "subflow:3bb38f582155f29d",
        "z": "191694dad2850f37",
        "g": "0df36a8be0d76989",
        "name": "",
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "a8aa5ac1df416d41"
            ]
        ]
    },
    {
        "id": "a8aa5ac1df416d41",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 345,
        "y": 280,
        "wires": [
            [
                "8565c4a9a8c13312"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "322d52b49ebe2f42",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 755,
        "y": 260,
        "wires": [
            [
                "0800060d86e1ca55"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "6b036e58872195a7",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1435,
        "y": 560,
        "wires": [
            [
                "fe160cbe0df384e5"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "079bf5373fe5d58f",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 775,
        "y": 640,
        "wires": [
            [
                "c8bf1c9a8fe80c37"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "c8bf1c9a8fe80c37",
        "type": "function",
        "z": "191694dad2850f37",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 305,
        "y": 380,
        "wires": [
            [
                "0ad9554c20eb8dd0"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "b38cd518b824c20d",
        "type": "function",
        "z": "191694dad2850f37",
        "g": "17a2a4d88505d1b2",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 855,
        "y": 420,
        "wires": [
            [
                "1322aa4137d1056e",
                "9240a0389d51445c"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "9240a0389d51445c",
        "type": "function",
        "z": "191694dad2850f37",
        "g": "17a2a4d88505d1b2",
        "name": "Prompt: Evalutate Against Original",
        "func": "msg.createUserPrompt = (history) => {\n    const problemStatement = flow.get(\"originalProblemStatement\");\n\n    const solution = history.entries.slice(-1)[0].content;\n\n    return `I'm going to give you a prompt that a user named Lilly gave to an LLM model named BigStar-13B. Then, I will give you the response BigStar gave to Lilly. I want you to rate BigStar's response on a scale from 1-10. Then, give 2-3 specific improvements to BigStar's response that would have increased it's rating.\n\nHere is Lilly's prompt:\n\n${problemStatement}\n\nHere is BigStar's response:\n\n${solution}\n\nWhat would you rate BigStar's response?`;\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 460,
        "wires": [
            [
                "1f999e727d7bdcbd"
            ]
        ]
    },
    {
        "id": "3e349487bb31edf5",
        "type": "inject",
        "z": "8518392b3e041cfe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 320,
        "wires": [
            [
                "ec9ee8ba595e12ca"
            ]
        ]
    },
    {
        "id": "ec9ee8ba595e12ca",
        "type": "function",
        "z": "8518392b3e041cfe",
        "name": "function 13",
        "func": "flow.set(\"prop\", 14);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 320,
        "wires": [
            [
                "9827779f81d25fee",
                "513f707299db2bac"
            ]
        ]
    },
    {
        "id": "9827779f81d25fee",
        "type": "function",
        "z": "8518392b3e041cfe",
        "name": "function 14",
        "func": "msg.root = flow.get(\"prop\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 340,
        "wires": [
            [
                "1ae2ee3010712831"
            ]
        ]
    },
    {
        "id": "3fe3f4f66c1086bc",
        "type": "debug",
        "z": "8518392b3e041cfe",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 340,
        "wires": []
    },
    {
        "id": "1ae2ee3010712831",
        "type": "subflow:95c38d96d861b4c4",
        "z": "8518392b3e041cfe",
        "name": "",
        "x": 1180,
        "y": 340,
        "wires": [
            [
                "3fe3f4f66c1086bc"
            ]
        ]
    },
    {
        "id": "513f707299db2bac",
        "type": "switch",
        "z": "8518392b3e041cfe",
        "name": "MySwitch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "one",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "two",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "three",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 840,
        "y": 460,
        "wires": [
            [
                "faeb427526c15c85"
            ],
            [
                "aafa6c5af0929a27"
            ],
            [
                "4649802dd53440e4"
            ]
        ]
    },
    {
        "id": "faeb427526c15c85",
        "type": "function",
        "z": "8518392b3e041cfe",
        "name": "function 17",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "aafa6c5af0929a27",
        "type": "function",
        "z": "8518392b3e041cfe",
        "name": "function 18",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "4649802dd53440e4",
        "type": "function",
        "z": "8518392b3e041cfe",
        "name": "function 19",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "07b22b0dc0d11143",
        "type": "rbe",
        "z": "8518392b3e041cfe",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 710,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "a55573e0a503cd32",
        "type": "delay",
        "z": "8518392b3e041cfe",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "e9f8ed38bd8d02c0",
        "type": "http request",
        "z": "8518392b3e041cfe",
        "name": "TEST-HTTP-REQ",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://example.com",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "8bfdab680b95f8bb",
        "type": "switch",
        "z": "8518392b3e041cfe",
        "name": "If not null, else",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 780,
        "y": 200,
        "wires": [
            [
                "df7672b738a32382"
            ],
            [
                "aa9403ce7147f75f"
            ]
        ]
    },
    {
        "id": "df7672b738a32382",
        "type": "debug",
        "z": "8518392b3e041cfe",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Not empty\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 160,
        "wires": []
    },
    {
        "id": "aa9403ce7147f75f",
        "type": "debug",
        "z": "8518392b3e041cfe",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Empty\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "a949b1fe09dd6896",
        "type": "inject",
        "z": "8518392b3e041cfe",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "undefined",
        "payloadType": "jsonata",
        "x": 530,
        "y": 200,
        "wires": [
            [
                "8bfdab680b95f8bb"
            ]
        ]
    },
    {
        "id": "c595413a72a78b1b",
        "type": "subflow:2b3efcc977e88d91",
        "z": "4d258c7de41d3e07",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "simple-rag",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 320,
        "wires": [
            [
                "e89cf8812605d88f"
            ]
        ]
    },
    {
        "id": "fb6acbac6e2d9fc4",
        "type": "inject",
        "z": "4d258c7de41d3e07",
        "name": "Start App",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            },
            {
                "p": "action",
                "v": "history-init",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "e89cf8812605d88f"
            ]
        ]
    },
    {
        "id": "1525d739279d5422",
        "type": "subflow:a59054999730c251",
        "z": "4d258c7de41d3e07",
        "d": true,
        "g": "a6665159eabf55ba",
        "name": "Model - openai - localhost",
        "env": [
            {
                "name": "Id",
                "value": "openai-localhost",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:8080",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 540,
        "wires": [
            [
                "0bdfb9335b655b7b"
            ]
        ]
    },
    {
        "id": "5b1ba49c624f1633",
        "type": "subflow:a59054999730c251",
        "z": "4d258c7de41d3e07",
        "d": true,
        "g": "a6665159eabf55ba",
        "name": "Model - genai - llama-cpp-llava",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-llava",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-llava",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 580,
        "wires": [
            [
                "0bdfb9335b655b7b"
            ]
        ]
    },
    {
        "id": "4289f12402c6ede9",
        "type": "comment",
        "z": "4d258c7de41d3e07",
        "g": "a6665159eabf55ba",
        "name": "Models",
        "info": "",
        "x": 250,
        "y": 480,
        "wires": []
    },
    {
        "id": "9abd1089c5b967cc",
        "type": "debug",
        "z": "4d258c7de41d3e07",
        "g": "57d76b98327ee84c",
        "name": "Model Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 740,
        "wires": []
    },
    {
        "id": "41c6b6041924578c",
        "type": "debug",
        "z": "4d258c7de41d3e07",
        "g": "57d76b98327ee84c",
        "name": "Model Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 700,
        "wires": []
    },
    {
        "id": "388b8948292a6e42",
        "type": "switch",
        "z": "4d258c7de41d3e07",
        "g": "57d76b98327ee84c",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "model-streaming-content",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 720,
        "wires": [
            [
                "41c6b6041924578c"
            ],
            [
                "9abd1089c5b967cc"
            ]
        ]
    },
    {
        "id": "0bdfb9335b655b7b",
        "type": "function",
        "z": "4d258c7de41d3e07",
        "g": "a6665159eabf55ba",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 535,
        "y": 600,
        "wires": [
            [
                "388b8948292a6e42",
                "e89cf8812605d88f"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "083cd95ebe479e4c",
        "type": "subflow:2ec5ed7947d505dd",
        "z": "4d258c7de41d3e07",
        "g": "41a1b6b6b5db2dc0",
        "name": "",
        "env": [
            {
                "name": "Id",
                "value": "simple-rag",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:6333",
                "type": "str"
            }
        ],
        "x": 990,
        "y": 280,
        "wires": [
            [
                "87918d4b1691fe73",
                "62ff4025db27f69b",
                "e89cf8812605d88f"
            ]
        ]
    },
    {
        "id": "ac073e3ad1964190",
        "type": "subflow:9eb27f011bcf9a83",
        "z": "4d258c7de41d3e07",
        "d": true,
        "g": "132bac76be391419",
        "name": "Embeddings - Llama.cpp - localhost",
        "env": [
            {
                "name": "Id",
                "value": "llama-cpp-localhost",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:8080",
                "type": "str"
            }
        ],
        "x": 1540,
        "y": 460,
        "wires": [
            [
                "4d5a8d1e8ff6d660"
            ]
        ]
    },
    {
        "id": "c714a08872d8c5e7",
        "type": "function",
        "z": "4d258c7de41d3e07",
        "g": "d89f22418de07fba",
        "name": "Load files",
        "func": "const { DocxLoader } = langchainDocumentLoadersFsDocx;\nconst { DirectoryLoader } = langchainDocumentLoadersFsDirectory;\nconst { RecursiveCharacterTextSplitter  } = langchainTextSplitter;\n\nconst loader = new DirectoryLoader(\n    msg.directory,\n    {\n        \".docx\": (path) => new DocxLoader(path)\n    }\n);\n\nconst splitter = new RecursiveCharacterTextSplitter();\n\n(async () => {\n    try {\n        let docs = await loader.load();\n        docs = await splitter.splitDocuments(docs);\n        node.send({\n            action: \"vector-store-update-index\",\n            docs\n        });\n    }\n    catch (e) {\n        node.error(e.stack);\n    }\n})();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "langchainDocumentLoadersFsDirectory",
                "module": "langchain/document_loaders/fs/directory"
            },
            {
                "var": "langchainDocumentLoadersFsDocx",
                "module": "langchain/document_loaders/fs/docx"
            },
            {
                "var": "langchainTextSplitter",
                "module": "langchain/text_splitter"
            },
            {
                "var": "mammoth",
                "module": "mammoth"
            }
        ],
        "x": 1420,
        "y": 220,
        "wires": [
            [
                "083cd95ebe479e4c"
            ]
        ]
    },
    {
        "id": "9602172f379d6949",
        "type": "inject",
        "z": "4d258c7de41d3e07",
        "g": "d89f22418de07fba",
        "name": "Index directory",
        "props": [
            {
                "p": "directory",
                "v": "/data/rag/simple-rag/new",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1440,
        "y": 160,
        "wires": [
            [
                "c714a08872d8c5e7"
            ]
        ]
    },
    {
        "id": "f6ee8199578688d0",
        "type": "subflow:9eb27f011bcf9a83",
        "z": "4d258c7de41d3e07",
        "d": true,
        "g": "132bac76be391419",
        "name": "Embeddings - dummy - localhost",
        "env": [
            {
                "name": "Id",
                "value": "dummy-localhost",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://host.docker.internal:8091",
                "type": "str"
            }
        ],
        "x": 1540,
        "y": 420,
        "wires": [
            [
                "4d5a8d1e8ff6d660"
            ]
        ]
    },
    {
        "id": "87918d4b1691fe73",
        "type": "function",
        "z": "4d258c7de41d3e07",
        "g": "132bac76be391419",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1355,
        "y": 360,
        "wires": [
            [
                "f6ee8199578688d0",
                "ac073e3ad1964190",
                "a9572ffa926d1edc",
                "1648a58fa167dcbd"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "4d5a8d1e8ff6d660",
        "type": "function",
        "z": "4d258c7de41d3e07",
        "g": "132bac76be391419",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1765,
        "y": 520,
        "wires": [
            [
                "b3466cd08378ae07",
                "1c99cd2039cfe650"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "92142139591ba63d",
        "type": "debug",
        "z": "4d258c7de41d3e07",
        "g": "a4c668896ae9d468",
        "name": "Embeddings Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 660,
        "wires": []
    },
    {
        "id": "419f2ab4efdbabd3",
        "type": "debug",
        "z": "4d258c7de41d3e07",
        "g": "a4c668896ae9d468",
        "name": "Embeddings Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 620,
        "wires": []
    },
    {
        "id": "b3466cd08378ae07",
        "type": "switch",
        "z": "4d258c7de41d3e07",
        "g": "a4c668896ae9d468",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "model-streaming-content",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "model-error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 640,
        "wires": [
            [
                "419f2ab4efdbabd3"
            ],
            [
                "92142139591ba63d"
            ]
        ]
    },
    {
        "id": "f68cbbc22164d634",
        "type": "comment",
        "z": "4d258c7de41d3e07",
        "g": "132bac76be391419",
        "name": "Embeddings Models",
        "info": "",
        "x": 1490,
        "y": 360,
        "wires": []
    },
    {
        "id": "62ff4025db27f69b",
        "type": "switch",
        "z": "4d258c7de41d3e07",
        "g": "41a1b6b6b5db2dc0",
        "name": "Action",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "vector-store-error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 360,
        "wires": [
            [
                "e3090e8b70f84526"
            ]
        ]
    },
    {
        "id": "e3090e8b70f84526",
        "type": "debug",
        "z": "4d258c7de41d3e07",
        "g": "41a1b6b6b5db2dc0",
        "name": "VectorStore Errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 360,
        "wires": []
    },
    {
        "id": "2989cf7eca1cfaaa",
        "type": "comment",
        "z": "4d258c7de41d3e07",
        "g": "41a1b6b6b5db2dc0",
        "name": "Vector Store",
        "info": "",
        "x": 970,
        "y": 220,
        "wires": []
    },
    {
        "id": "8e8a149c1cc8ba68",
        "type": "comment",
        "z": "4d258c7de41d3e07",
        "g": "d89f22418de07fba",
        "name": "Index",
        "info": "",
        "x": 1410,
        "y": 100,
        "wires": []
    },
    {
        "id": "e89cf8812605d88f",
        "type": "subflow:a4137713471da6c4",
        "z": "4d258c7de41d3e07",
        "name": "",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "c595413a72a78b1b",
                "7f0d19a15b573605",
                "acd0680bb6e69b51"
            ]
        ]
    },
    {
        "id": "1c99cd2039cfe650",
        "type": "function",
        "z": "4d258c7de41d3e07",
        "name": " ",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1835,
        "y": 340,
        "wires": [
            [
                "083cd95ebe479e4c"
            ]
        ],
        "icon": "font-awesome/fa-arrows",
        "l": false
    },
    {
        "id": "7f0d19a15b573605",
        "type": "function",
        "z": "4d258c7de41d3e07",
        "name": "Prompts",
        "func": "msg.systemPrompt = `You are a helpful chat bot that will perform any requested tasks to the best of your ability.`;\n\nmsg.contextPrompt = (context) => `The following documents will provide you useful context when performing your task: \n${\n    context.map(doc => {\n        return `\n----- BEGIN DOCUMENT: ${doc.metadata.source} -----\n\n${doc.pageContent}\n\n----- END DOCUMENT -----\n`;\n    })\n}\n`\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 360,
        "wires": [
            [
                "1525d739279d5422",
                "5b1ba49c624f1633",
                "1a8be604e1fb0f60"
            ]
        ]
    },
    {
        "id": "a9572ffa926d1edc",
        "type": "subflow:9eb27f011bcf9a83",
        "z": "4d258c7de41d3e07",
        "d": true,
        "g": "132bac76be391419",
        "name": "Embeddings - genai - llama-cpp-llava",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-llava-embeddings",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-llava",
                "type": "str"
            }
        ],
        "x": 1550,
        "y": 500,
        "wires": [
            [
                "4d5a8d1e8ff6d660"
            ]
        ]
    },
    {
        "id": "acd0680bb6e69b51",
        "type": "function",
        "z": "4d258c7de41d3e07",
        "name": "Vector Search Params",
        "func": "msg.vectorSearchParams = {\n    top: 4\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            [
                "083cd95ebe479e4c"
            ]
        ]
    },
    {
        "id": "1a8be604e1fb0f60",
        "type": "subflow:a59054999730c251",
        "z": "4d258c7de41d3e07",
        "g": "a6665159eabf55ba",
        "name": "Model - genai - llama-cpp-mistral-8x",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-mistral-8x",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-mistral-8x",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 620,
        "wires": [
            [
                "0bdfb9335b655b7b"
            ]
        ]
    },
    {
        "id": "1648a58fa167dcbd",
        "type": "subflow:9eb27f011bcf9a83",
        "z": "4d258c7de41d3e07",
        "g": "132bac76be391419",
        "name": "Embeddings - genai - llama-cpp-mistral-8x",
        "env": [
            {
                "name": "Id",
                "value": "genai-llama-cpp-mistral-8x-embeddings",
                "type": "str"
            },
            {
                "name": "BaseUrl",
                "value": "http://d2u7t6ixyjqeq5.cloudfront.net/genai-llama-cpp-mistral-8x",
                "type": "str"
            }
        ],
        "x": 1560,
        "y": 540,
        "wires": [
            [
                "4d5a8d1e8ff6d660"
            ]
        ]
    },
    {
        "id": "0dd8b704b63c96a1",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "g": "f1bf7ba3b4088527",
        "name": "Authorize",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"password\": \"\",   \"username\": \"admin\" }",
        "payloadType": "json",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "bd7eb8ec2a8e0da9"
            ]
        ]
    },
    {
        "id": "3b853d53f8b1fb4d",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "f1bf7ba3b4088527",
        "name": "SaveToken",
        "rules": [
            {
                "t": "set",
                "p": "portainer_jwt",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "46b306f2e48bb850",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "41aad7d8f71cd6e6",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-API-Key",
                "valueType": "msg",
                "valueValue": "token"
            }
        ],
        "x": 570,
        "y": 280,
        "wires": [
            [
                "7887225ee569137c"
            ]
        ]
    },
    {
        "id": "733507b741691f58",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Fetch",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "6fc0878730035324",
                "4534e2dfa3d348df"
            ]
        ]
    },
    {
        "id": "7887225ee569137c",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Save Endpoints",
        "func": "var instances = [];\nmsg.payload.forEach(function(endpoint) {\n    var obj = {};\n    obj[endpoint.Name] = endpoint.Id;\n    instances.push(obj)\n});\nflow.set('portainer_endpoints', instances);\nmsg.payload = instances[0];\nmsg.options = instances;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "9f7f53505a88dbb1",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "41aad7d8f71cd6e6",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-API-Key",
                "valueType": "msg",
                "valueValue": "token"
            }
        ],
        "x": 570,
        "y": 340,
        "wires": [
            [
                "374c4ab5a3ae97c7"
            ]
        ]
    },
    {
        "id": "fdb9b09540cd5ba6",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set Endpoint",
        "func": "\nmsg.url = flow.get('server_url')+'/api/endpoints/'+msg.payload+'/docker/containers/json?all=true';\nmsg.token = flow.get('portainer_jwt');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "9f7f53505a88dbb1"
            ]
        ]
    },
    {
        "id": "374c4ab5a3ae97c7",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set Options",
        "func": "msg.options = msg.payload.map((item)=>{\n    let obj = {};\n   obj[item.Names[0]] = item.Id;\n    return obj;\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "75a002efe0c1f011",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Save Container",
        "rules": [
            {
                "t": "set",
                "p": "portainer_container",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 340,
        "wires": [
            [
                "df970663c1614b1d"
            ]
        ]
    },
    {
        "id": "84cb3dac9b9f5d39",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set Url",
        "func": "let endpoint = flow.get('portainer_endpoint');\nlet container = flow.get('portainer_container');\nlet startOrStop = msg.payload ? 'start' : 'stop';\nif(!endpoint || !container){\n    return [null, { payload: \"Either endpoint or container not selected\", status: !msg.payload}]\n}else{\n    msg.url = flow.get('server_url') +'/api/endpoints/' + endpoint + '/docker/containers/'+container+'/'+startOrStop;\n    msg.token = flow.get('portainer_jwt');\n    return [msg,null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 480,
        "wires": [
            [
                "b56089ef7ebdddf2"
            ],
            []
        ]
    },
    {
        "id": "909a59dbc05a2fad",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Save Container",
        "rules": [
            {
                "t": "set",
                "p": "portainer_endpoint",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "14dab9180b245706",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "d3ea6600f7f1c7d6",
        "name": "Reset",
        "func": "flow.set('portainer_endpoint', null);\nflow.set('portainer_container',null);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "1ed0f9b52a08f533",
        "type": "link in",
        "z": "f6f2187d.f17ca8",
        "g": "d3ea6600f7f1c7d6",
        "name": "Reset Link",
        "links": [
            "6fc0878730035324"
        ],
        "x": 955,
        "y": 120,
        "wires": [
            [
                "14dab9180b245706"
            ]
        ]
    },
    {
        "id": "6fc0878730035324",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Fetch Link",
        "mode": "link",
        "links": [
            "0c165bf98f40b598",
            "1ed0f9b52a08f533"
        ],
        "x": 265,
        "y": 320,
        "wires": []
    },
    {
        "id": "b56089ef7ebdddf2",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "41aad7d8f71cd6e6",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-API-Key",
                "valueType": "msg",
                "valueValue": "token"
            }
        ],
        "x": 970,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "60e45a11ede888cb",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set Button",
        "func": "msg.enabled = !!flow.get('portainer_container');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "df970663c1614b1d",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set Button",
        "mode": "link",
        "links": [
            "49c1d79c39f3c0a4"
        ],
        "x": 1385,
        "y": 340,
        "wires": []
    },
    {
        "id": "0c165bf98f40b598",
        "type": "link in",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set Button Status",
        "links": [
            "35aa7e2f151f726c",
            "6fc0878730035324"
        ],
        "x": 95,
        "y": 480,
        "wires": [
            [
                "60e45a11ede888cb"
            ]
        ]
    },
    {
        "id": "a86d84649831b0fc",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set Url",
        "func": "let endpoint = flow.get('portainer_endpoint');\nlet container = flow.get('portainer_container');\nif (!!endpoint && !!container){\n    msg.url = flow.get('server_url') +'/api/endpoints/' + endpoint + '/docker/containers/'+container+'/json';\n    msg.token = flow.get('portainer_jwt');\n    return msg\n}\nelse\n    return null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "0b6e18ac2c03166b"
            ]
        ]
    },
    {
        "id": "49c1d79c39f3c0a4",
        "type": "link in",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Container Selected",
        "links": [
            "df970663c1614b1d"
        ],
        "x": 95,
        "y": 400,
        "wires": [
            [
                "a86d84649831b0fc"
            ]
        ]
    },
    {
        "id": "0b6e18ac2c03166b",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "41aad7d8f71cd6e6",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-API-Key",
                "valueType": "msg",
                "valueValue": "token"
            }
        ],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "e6f08d657cfa77a9"
            ]
        ]
    },
    {
        "id": "e6f08d657cfa77a9",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Get Status",
        "func": "//msg.payload = msg.payload.State.Running;\nreturn [\n    { payload: msg.payload.State.Running},\n    { payload: msg.payload.State.Status},\n    { payload: msg.payload.State.Health.Status },\n    { payload: msg.payload.State.StartedAt}\n];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 400,
        "wires": [
            [
                "35aa7e2f151f726c"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "72d2e05a0acd3fa8",
        "type": "delay",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 570,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "35aa7e2f151f726c",
        "type": "link out",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set Button",
        "mode": "link",
        "links": [
            "0c165bf98f40b598"
        ],
        "x": 915,
        "y": 380,
        "wires": []
    },
    {
        "id": "f1c8fbcb6c326e46",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Update Status",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 180,
        "y": 360,
        "wires": [
            [
                "a86d84649831b0fc",
                "bfb495bb4ca9ae6f"
            ]
        ]
    },
    {
        "id": "bfb495bb4ca9ae6f",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set Url",
        "func": "let endpoint = flow.get('portainer_endpoint');\nlet container = flow.get('portainer_container');\nif (!!endpoint && !!container){\n    msg.url = flow.get('server_url') +'/api/endpoints/' + endpoint + '/docker/containers/' + container +'/stats?stream=false&one-shot=false';\n    msg.token = flow.get('portainer_jwt');\n    return msg\n}\nelse\n    return null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 580,
        "wires": [
            [
                "6026847cd96ce18c"
            ]
        ]
    },
    {
        "id": "6026847cd96ce18c",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "41aad7d8f71cd6e6",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-API-Key",
                "valueType": "msg",
                "valueValue": "token"
            }
        ],
        "x": 590,
        "y": 580,
        "wires": [
            [
                "12ca61074a76e5dd",
                "d8c78c08e407231e"
            ]
        ]
    },
    {
        "id": "12ca61074a76e5dd",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "CPU Usage",
        "func": "var stats = msg.payload;\nif(!!stats){\n    var cpu_delta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;\n    var system_cpu_delta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;\n    var number_cpus = stats.cpu_stats.online_cpus;\n   // msg.payload = { data: [stats, cpu_delta, system_cpu_delta, number_cpus]}\n    msg.payload = Number((cpu_delta === 0? 0 : (cpu_delta / system_cpu_delta) * number_cpus * 100.0).toFixed(2));\n    return msg;\n}\nelse\n    return null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d8c78c08e407231e",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Memory Usage",
        "func": "var stats = msg.payload;\nif(!!stats){\n    if (!!stats.memory_stats.stats.cache)\n        var used_memory = stats.memory_stats.usage - stats.memory_stats.stats.cache;\n    else\n        var used_memory = stats.memory_stats.usage - stats.memory_stats.stats.inactive_file\n    var available_memory =stats.memory_stats.limit\n    // msg.payload = { data: [stats, used_memory, available_memory]}\n    msg.payload = Number(((used_memory / available_memory) * 100.000).toFixed(2));\n    return msg;\n}\nelse\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 640,
        "wires": [
            [
                "d75002a1564c11aa"
            ]
        ]
    },
    {
        "id": "d75002a1564c11aa",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 700,
        "wires": []
    },
    {
        "id": "bd7eb8ec2a8e0da9",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "f1bf7ba3b4088527",
        "name": "Configuration",
        "func": "msg.payload = \"ptr_3Wql5OXTh3bhXGW18Bzrk8SjVcr2xmBFXmpciFzR7zI=\"\nmsg.serverUrl = \"https://192.168.0.103:9443\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 120,
        "wires": [
            [
                "3b853d53f8b1fb4d",
                "d3e4f8597b868498"
            ]
        ]
    },
    {
        "id": "d3e4f8597b868498",
        "type": "change",
        "z": "f6f2187d.f17ca8",
        "g": "f1bf7ba3b4088527",
        "name": "Save URL",
        "rules": [
            {
                "t": "set",
                "p": "server_url",
                "pt": "flow",
                "to": "serverUrl",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4534e2dfa3d348df",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "g": "856e8d2dc2416b46",
        "name": "Set URL",
        "func": "msg.url = flow.get('server_url') + '/api/endpoints'\nmsg.token = flow.get('portainer_jwt');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 280,
        "wires": [
            [
                "46b306f2e48bb850"
            ]
        ]
    }
]